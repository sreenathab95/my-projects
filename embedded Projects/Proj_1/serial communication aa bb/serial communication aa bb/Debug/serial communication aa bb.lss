
serial communication aa bb.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000040c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  00000460  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000085  00000000  00000000  00000b2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000020  00000000  00000000  00000bb1  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000006c  00000000  00000000  00000bd1  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000222  00000000  00000000  00000c3d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000f4  00000000  00000000  00000e5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003a6  00000000  00000000  00000f53  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000090  00000000  00000000  000012fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000ed  00000000  00000000  0000138c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubtypes 0000001e  00000000  00000000  00001479  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001497  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 04 02 	jmp	0x408	; 0x408 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
void data(char d);
void display(const char *s);
void delay(char x);
void serialtx(const char*p);
int main(void)
{
  6c:	0f 93       	push	r16
  6e:	1f 93       	push	r17
  70:	df 93       	push	r29
  72:	cf 93       	push	r28
  74:	cd b7       	in	r28, 0x3d	; 61
  76:	de b7       	in	r29, 0x3e	; 62
  78:	e6 97       	sbiw	r28, 0x36	; 54
  7a:	0f b6       	in	r0, 0x3f	; 63
  7c:	f8 94       	cli
  7e:	de bf       	out	0x3e, r29	; 62
  80:	0f be       	out	0x3f, r0	; 63
  82:	cd bf       	out	0x3d, r28	; 61
	DDRC=0XFF;
  84:	84 e3       	ldi	r24, 0x34	; 52
  86:	90 e0       	ldi	r25, 0x00	; 0
  88:	2f ef       	ldi	r18, 0xFF	; 255
  8a:	fc 01       	movw	r30, r24
  8c:	20 83       	st	Z, r18
	DDRD=0XFF;
  8e:	81 e3       	ldi	r24, 0x31	; 49
  90:	90 e0       	ldi	r25, 0x00	; 0
  92:	2f ef       	ldi	r18, 0xFF	; 255
  94:	fc 01       	movw	r30, r24
  96:	20 83       	st	Z, r18
	command(0x38);
  98:	88 e3       	ldi	r24, 0x38	; 56
  9a:	0e 94 88 01 	call	0x310	; 0x310 <command>
	command(0x06);
  9e:	86 e0       	ldi	r24, 0x06	; 6
  a0:	0e 94 88 01 	call	0x310	; 0x310 <command>
	command(0x0C);
  a4:	8c e0       	ldi	r24, 0x0C	; 12
  a6:	0e 94 88 01 	call	0x310	; 0x310 <command>
	command(0x80);
  aa:	80 e8       	ldi	r24, 0x80	; 128
  ac:	0e 94 88 01 	call	0x310	; 0x310 <command>
	command(0x01);
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	0e 94 88 01 	call	0x310	; 0x310 <command>
	char a,b,c[50],c1;
	UCSRA=0x00;
  b6:	8b e2       	ldi	r24, 0x2B	; 43
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	fc 01       	movw	r30, r24
  bc:	10 82       	st	Z, r1
	UCSRB=0x18;
  be:	8a e2       	ldi	r24, 0x2A	; 42
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	28 e1       	ldi	r18, 0x18	; 24
  c4:	fc 01       	movw	r30, r24
  c6:	20 83       	st	Z, r18
	UCSRC=0x06;
  c8:	80 e4       	ldi	r24, 0x40	; 64
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	26 e0       	ldi	r18, 0x06	; 6
  ce:	fc 01       	movw	r30, r24
  d0:	20 83       	st	Z, r18
	UBRRL=0x19;
  d2:	89 e2       	ldi	r24, 0x29	; 41
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	29 e1       	ldi	r18, 0x19	; 25
  d8:	fc 01       	movw	r30, r24
  da:	20 83       	st	Z, r18
	UBRRH=0x00;
  dc:	80 e4       	ldi	r24, 0x40	; 64
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	fc 01       	movw	r30, r24
  e2:	10 82       	st	Z, r1
  e4:	03 c0       	rjmp	.+6      	; 0xec <main+0x80>
					 				
					}
				}						
			else
			{
			  goto s2;
  e6:	00 00       	nop
  e8:	01 c0       	rjmp	.+2      	; 0xec <main+0x80>
			}	
	}	
  ea:	00 00       	nop
	UBRRL=0x19;
	UBRRH=0x00;

    while(1)
    {
		s2: a=receive();
  ec:	0e 94 03 01 	call	0x206	; 0x206 <receive>
  f0:	8a 83       	std	Y+2, r24	; 0x02
		if (a=='a')
  f2:	8a 81       	ldd	r24, Y+2	; 0x02
  f4:	81 36       	cpi	r24, 0x61	; 97
  f6:	b9 f7       	brne	.-18     	; 0xe6 <main+0x7a>
		{
			char a1=receive();
  f8:	0e 94 03 01 	call	0x206	; 0x206 <receive>
  fc:	8b 83       	std	Y+3, r24	; 0x03
			if (a1=='a')
  fe:	8b 81       	ldd	r24, Y+3	; 0x03
 100:	81 36       	cpi	r24, 0x61	; 97
 102:	99 f7       	brne	.-26     	; 0xea <main+0x7e>
			{
				while(1)
				{
	
					s1: c[b]=receive();
 104:	89 81       	ldd	r24, Y+1	; 0x01
 106:	08 2f       	mov	r16, r24
 108:	10 e0       	ldi	r17, 0x00	; 0
 10a:	0e 94 03 01 	call	0x206	; 0x206 <receive>
 10e:	28 2f       	mov	r18, r24
 110:	ce 01       	movw	r24, r28
 112:	05 96       	adiw	r24, 0x05	; 5
 114:	80 0f       	add	r24, r16
 116:	91 1f       	adc	r25, r17
 118:	fc 01       	movw	r30, r24
 11a:	20 83       	st	Z, r18
					if(c[b]=='a'&&b==0)
 11c:	89 81       	ldd	r24, Y+1	; 0x01
 11e:	88 2f       	mov	r24, r24
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	9e 01       	movw	r18, r28
 124:	2b 5f       	subi	r18, 0xFB	; 251
 126:	3f 4f       	sbci	r19, 0xFF	; 255
 128:	82 0f       	add	r24, r18
 12a:	93 1f       	adc	r25, r19
 12c:	fc 01       	movw	r30, r24
 12e:	80 81       	ld	r24, Z
 130:	81 36       	cpi	r24, 0x61	; 97
 132:	29 f4       	brne	.+10     	; 0x13e <main+0xd2>
 134:	89 81       	ldd	r24, Y+1	; 0x01
 136:	88 23       	and	r24, r24
 138:	11 f4       	brne	.+4      	; 0x13e <main+0xd2>
					 {
						 b=0;
 13a:	19 82       	std	Y+1, r1	; 0x01
						 goto s1;
 13c:	e3 cf       	rjmp	.-58     	; 0x104 <main+0x98>
					 }
					if (c[b]=='a')
 13e:	89 81       	ldd	r24, Y+1	; 0x01
 140:	88 2f       	mov	r24, r24
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	9e 01       	movw	r18, r28
 146:	2b 5f       	subi	r18, 0xFB	; 251
 148:	3f 4f       	sbci	r19, 0xFF	; 255
 14a:	82 0f       	add	r24, r18
 14c:	93 1f       	adc	r25, r19
 14e:	fc 01       	movw	r30, r24
 150:	80 81       	ld	r24, Z
 152:	81 36       	cpi	r24, 0x61	; 97
 154:	09 f5       	brne	.+66     	; 0x198 <main+0x12c>
					{
						b++;
 156:	89 81       	ldd	r24, Y+1	; 0x01
 158:	8f 5f       	subi	r24, 0xFF	; 255
 15a:	89 83       	std	Y+1, r24	; 0x01
						c[b]=receive();
 15c:	89 81       	ldd	r24, Y+1	; 0x01
 15e:	08 2f       	mov	r16, r24
 160:	10 e0       	ldi	r17, 0x00	; 0
 162:	0e 94 03 01 	call	0x206	; 0x206 <receive>
 166:	28 2f       	mov	r18, r24
 168:	ce 01       	movw	r24, r28
 16a:	05 96       	adiw	r24, 0x05	; 5
 16c:	80 0f       	add	r24, r16
 16e:	91 1f       	adc	r25, r17
 170:	fc 01       	movw	r30, r24
 172:	20 83       	st	Z, r18
						if(c[b]=='a')
 174:	89 81       	ldd	r24, Y+1	; 0x01
 176:	88 2f       	mov	r24, r24
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	9e 01       	movw	r18, r28
 17c:	2b 5f       	subi	r18, 0xFB	; 251
 17e:	3f 4f       	sbci	r19, 0xFF	; 255
 180:	82 0f       	add	r24, r18
 182:	93 1f       	adc	r25, r19
 184:	fc 01       	movw	r30, r24
 186:	80 81       	ld	r24, Z
 188:	81 36       	cpi	r24, 0x61	; 97
 18a:	11 f4       	brne	.+4      	; 0x190 <main+0x124>
						 {
							b=0;
 18c:	19 82       	std	Y+1, r1	; 0x01
					     	goto s1; 
 18e:	ba cf       	rjmp	.-140    	; 0x104 <main+0x98>
						 }
					    else
						 {
							 b++;
 190:	89 81       	ldd	r24, Y+1	; 0x01
 192:	8f 5f       	subi	r24, 0xFF	; 255
 194:	89 83       	std	Y+1, r24	; 0x01
							 goto s1;
 196:	b6 cf       	rjmp	.-148    	; 0x104 <main+0x98>
						 }	 
						 
					}
					if (c[b]=='b')
 198:	89 81       	ldd	r24, Y+1	; 0x01
 19a:	88 2f       	mov	r24, r24
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	9e 01       	movw	r18, r28
 1a0:	2b 5f       	subi	r18, 0xFB	; 251
 1a2:	3f 4f       	sbci	r19, 0xFF	; 255
 1a4:	82 0f       	add	r24, r18
 1a6:	93 1f       	adc	r25, r19
 1a8:	fc 01       	movw	r30, r24
 1aa:	80 81       	ld	r24, Z
 1ac:	82 36       	cpi	r24, 0x62	; 98
 1ae:	39 f5       	brne	.+78     	; 0x1fe <main+0x192>
						{
							char c1=receive();
 1b0:	0e 94 03 01 	call	0x206	; 0x206 <receive>
 1b4:	8c 83       	std	Y+4, r24	; 0x04
							if(c1=='b')
 1b6:	8c 81       	ldd	r24, Y+4	; 0x04
 1b8:	82 36       	cpi	r24, 0x62	; 98
 1ba:	99 f4       	brne	.+38     	; 0x1e2 <main+0x176>
							{
								
							c[b]='\0';
 1bc:	89 81       	ldd	r24, Y+1	; 0x01
 1be:	88 2f       	mov	r24, r24
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	9e 01       	movw	r18, r28
 1c4:	2b 5f       	subi	r18, 0xFB	; 251
 1c6:	3f 4f       	sbci	r19, 0xFF	; 255
 1c8:	82 0f       	add	r24, r18
 1ca:	93 1f       	adc	r25, r19
 1cc:	fc 01       	movw	r30, r24
 1ce:	10 82       	st	Z, r1
							command(0x80);
 1d0:	80 e8       	ldi	r24, 0x80	; 128
 1d2:	0e 94 88 01 	call	0x310	; 0x310 <command>
							display(c);
 1d6:	ce 01       	movw	r24, r28
 1d8:	05 96       	adiw	r24, 0x05	; 5
 1da:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <display>
							break;
 1de:	00 00       	nop
				}						
			else
			{
			  goto s2;
			}	
	}	
 1e0:	85 cf       	rjmp	.-246    	; 0xec <main+0x80>
							break;
							}
						   else
						    {
								
								b++;
 1e2:	89 81       	ldd	r24, Y+1	; 0x01
 1e4:	8f 5f       	subi	r24, 0xFF	; 255
 1e6:	89 83       	std	Y+1, r24	; 0x01
								c[b]=c1;
 1e8:	89 81       	ldd	r24, Y+1	; 0x01
 1ea:	88 2f       	mov	r24, r24
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	9e 01       	movw	r18, r28
 1f0:	2b 5f       	subi	r18, 0xFB	; 251
 1f2:	3f 4f       	sbci	r19, 0xFF	; 255
 1f4:	82 0f       	add	r24, r18
 1f6:	93 1f       	adc	r25, r19
 1f8:	2c 81       	ldd	r18, Y+4	; 0x04
 1fa:	fc 01       	movw	r30, r24
 1fc:	20 83       	st	Z, r18
							}								
						}
						
						b++;
 1fe:	89 81       	ldd	r24, Y+1	; 0x01
 200:	8f 5f       	subi	r24, 0xFF	; 255
 202:	89 83       	std	Y+1, r24	; 0x01
						goto s1;	
 204:	7f cf       	rjmp	.-258    	; 0x104 <main+0x98>

00000206 <receive>:
			  goto s2;
			}	
	}	
}
char receive()
{
 206:	df 93       	push	r29
 208:	cf 93       	push	r28
 20a:	cd b7       	in	r28, 0x3d	; 61
 20c:	de b7       	in	r29, 0x3e	; 62
	UCSRA&=~(1<<RXC);
 20e:	8b e2       	ldi	r24, 0x2B	; 43
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	2b e2       	ldi	r18, 0x2B	; 43
 214:	30 e0       	ldi	r19, 0x00	; 0
 216:	f9 01       	movw	r30, r18
 218:	20 81       	ld	r18, Z
 21a:	2f 77       	andi	r18, 0x7F	; 127
 21c:	fc 01       	movw	r30, r24
 21e:	20 83       	st	Z, r18
	while((UCSRA&(1<<RXC))==0);
 220:	00 00       	nop
 222:	8b e2       	ldi	r24, 0x2B	; 43
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	fc 01       	movw	r30, r24
 228:	80 81       	ld	r24, Z
 22a:	88 23       	and	r24, r24
 22c:	d4 f7       	brge	.-12     	; 0x222 <receive+0x1c>
	return(UDR);
 22e:	8c e2       	ldi	r24, 0x2C	; 44
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	fc 01       	movw	r30, r24
 234:	80 81       	ld	r24, Z
}
 236:	cf 91       	pop	r28
 238:	df 91       	pop	r29
 23a:	08 95       	ret

0000023c <transmit>:
void transmit(char t)
{
 23c:	df 93       	push	r29
 23e:	cf 93       	push	r28
 240:	0f 92       	push	r0
 242:	cd b7       	in	r28, 0x3d	; 61
 244:	de b7       	in	r29, 0x3e	; 62
 246:	89 83       	std	Y+1, r24	; 0x01
	UDR=t;
 248:	8c e2       	ldi	r24, 0x2C	; 44
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	29 81       	ldd	r18, Y+1	; 0x01
 24e:	fc 01       	movw	r30, r24
 250:	20 83       	st	Z, r18
	while((UCSRA&(1<<UDRE))==0x00);
 252:	00 00       	nop
 254:	8b e2       	ldi	r24, 0x2B	; 43
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	fc 01       	movw	r30, r24
 25a:	80 81       	ld	r24, Z
 25c:	88 2f       	mov	r24, r24
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	80 72       	andi	r24, 0x20	; 32
 262:	90 70       	andi	r25, 0x00	; 0
 264:	00 97       	sbiw	r24, 0x00	; 0
 266:	b1 f3       	breq	.-20     	; 0x254 <transmit+0x18>
}
 268:	0f 90       	pop	r0
 26a:	cf 91       	pop	r28
 26c:	df 91       	pop	r29
 26e:	08 95       	ret

00000270 <serialtx>:
void serialtx(const char*p)
{
 270:	df 93       	push	r29
 272:	cf 93       	push	r28
 274:	00 d0       	rcall	.+0      	; 0x276 <serialtx+0x6>
 276:	cd b7       	in	r28, 0x3d	; 61
 278:	de b7       	in	r29, 0x3e	; 62
 27a:	9a 83       	std	Y+2, r25	; 0x02
 27c:	89 83       	std	Y+1, r24	; 0x01
	while(*p)
 27e:	0f c0       	rjmp	.+30     	; 0x29e <serialtx+0x2e>
	{
		transmit(*p++);
 280:	89 81       	ldd	r24, Y+1	; 0x01
 282:	9a 81       	ldd	r25, Y+2	; 0x02
 284:	fc 01       	movw	r30, r24
 286:	20 81       	ld	r18, Z
 288:	89 81       	ldd	r24, Y+1	; 0x01
 28a:	9a 81       	ldd	r25, Y+2	; 0x02
 28c:	01 96       	adiw	r24, 0x01	; 1
 28e:	9a 83       	std	Y+2, r25	; 0x02
 290:	89 83       	std	Y+1, r24	; 0x01
 292:	82 2f       	mov	r24, r18
 294:	0e 94 1e 01 	call	0x23c	; 0x23c <transmit>
		delay(2);
 298:	82 e0       	ldi	r24, 0x02	; 2
 29a:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <delay>
	UDR=t;
	while((UCSRA&(1<<UDRE))==0x00);
}
void serialtx(const char*p)
{
	while(*p)
 29e:	89 81       	ldd	r24, Y+1	; 0x01
 2a0:	9a 81       	ldd	r25, Y+2	; 0x02
 2a2:	fc 01       	movw	r30, r24
 2a4:	80 81       	ld	r24, Z
 2a6:	88 23       	and	r24, r24
 2a8:	59 f7       	brne	.-42     	; 0x280 <serialtx+0x10>
	{
		transmit(*p++);
		delay(2);
	}
}
 2aa:	0f 90       	pop	r0
 2ac:	0f 90       	pop	r0
 2ae:	cf 91       	pop	r28
 2b0:	df 91       	pop	r29
 2b2:	08 95       	ret

000002b4 <delay>:
void delay(char x)
{
 2b4:	df 93       	push	r29
 2b6:	cf 93       	push	r28
 2b8:	00 d0       	rcall	.+0      	; 0x2ba <delay+0x6>
 2ba:	00 d0       	rcall	.+0      	; 0x2bc <delay+0x8>
 2bc:	0f 92       	push	r0
 2be:	cd b7       	in	r28, 0x3d	; 61
 2c0:	de b7       	in	r29, 0x3e	; 62
 2c2:	8d 83       	std	Y+5, r24	; 0x05
	int i,j;
	for(i=0;i<=x;i++)
 2c4:	1a 82       	std	Y+2, r1	; 0x02
 2c6:	19 82       	std	Y+1, r1	; 0x01
 2c8:	13 c0       	rjmp	.+38     	; 0x2f0 <delay+0x3c>
	for(j=0;j<=1000;j++);
 2ca:	1c 82       	std	Y+4, r1	; 0x04
 2cc:	1b 82       	std	Y+3, r1	; 0x03
 2ce:	05 c0       	rjmp	.+10     	; 0x2da <delay+0x26>
 2d0:	8b 81       	ldd	r24, Y+3	; 0x03
 2d2:	9c 81       	ldd	r25, Y+4	; 0x04
 2d4:	01 96       	adiw	r24, 0x01	; 1
 2d6:	9c 83       	std	Y+4, r25	; 0x04
 2d8:	8b 83       	std	Y+3, r24	; 0x03
 2da:	8b 81       	ldd	r24, Y+3	; 0x03
 2dc:	9c 81       	ldd	r25, Y+4	; 0x04
 2de:	23 e0       	ldi	r18, 0x03	; 3
 2e0:	89 3e       	cpi	r24, 0xE9	; 233
 2e2:	92 07       	cpc	r25, r18
 2e4:	ac f3       	brlt	.-22     	; 0x2d0 <delay+0x1c>
	}
}
void delay(char x)
{
	int i,j;
	for(i=0;i<=x;i++)
 2e6:	89 81       	ldd	r24, Y+1	; 0x01
 2e8:	9a 81       	ldd	r25, Y+2	; 0x02
 2ea:	01 96       	adiw	r24, 0x01	; 1
 2ec:	9a 83       	std	Y+2, r25	; 0x02
 2ee:	89 83       	std	Y+1, r24	; 0x01
 2f0:	8d 81       	ldd	r24, Y+5	; 0x05
 2f2:	28 2f       	mov	r18, r24
 2f4:	30 e0       	ldi	r19, 0x00	; 0
 2f6:	89 81       	ldd	r24, Y+1	; 0x01
 2f8:	9a 81       	ldd	r25, Y+2	; 0x02
 2fa:	28 17       	cp	r18, r24
 2fc:	39 07       	cpc	r19, r25
 2fe:	2c f7       	brge	.-54     	; 0x2ca <delay+0x16>
	for(j=0;j<=1000;j++);
}
 300:	0f 90       	pop	r0
 302:	0f 90       	pop	r0
 304:	0f 90       	pop	r0
 306:	0f 90       	pop	r0
 308:	0f 90       	pop	r0
 30a:	cf 91       	pop	r28
 30c:	df 91       	pop	r29
 30e:	08 95       	ret

00000310 <command>:
void command(char c)
{
 310:	df 93       	push	r29
 312:	cf 93       	push	r28
 314:	0f 92       	push	r0
 316:	cd b7       	in	r28, 0x3d	; 61
 318:	de b7       	in	r29, 0x3e	; 62
 31a:	89 83       	std	Y+1, r24	; 0x01
	PORTC=c;
 31c:	85 e3       	ldi	r24, 0x35	; 53
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	29 81       	ldd	r18, Y+1	; 0x01
 322:	fc 01       	movw	r30, r24
 324:	20 83       	st	Z, r18
	PORTD&=~(1<<6);
 326:	82 e3       	ldi	r24, 0x32	; 50
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	22 e3       	ldi	r18, 0x32	; 50
 32c:	30 e0       	ldi	r19, 0x00	; 0
 32e:	f9 01       	movw	r30, r18
 330:	20 81       	ld	r18, Z
 332:	2f 7b       	andi	r18, 0xBF	; 191
 334:	fc 01       	movw	r30, r24
 336:	20 83       	st	Z, r18
	PORTD|=(1<<7);
 338:	82 e3       	ldi	r24, 0x32	; 50
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	22 e3       	ldi	r18, 0x32	; 50
 33e:	30 e0       	ldi	r19, 0x00	; 0
 340:	f9 01       	movw	r30, r18
 342:	20 81       	ld	r18, Z
 344:	20 68       	ori	r18, 0x80	; 128
 346:	fc 01       	movw	r30, r24
 348:	20 83       	st	Z, r18
	delay(2);
 34a:	82 e0       	ldi	r24, 0x02	; 2
 34c:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <delay>
	PORTD&=~(1<<7);
 350:	82 e3       	ldi	r24, 0x32	; 50
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	22 e3       	ldi	r18, 0x32	; 50
 356:	30 e0       	ldi	r19, 0x00	; 0
 358:	f9 01       	movw	r30, r18
 35a:	20 81       	ld	r18, Z
 35c:	2f 77       	andi	r18, 0x7F	; 127
 35e:	fc 01       	movw	r30, r24
 360:	20 83       	st	Z, r18
}
 362:	0f 90       	pop	r0
 364:	cf 91       	pop	r28
 366:	df 91       	pop	r29
 368:	08 95       	ret

0000036a <data>:
void data(char d)
{
 36a:	df 93       	push	r29
 36c:	cf 93       	push	r28
 36e:	0f 92       	push	r0
 370:	cd b7       	in	r28, 0x3d	; 61
 372:	de b7       	in	r29, 0x3e	; 62
 374:	89 83       	std	Y+1, r24	; 0x01
	PORTC=d;
 376:	85 e3       	ldi	r24, 0x35	; 53
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	29 81       	ldd	r18, Y+1	; 0x01
 37c:	fc 01       	movw	r30, r24
 37e:	20 83       	st	Z, r18
	PORTD|=(1<<6);
 380:	82 e3       	ldi	r24, 0x32	; 50
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	22 e3       	ldi	r18, 0x32	; 50
 386:	30 e0       	ldi	r19, 0x00	; 0
 388:	f9 01       	movw	r30, r18
 38a:	20 81       	ld	r18, Z
 38c:	20 64       	ori	r18, 0x40	; 64
 38e:	fc 01       	movw	r30, r24
 390:	20 83       	st	Z, r18
	PORTD|=(1<<7);
 392:	82 e3       	ldi	r24, 0x32	; 50
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	22 e3       	ldi	r18, 0x32	; 50
 398:	30 e0       	ldi	r19, 0x00	; 0
 39a:	f9 01       	movw	r30, r18
 39c:	20 81       	ld	r18, Z
 39e:	20 68       	ori	r18, 0x80	; 128
 3a0:	fc 01       	movw	r30, r24
 3a2:	20 83       	st	Z, r18
	delay(2);
 3a4:	82 e0       	ldi	r24, 0x02	; 2
 3a6:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <delay>
	PORTD&=~(1<<7);
 3aa:	82 e3       	ldi	r24, 0x32	; 50
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	22 e3       	ldi	r18, 0x32	; 50
 3b0:	30 e0       	ldi	r19, 0x00	; 0
 3b2:	f9 01       	movw	r30, r18
 3b4:	20 81       	ld	r18, Z
 3b6:	2f 77       	andi	r18, 0x7F	; 127
 3b8:	fc 01       	movw	r30, r24
 3ba:	20 83       	st	Z, r18
}
 3bc:	0f 90       	pop	r0
 3be:	cf 91       	pop	r28
 3c0:	df 91       	pop	r29
 3c2:	08 95       	ret

000003c4 <display>:
void display (const char *s)
{
 3c4:	df 93       	push	r29
 3c6:	cf 93       	push	r28
 3c8:	00 d0       	rcall	.+0      	; 0x3ca <display+0x6>
 3ca:	cd b7       	in	r28, 0x3d	; 61
 3cc:	de b7       	in	r29, 0x3e	; 62
 3ce:	9a 83       	std	Y+2, r25	; 0x02
 3d0:	89 83       	std	Y+1, r24	; 0x01
	while(*s)
 3d2:	0f c0       	rjmp	.+30     	; 0x3f2 <display+0x2e>
	{
		data(*s++);
 3d4:	89 81       	ldd	r24, Y+1	; 0x01
 3d6:	9a 81       	ldd	r25, Y+2	; 0x02
 3d8:	fc 01       	movw	r30, r24
 3da:	20 81       	ld	r18, Z
 3dc:	89 81       	ldd	r24, Y+1	; 0x01
 3de:	9a 81       	ldd	r25, Y+2	; 0x02
 3e0:	01 96       	adiw	r24, 0x01	; 1
 3e2:	9a 83       	std	Y+2, r25	; 0x02
 3e4:	89 83       	std	Y+1, r24	; 0x01
 3e6:	82 2f       	mov	r24, r18
 3e8:	0e 94 b5 01 	call	0x36a	; 0x36a <data>
		delay(2);
 3ec:	82 e0       	ldi	r24, 0x02	; 2
 3ee:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <delay>
	delay(2);
	PORTD&=~(1<<7);
}
void display (const char *s)
{
	while(*s)
 3f2:	89 81       	ldd	r24, Y+1	; 0x01
 3f4:	9a 81       	ldd	r25, Y+2	; 0x02
 3f6:	fc 01       	movw	r30, r24
 3f8:	80 81       	ld	r24, Z
 3fa:	88 23       	and	r24, r24
 3fc:	59 f7       	brne	.-42     	; 0x3d4 <display+0x10>
	{
		data(*s++);
		delay(2);
	}
}	
 3fe:	0f 90       	pop	r0
 400:	0f 90       	pop	r0
 402:	cf 91       	pop	r28
 404:	df 91       	pop	r29
 406:	08 95       	ret

00000408 <_exit>:
 408:	f8 94       	cli

0000040a <__stop_program>:
 40a:	ff cf       	rjmp	.-2      	; 0x40a <__stop_program>
