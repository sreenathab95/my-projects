
abcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000037c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000001  00800060  00800060  000003f0  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  000003f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000abc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000020  00000000  00000000  00000b41  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000073  00000000  00000000  00000b61  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000020c  00000000  00000000  00000bd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000e0  00000000  00000000  00000de0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000308  00000000  00000000  00000ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000090  00000000  00000000  000011c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000000ab  00000000  00000000  00001258  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubtypes 0000001e  00000000  00000000  00001303  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 bc 01 	jmp	0x378	; 0x378 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
void display(const char *s);
void delay(char x);
void serialtx(const char*p);
char a1;
int main(void)
{
  7c:	0f 93       	push	r16
  7e:	1f 93       	push	r17
  80:	df 93       	push	r29
  82:	cf 93       	push	r28
  84:	cd b7       	in	r28, 0x3d	; 61
  86:	de b7       	in	r29, 0x3e	; 62
  88:	e5 97       	sbiw	r28, 0x35	; 53
  8a:	0f b6       	in	r0, 0x3f	; 63
  8c:	f8 94       	cli
  8e:	de bf       	out	0x3e, r29	; 62
  90:	0f be       	out	0x3f, r0	; 63
  92:	cd bf       	out	0x3d, r28	; 61
	DDRC=0XFF;
  94:	84 e3       	ldi	r24, 0x34	; 52
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	2f ef       	ldi	r18, 0xFF	; 255
  9a:	fc 01       	movw	r30, r24
  9c:	20 83       	st	Z, r18
	DDRD=0XFF;
  9e:	81 e3       	ldi	r24, 0x31	; 49
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	2f ef       	ldi	r18, 0xFF	; 255
  a4:	fc 01       	movw	r30, r24
  a6:	20 83       	st	Z, r18
	command(0x38);
  a8:	88 e3       	ldi	r24, 0x38	; 56
  aa:	0e 94 40 01 	call	0x280	; 0x280 <command>
	command(0x06);
  ae:	86 e0       	ldi	r24, 0x06	; 6
  b0:	0e 94 40 01 	call	0x280	; 0x280 <command>
	command(0x0C);
  b4:	8c e0       	ldi	r24, 0x0C	; 12
  b6:	0e 94 40 01 	call	0x280	; 0x280 <command>
	command(0x80);
  ba:	80 e8       	ldi	r24, 0x80	; 128
  bc:	0e 94 40 01 	call	0x280	; 0x280 <command>
	command(0x01);
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	0e 94 40 01 	call	0x280	; 0x280 <command>
	char a,b,c[50],c1;
	UCSRA=0x00;
  c6:	8b e2       	ldi	r24, 0x2B	; 43
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	fc 01       	movw	r30, r24
  cc:	10 82       	st	Z, r1
	UCSRB=0x18;
  ce:	8a e2       	ldi	r24, 0x2A	; 42
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	28 e1       	ldi	r18, 0x18	; 24
  d4:	fc 01       	movw	r30, r24
  d6:	20 83       	st	Z, r18
	UCSRC=0x06;
  d8:	80 e4       	ldi	r24, 0x40	; 64
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	26 e0       	ldi	r18, 0x06	; 6
  de:	fc 01       	movw	r30, r24
  e0:	20 83       	st	Z, r18
	UBRRL=0x19;
  e2:	89 e2       	ldi	r24, 0x29	; 41
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	29 e1       	ldi	r18, 0x19	; 25
  e8:	fc 01       	movw	r30, r24
  ea:	20 83       	st	Z, r18
	UBRRH=0x00;
  ec:	80 e4       	ldi	r24, 0x40	; 64
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	fc 01       	movw	r30, r24
  f2:	10 82       	st	Z, r1
  f4:	03 c0       	rjmp	.+6      	; 0xfc <main+0x80>
					}
				}
			}
		}
		
    }
  f6:	00 00       	nop
  f8:	01 c0       	rjmp	.+2      	; 0xfc <main+0x80>
  fa:	00 00       	nop
	UCSRC=0x06;
	UBRRL=0x19;
	UBRRH=0x00;
    while(1)
    {
        a=receive();
  fc:	0e 94 bb 00 	call	0x176	; 0x176 <receive>
 100:	89 83       	std	Y+1, r24	; 0x01
		if (a=='a')
 102:	89 81       	ldd	r24, Y+1	; 0x01
 104:	81 36       	cpi	r24, 0x61	; 97
 106:	b9 f7       	brne	.-18     	; 0xf6 <main+0x7a>
		{
			a1=receive();
 108:	0e 94 bb 00 	call	0x176	; 0x176 <receive>
 10c:	80 93 60 00 	sts	0x0060, r24
			if (a1=='b')
 110:	80 91 60 00 	lds	r24, 0x0060
 114:	82 36       	cpi	r24, 0x62	; 98
 116:	89 f7       	brne	.-30     	; 0xfa <main+0x7e>
 118:	01 c0       	rjmp	.+2      	; 0x11c <main+0xa0>
							c[b]='\0';
							display(c);
							break;
						}
					}
				}
 11a:	00 00       	nop
			a1=receive();
			if (a1=='b')
			{
				while (1)
				{
					c[b]=receive();
 11c:	8a 81       	ldd	r24, Y+2	; 0x02
 11e:	08 2f       	mov	r16, r24
 120:	10 e0       	ldi	r17, 0x00	; 0
 122:	0e 94 bb 00 	call	0x176	; 0x176 <receive>
 126:	28 2f       	mov	r18, r24
 128:	ce 01       	movw	r24, r28
 12a:	04 96       	adiw	r24, 0x04	; 4
 12c:	80 0f       	add	r24, r16
 12e:	91 1f       	adc	r25, r17
 130:	fc 01       	movw	r30, r24
 132:	20 83       	st	Z, r18
					if (c[b]='c')
 134:	8a 81       	ldd	r24, Y+2	; 0x02
 136:	88 2f       	mov	r24, r24
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	9e 01       	movw	r18, r28
 13c:	2c 5f       	subi	r18, 0xFC	; 252
 13e:	3f 4f       	sbci	r19, 0xFF	; 255
 140:	82 0f       	add	r24, r18
 142:	93 1f       	adc	r25, r19
 144:	23 e6       	ldi	r18, 0x63	; 99
 146:	fc 01       	movw	r30, r24
 148:	20 83       	st	Z, r18
					{
						c1=receive();
 14a:	0e 94 bb 00 	call	0x176	; 0x176 <receive>
 14e:	8b 83       	std	Y+3, r24	; 0x03
						if (c1=='d')
 150:	8b 81       	ldd	r24, Y+3	; 0x03
 152:	84 36       	cpi	r24, 0x64	; 100
 154:	11 f7       	brne	.-60     	; 0x11a <main+0x9e>
						{
							c[b]='\0';
 156:	8a 81       	ldd	r24, Y+2	; 0x02
 158:	88 2f       	mov	r24, r24
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	9e 01       	movw	r18, r28
 15e:	2c 5f       	subi	r18, 0xFC	; 252
 160:	3f 4f       	sbci	r19, 0xFF	; 255
 162:	82 0f       	add	r24, r18
 164:	93 1f       	adc	r25, r19
 166:	fc 01       	movw	r30, r24
 168:	10 82       	st	Z, r1
							display(c);
 16a:	ce 01       	movw	r24, r28
 16c:	04 96       	adiw	r24, 0x04	; 4
 16e:	0e 94 9a 01 	call	0x334	; 0x334 <display>
							break;
 172:	00 00       	nop
					}
				}
			}
		}
		
    }
 174:	c3 cf       	rjmp	.-122    	; 0xfc <main+0x80>

00000176 <receive>:
}
char receive()
{
 176:	df 93       	push	r29
 178:	cf 93       	push	r28
 17a:	cd b7       	in	r28, 0x3d	; 61
 17c:	de b7       	in	r29, 0x3e	; 62
	UCSRA&=~(1<<RXC);
 17e:	8b e2       	ldi	r24, 0x2B	; 43
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	2b e2       	ldi	r18, 0x2B	; 43
 184:	30 e0       	ldi	r19, 0x00	; 0
 186:	f9 01       	movw	r30, r18
 188:	20 81       	ld	r18, Z
 18a:	2f 77       	andi	r18, 0x7F	; 127
 18c:	fc 01       	movw	r30, r24
 18e:	20 83       	st	Z, r18
	while((UCSRA&(1<<RXC))==0);
 190:	00 00       	nop
 192:	8b e2       	ldi	r24, 0x2B	; 43
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	fc 01       	movw	r30, r24
 198:	80 81       	ld	r24, Z
 19a:	88 23       	and	r24, r24
 19c:	d4 f7       	brge	.-12     	; 0x192 <receive+0x1c>
	return(UDR);
 19e:	8c e2       	ldi	r24, 0x2C	; 44
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	fc 01       	movw	r30, r24
 1a4:	80 81       	ld	r24, Z
}
 1a6:	cf 91       	pop	r28
 1a8:	df 91       	pop	r29
 1aa:	08 95       	ret

000001ac <transmit>:
void transmit(char t)
{
 1ac:	df 93       	push	r29
 1ae:	cf 93       	push	r28
 1b0:	0f 92       	push	r0
 1b2:	cd b7       	in	r28, 0x3d	; 61
 1b4:	de b7       	in	r29, 0x3e	; 62
 1b6:	89 83       	std	Y+1, r24	; 0x01
	UDR=t;
 1b8:	8c e2       	ldi	r24, 0x2C	; 44
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	29 81       	ldd	r18, Y+1	; 0x01
 1be:	fc 01       	movw	r30, r24
 1c0:	20 83       	st	Z, r18
	while((UCSRA&(1<<UDRE))==0x00);
 1c2:	00 00       	nop
 1c4:	8b e2       	ldi	r24, 0x2B	; 43
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	fc 01       	movw	r30, r24
 1ca:	80 81       	ld	r24, Z
 1cc:	88 2f       	mov	r24, r24
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	80 72       	andi	r24, 0x20	; 32
 1d2:	90 70       	andi	r25, 0x00	; 0
 1d4:	00 97       	sbiw	r24, 0x00	; 0
 1d6:	b1 f3       	breq	.-20     	; 0x1c4 <transmit+0x18>
}
 1d8:	0f 90       	pop	r0
 1da:	cf 91       	pop	r28
 1dc:	df 91       	pop	r29
 1de:	08 95       	ret

000001e0 <serialtx>:
void serialtx(const char*p)
{
 1e0:	df 93       	push	r29
 1e2:	cf 93       	push	r28
 1e4:	00 d0       	rcall	.+0      	; 0x1e6 <serialtx+0x6>
 1e6:	cd b7       	in	r28, 0x3d	; 61
 1e8:	de b7       	in	r29, 0x3e	; 62
 1ea:	9a 83       	std	Y+2, r25	; 0x02
 1ec:	89 83       	std	Y+1, r24	; 0x01
	while(*p)
 1ee:	0f c0       	rjmp	.+30     	; 0x20e <serialtx+0x2e>
	{
		transmit(*p++);
 1f0:	89 81       	ldd	r24, Y+1	; 0x01
 1f2:	9a 81       	ldd	r25, Y+2	; 0x02
 1f4:	fc 01       	movw	r30, r24
 1f6:	20 81       	ld	r18, Z
 1f8:	89 81       	ldd	r24, Y+1	; 0x01
 1fa:	9a 81       	ldd	r25, Y+2	; 0x02
 1fc:	01 96       	adiw	r24, 0x01	; 1
 1fe:	9a 83       	std	Y+2, r25	; 0x02
 200:	89 83       	std	Y+1, r24	; 0x01
 202:	82 2f       	mov	r24, r18
 204:	0e 94 d6 00 	call	0x1ac	; 0x1ac <transmit>
		delay(2);
 208:	82 e0       	ldi	r24, 0x02	; 2
 20a:	0e 94 12 01 	call	0x224	; 0x224 <delay>
	UDR=t;
	while((UCSRA&(1<<UDRE))==0x00);
}
void serialtx(const char*p)
{
	while(*p)
 20e:	89 81       	ldd	r24, Y+1	; 0x01
 210:	9a 81       	ldd	r25, Y+2	; 0x02
 212:	fc 01       	movw	r30, r24
 214:	80 81       	ld	r24, Z
 216:	88 23       	and	r24, r24
 218:	59 f7       	brne	.-42     	; 0x1f0 <serialtx+0x10>
	{
		transmit(*p++);
		delay(2);
	}
}
 21a:	0f 90       	pop	r0
 21c:	0f 90       	pop	r0
 21e:	cf 91       	pop	r28
 220:	df 91       	pop	r29
 222:	08 95       	ret

00000224 <delay>:
void delay(char x)
{
 224:	df 93       	push	r29
 226:	cf 93       	push	r28
 228:	00 d0       	rcall	.+0      	; 0x22a <delay+0x6>
 22a:	00 d0       	rcall	.+0      	; 0x22c <delay+0x8>
 22c:	0f 92       	push	r0
 22e:	cd b7       	in	r28, 0x3d	; 61
 230:	de b7       	in	r29, 0x3e	; 62
 232:	8d 83       	std	Y+5, r24	; 0x05
	int i,j;
	for(i=0;i<=x;i++)
 234:	1a 82       	std	Y+2, r1	; 0x02
 236:	19 82       	std	Y+1, r1	; 0x01
 238:	13 c0       	rjmp	.+38     	; 0x260 <delay+0x3c>
	for(j=0;j<=1000;j++);
 23a:	1c 82       	std	Y+4, r1	; 0x04
 23c:	1b 82       	std	Y+3, r1	; 0x03
 23e:	05 c0       	rjmp	.+10     	; 0x24a <delay+0x26>
 240:	8b 81       	ldd	r24, Y+3	; 0x03
 242:	9c 81       	ldd	r25, Y+4	; 0x04
 244:	01 96       	adiw	r24, 0x01	; 1
 246:	9c 83       	std	Y+4, r25	; 0x04
 248:	8b 83       	std	Y+3, r24	; 0x03
 24a:	8b 81       	ldd	r24, Y+3	; 0x03
 24c:	9c 81       	ldd	r25, Y+4	; 0x04
 24e:	23 e0       	ldi	r18, 0x03	; 3
 250:	89 3e       	cpi	r24, 0xE9	; 233
 252:	92 07       	cpc	r25, r18
 254:	ac f3       	brlt	.-22     	; 0x240 <delay+0x1c>
	}
}
void delay(char x)
{
	int i,j;
	for(i=0;i<=x;i++)
 256:	89 81       	ldd	r24, Y+1	; 0x01
 258:	9a 81       	ldd	r25, Y+2	; 0x02
 25a:	01 96       	adiw	r24, 0x01	; 1
 25c:	9a 83       	std	Y+2, r25	; 0x02
 25e:	89 83       	std	Y+1, r24	; 0x01
 260:	8d 81       	ldd	r24, Y+5	; 0x05
 262:	28 2f       	mov	r18, r24
 264:	30 e0       	ldi	r19, 0x00	; 0
 266:	89 81       	ldd	r24, Y+1	; 0x01
 268:	9a 81       	ldd	r25, Y+2	; 0x02
 26a:	28 17       	cp	r18, r24
 26c:	39 07       	cpc	r19, r25
 26e:	2c f7       	brge	.-54     	; 0x23a <delay+0x16>
	for(j=0;j<=1000;j++);
}
 270:	0f 90       	pop	r0
 272:	0f 90       	pop	r0
 274:	0f 90       	pop	r0
 276:	0f 90       	pop	r0
 278:	0f 90       	pop	r0
 27a:	cf 91       	pop	r28
 27c:	df 91       	pop	r29
 27e:	08 95       	ret

00000280 <command>:
void command(char c)
{
 280:	df 93       	push	r29
 282:	cf 93       	push	r28
 284:	0f 92       	push	r0
 286:	cd b7       	in	r28, 0x3d	; 61
 288:	de b7       	in	r29, 0x3e	; 62
 28a:	89 83       	std	Y+1, r24	; 0x01
	PORTC=c;
 28c:	85 e3       	ldi	r24, 0x35	; 53
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	29 81       	ldd	r18, Y+1	; 0x01
 292:	fc 01       	movw	r30, r24
 294:	20 83       	st	Z, r18
	PORTD&=~(1<<6);
 296:	82 e3       	ldi	r24, 0x32	; 50
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	22 e3       	ldi	r18, 0x32	; 50
 29c:	30 e0       	ldi	r19, 0x00	; 0
 29e:	f9 01       	movw	r30, r18
 2a0:	20 81       	ld	r18, Z
 2a2:	2f 7b       	andi	r18, 0xBF	; 191
 2a4:	fc 01       	movw	r30, r24
 2a6:	20 83       	st	Z, r18
	PORTD|=(1<<7);
 2a8:	82 e3       	ldi	r24, 0x32	; 50
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	22 e3       	ldi	r18, 0x32	; 50
 2ae:	30 e0       	ldi	r19, 0x00	; 0
 2b0:	f9 01       	movw	r30, r18
 2b2:	20 81       	ld	r18, Z
 2b4:	20 68       	ori	r18, 0x80	; 128
 2b6:	fc 01       	movw	r30, r24
 2b8:	20 83       	st	Z, r18
	delay(2);
 2ba:	82 e0       	ldi	r24, 0x02	; 2
 2bc:	0e 94 12 01 	call	0x224	; 0x224 <delay>
	PORTD&=~(1<<7);
 2c0:	82 e3       	ldi	r24, 0x32	; 50
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	22 e3       	ldi	r18, 0x32	; 50
 2c6:	30 e0       	ldi	r19, 0x00	; 0
 2c8:	f9 01       	movw	r30, r18
 2ca:	20 81       	ld	r18, Z
 2cc:	2f 77       	andi	r18, 0x7F	; 127
 2ce:	fc 01       	movw	r30, r24
 2d0:	20 83       	st	Z, r18
}
 2d2:	0f 90       	pop	r0
 2d4:	cf 91       	pop	r28
 2d6:	df 91       	pop	r29
 2d8:	08 95       	ret

000002da <data>:
void data(char d)
{
 2da:	df 93       	push	r29
 2dc:	cf 93       	push	r28
 2de:	0f 92       	push	r0
 2e0:	cd b7       	in	r28, 0x3d	; 61
 2e2:	de b7       	in	r29, 0x3e	; 62
 2e4:	89 83       	std	Y+1, r24	; 0x01
	PORTC=d;
 2e6:	85 e3       	ldi	r24, 0x35	; 53
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	29 81       	ldd	r18, Y+1	; 0x01
 2ec:	fc 01       	movw	r30, r24
 2ee:	20 83       	st	Z, r18
	PORTD|=(1<<6);
 2f0:	82 e3       	ldi	r24, 0x32	; 50
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	22 e3       	ldi	r18, 0x32	; 50
 2f6:	30 e0       	ldi	r19, 0x00	; 0
 2f8:	f9 01       	movw	r30, r18
 2fa:	20 81       	ld	r18, Z
 2fc:	20 64       	ori	r18, 0x40	; 64
 2fe:	fc 01       	movw	r30, r24
 300:	20 83       	st	Z, r18
	PORTD|=(1<<7);
 302:	82 e3       	ldi	r24, 0x32	; 50
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	22 e3       	ldi	r18, 0x32	; 50
 308:	30 e0       	ldi	r19, 0x00	; 0
 30a:	f9 01       	movw	r30, r18
 30c:	20 81       	ld	r18, Z
 30e:	20 68       	ori	r18, 0x80	; 128
 310:	fc 01       	movw	r30, r24
 312:	20 83       	st	Z, r18
	delay(2);
 314:	82 e0       	ldi	r24, 0x02	; 2
 316:	0e 94 12 01 	call	0x224	; 0x224 <delay>
	PORTD&=~(1<<7);
 31a:	82 e3       	ldi	r24, 0x32	; 50
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	22 e3       	ldi	r18, 0x32	; 50
 320:	30 e0       	ldi	r19, 0x00	; 0
 322:	f9 01       	movw	r30, r18
 324:	20 81       	ld	r18, Z
 326:	2f 77       	andi	r18, 0x7F	; 127
 328:	fc 01       	movw	r30, r24
 32a:	20 83       	st	Z, r18
}
 32c:	0f 90       	pop	r0
 32e:	cf 91       	pop	r28
 330:	df 91       	pop	r29
 332:	08 95       	ret

00000334 <display>:
void display (const char *s)
{
 334:	df 93       	push	r29
 336:	cf 93       	push	r28
 338:	00 d0       	rcall	.+0      	; 0x33a <display+0x6>
 33a:	cd b7       	in	r28, 0x3d	; 61
 33c:	de b7       	in	r29, 0x3e	; 62
 33e:	9a 83       	std	Y+2, r25	; 0x02
 340:	89 83       	std	Y+1, r24	; 0x01
	while(*s)
 342:	0f c0       	rjmp	.+30     	; 0x362 <display+0x2e>
	{
		data(*s++);
 344:	89 81       	ldd	r24, Y+1	; 0x01
 346:	9a 81       	ldd	r25, Y+2	; 0x02
 348:	fc 01       	movw	r30, r24
 34a:	20 81       	ld	r18, Z
 34c:	89 81       	ldd	r24, Y+1	; 0x01
 34e:	9a 81       	ldd	r25, Y+2	; 0x02
 350:	01 96       	adiw	r24, 0x01	; 1
 352:	9a 83       	std	Y+2, r25	; 0x02
 354:	89 83       	std	Y+1, r24	; 0x01
 356:	82 2f       	mov	r24, r18
 358:	0e 94 6d 01 	call	0x2da	; 0x2da <data>
		delay(2);
 35c:	82 e0       	ldi	r24, 0x02	; 2
 35e:	0e 94 12 01 	call	0x224	; 0x224 <delay>
	delay(2);
	PORTD&=~(1<<7);
}
void display (const char *s)
{
	while(*s)
 362:	89 81       	ldd	r24, Y+1	; 0x01
 364:	9a 81       	ldd	r25, Y+2	; 0x02
 366:	fc 01       	movw	r30, r24
 368:	80 81       	ld	r24, Z
 36a:	88 23       	and	r24, r24
 36c:	59 f7       	brne	.-42     	; 0x344 <display+0x10>
	{
		data(*s++);
		delay(2);
	}
 36e:	0f 90       	pop	r0
 370:	0f 90       	pop	r0
 372:	cf 91       	pop	r28
 374:	df 91       	pop	r29
 376:	08 95       	ret

00000378 <_exit>:
 378:	f8 94       	cli

0000037a <__stop_program>:
 37a:	ff cf       	rjmp	.-2      	; 0x37a <__stop_program>
