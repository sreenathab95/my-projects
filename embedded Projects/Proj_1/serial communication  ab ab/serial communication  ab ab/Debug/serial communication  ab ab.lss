
serial communication  ab ab.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003b8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  0000040c  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000085  00000000  00000000  00000ad8  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000020  00000000  00000000  00000b5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000006c  00000000  00000000  00000b7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000021c  00000000  00000000  00000be9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000e7  00000000  00000000  00000e05  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000368  00000000  00000000  00000eec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000090  00000000  00000000  00001254  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000f0  00000000  00000000  000012e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubtypes 0000001e  00000000  00000000  000013d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000013f2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
void data(char d);
void display(const char *s);
void delay(char x);
void serialtx(const char*p);
int main(void)
{
  6c:	0f 93       	push	r16
  6e:	1f 93       	push	r17
  70:	df 93       	push	r29
  72:	cf 93       	push	r28
  74:	cd b7       	in	r28, 0x3d	; 61
  76:	de b7       	in	r29, 0x3e	; 62
  78:	e6 97       	sbiw	r28, 0x36	; 54
  7a:	0f b6       	in	r0, 0x3f	; 63
  7c:	f8 94       	cli
  7e:	de bf       	out	0x3e, r29	; 62
  80:	0f be       	out	0x3f, r0	; 63
  82:	cd bf       	out	0x3d, r28	; 61
	DDRC=0XFF;
  84:	84 e3       	ldi	r24, 0x34	; 52
  86:	90 e0       	ldi	r25, 0x00	; 0
  88:	2f ef       	ldi	r18, 0xFF	; 255
  8a:	fc 01       	movw	r30, r24
  8c:	20 83       	st	Z, r18
	DDRD=0XFF;
  8e:	81 e3       	ldi	r24, 0x31	; 49
  90:	90 e0       	ldi	r25, 0x00	; 0
  92:	2f ef       	ldi	r18, 0xFF	; 255
  94:	fc 01       	movw	r30, r24
  96:	20 83       	st	Z, r18
	command(0x38);
  98:	88 e3       	ldi	r24, 0x38	; 56
  9a:	0e 94 5e 01 	call	0x2bc	; 0x2bc <command>
	command(0x06);
  9e:	86 e0       	ldi	r24, 0x06	; 6
  a0:	0e 94 5e 01 	call	0x2bc	; 0x2bc <command>
	command(0x0C);
  a4:	8c e0       	ldi	r24, 0x0C	; 12
  a6:	0e 94 5e 01 	call	0x2bc	; 0x2bc <command>
	command(0x80);
  aa:	80 e8       	ldi	r24, 0x80	; 128
  ac:	0e 94 5e 01 	call	0x2bc	; 0x2bc <command>
	command(0x01);
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	0e 94 5e 01 	call	0x2bc	; 0x2bc <command>
	char a,b,c[50],c1;
	UCSRA=0x00;
  b6:	8b e2       	ldi	r24, 0x2B	; 43
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	fc 01       	movw	r30, r24
  bc:	10 82       	st	Z, r1
	UCSRB=0x18;
  be:	8a e2       	ldi	r24, 0x2A	; 42
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	28 e1       	ldi	r18, 0x18	; 24
  c4:	fc 01       	movw	r30, r24
  c6:	20 83       	st	Z, r18
	UCSRC=0x06;
  c8:	80 e4       	ldi	r24, 0x40	; 64
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	26 e0       	ldi	r18, 0x06	; 6
  ce:	fc 01       	movw	r30, r24
  d0:	20 83       	st	Z, r18
	UBRRL=0x19;
  d2:	89 e2       	ldi	r24, 0x29	; 41
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	29 e1       	ldi	r18, 0x19	; 25
  d8:	fc 01       	movw	r30, r24
  da:	20 83       	st	Z, r18
	UBRRH=0x00;
  dc:	80 e4       	ldi	r24, 0x40	; 64
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	fc 01       	movw	r30, r24
  e2:	10 82       	st	Z, r1
  e4:	03 c0       	rjmp	.+6      	; 0xec <main+0x80>
					 				
					}
				}						
			else
			{
			  goto s2;
  e6:	00 00       	nop
  e8:	01 c0       	rjmp	.+2      	; 0xec <main+0x80>
			}	
	}	
  ea:	00 00       	nop
	UBRRL=0x19;
	UBRRH=0x00;

    while(1)
    {
		s2: a=receive();
  ec:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <receive>
  f0:	8a 83       	std	Y+2, r24	; 0x02
		if (a=='a')
  f2:	8a 81       	ldd	r24, Y+2	; 0x02
  f4:	81 36       	cpi	r24, 0x61	; 97
  f6:	b9 f7       	brne	.-18     	; 0xe6 <main+0x7a>
		{
			char a1=receive();
  f8:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <receive>
  fc:	8b 83       	std	Y+3, r24	; 0x03
			if (a1=='b')
  fe:	8b 81       	ldd	r24, Y+3	; 0x03
 100:	82 36       	cpi	r24, 0x62	; 98
 102:	99 f7       	brne	.-26     	; 0xea <main+0x7e>
			{
				while(1)
				{
	
					s1: c[b]=receive();
 104:	89 81       	ldd	r24, Y+1	; 0x01
 106:	08 2f       	mov	r16, r24
 108:	10 e0       	ldi	r17, 0x00	; 0
 10a:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <receive>
 10e:	28 2f       	mov	r18, r24
 110:	ce 01       	movw	r24, r28
 112:	05 96       	adiw	r24, 0x05	; 5
 114:	80 0f       	add	r24, r16
 116:	91 1f       	adc	r25, r17
 118:	fc 01       	movw	r30, r24
 11a:	20 83       	st	Z, r18
							 //b++;
							 //goto s1;
						 //}	 
						 //
					//}
					if (c[b]=='a')
 11c:	89 81       	ldd	r24, Y+1	; 0x01
 11e:	88 2f       	mov	r24, r24
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	9e 01       	movw	r18, r28
 124:	2b 5f       	subi	r18, 0xFB	; 251
 126:	3f 4f       	sbci	r19, 0xFF	; 255
 128:	82 0f       	add	r24, r18
 12a:	93 1f       	adc	r25, r19
 12c:	fc 01       	movw	r30, r24
 12e:	80 81       	ld	r24, Z
 130:	81 36       	cpi	r24, 0x61	; 97
 132:	d9 f5       	brne	.+118    	; 0x1aa <main+0x13e>
						{
							s3: c1=receive();
 134:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <receive>
 138:	8c 83       	std	Y+4, r24	; 0x04
							if(c1=='b')
 13a:	8c 81       	ldd	r24, Y+4	; 0x04
 13c:	82 36       	cpi	r24, 0x62	; 98
 13e:	99 f4       	brne	.+38     	; 0x166 <main+0xfa>
							{
								
							c[b]='\0';
 140:	89 81       	ldd	r24, Y+1	; 0x01
 142:	88 2f       	mov	r24, r24
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	9e 01       	movw	r18, r28
 148:	2b 5f       	subi	r18, 0xFB	; 251
 14a:	3f 4f       	sbci	r19, 0xFF	; 255
 14c:	82 0f       	add	r24, r18
 14e:	93 1f       	adc	r25, r19
 150:	fc 01       	movw	r30, r24
 152:	10 82       	st	Z, r1
							command(0x80);
 154:	80 e8       	ldi	r24, 0x80	; 128
 156:	0e 94 5e 01 	call	0x2bc	; 0x2bc <command>
							display(c);
 15a:	ce 01       	movw	r24, r28
 15c:	05 96       	adiw	r24, 0x05	; 5
 15e:	0e 94 b8 01 	call	0x370	; 0x370 <display>
							break;
 162:	00 00       	nop
				}						
			else
			{
			  goto s2;
			}	
	}	
 164:	c3 cf       	rjmp	.-122    	; 0xec <main+0x80>
							c[b]='\0';
							command(0x80);
							display(c);
							break;
							}
							else if(c1=='a')
 166:	8c 81       	ldd	r24, Y+4	; 0x04
 168:	81 36       	cpi	r24, 0x61	; 97
 16a:	f9 f4       	brne	.+62     	; 0x1aa <main+0x13e>
							{
								b++;
 16c:	89 81       	ldd	r24, Y+1	; 0x01
 16e:	8f 5f       	subi	r24, 0xFF	; 255
 170:	89 83       	std	Y+1, r24	; 0x01
								c[b]=c1;
 172:	89 81       	ldd	r24, Y+1	; 0x01
 174:	88 2f       	mov	r24, r24
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	9e 01       	movw	r18, r28
 17a:	2b 5f       	subi	r18, 0xFB	; 251
 17c:	3f 4f       	sbci	r19, 0xFF	; 255
 17e:	82 0f       	add	r24, r18
 180:	93 1f       	adc	r25, r19
 182:	2c 81       	ldd	r18, Y+4	; 0x04
 184:	fc 01       	movw	r30, r24
 186:	20 83       	st	Z, r18
								command(0xc0);
 188:	80 ec       	ldi	r24, 0xC0	; 192
 18a:	0e 94 5e 01 	call	0x2bc	; 0x2bc <command>
								data(c[b]+0x30);
 18e:	89 81       	ldd	r24, Y+1	; 0x01
 190:	88 2f       	mov	r24, r24
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	9e 01       	movw	r18, r28
 196:	2b 5f       	subi	r18, 0xFB	; 251
 198:	3f 4f       	sbci	r19, 0xFF	; 255
 19a:	82 0f       	add	r24, r18
 19c:	93 1f       	adc	r25, r19
 19e:	fc 01       	movw	r30, r24
 1a0:	80 81       	ld	r24, Z
 1a2:	80 5d       	subi	r24, 0xD0	; 208
 1a4:	0e 94 8b 01 	call	0x316	; 0x316 <data>
								goto s3;
 1a8:	c5 cf       	rjmp	.-118    	; 0x134 <main+0xc8>
								//b++;
								//c[b]=c1;	
							//}								
						}
						
						b++;
 1aa:	89 81       	ldd	r24, Y+1	; 0x01
 1ac:	8f 5f       	subi	r24, 0xFF	; 255
 1ae:	89 83       	std	Y+1, r24	; 0x01
						goto s1;	
 1b0:	a9 cf       	rjmp	.-174    	; 0x104 <main+0x98>

000001b2 <receive>:
			  goto s2;
			}	
	}	
}
char receive()
{
 1b2:	df 93       	push	r29
 1b4:	cf 93       	push	r28
 1b6:	cd b7       	in	r28, 0x3d	; 61
 1b8:	de b7       	in	r29, 0x3e	; 62
	UCSRA&=~(1<<RXC);
 1ba:	8b e2       	ldi	r24, 0x2B	; 43
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	2b e2       	ldi	r18, 0x2B	; 43
 1c0:	30 e0       	ldi	r19, 0x00	; 0
 1c2:	f9 01       	movw	r30, r18
 1c4:	20 81       	ld	r18, Z
 1c6:	2f 77       	andi	r18, 0x7F	; 127
 1c8:	fc 01       	movw	r30, r24
 1ca:	20 83       	st	Z, r18
	while((UCSRA&(1<<RXC))==0);
 1cc:	00 00       	nop
 1ce:	8b e2       	ldi	r24, 0x2B	; 43
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	fc 01       	movw	r30, r24
 1d4:	80 81       	ld	r24, Z
 1d6:	88 23       	and	r24, r24
 1d8:	d4 f7       	brge	.-12     	; 0x1ce <receive+0x1c>
	return(UDR);
 1da:	8c e2       	ldi	r24, 0x2C	; 44
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	fc 01       	movw	r30, r24
 1e0:	80 81       	ld	r24, Z
}
 1e2:	cf 91       	pop	r28
 1e4:	df 91       	pop	r29
 1e6:	08 95       	ret

000001e8 <transmit>:
void transmit(char t)
{
 1e8:	df 93       	push	r29
 1ea:	cf 93       	push	r28
 1ec:	0f 92       	push	r0
 1ee:	cd b7       	in	r28, 0x3d	; 61
 1f0:	de b7       	in	r29, 0x3e	; 62
 1f2:	89 83       	std	Y+1, r24	; 0x01
	UDR=t;
 1f4:	8c e2       	ldi	r24, 0x2C	; 44
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	29 81       	ldd	r18, Y+1	; 0x01
 1fa:	fc 01       	movw	r30, r24
 1fc:	20 83       	st	Z, r18
	while((UCSRA&(1<<UDRE))==0x00);
 1fe:	00 00       	nop
 200:	8b e2       	ldi	r24, 0x2B	; 43
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	fc 01       	movw	r30, r24
 206:	80 81       	ld	r24, Z
 208:	88 2f       	mov	r24, r24
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	80 72       	andi	r24, 0x20	; 32
 20e:	90 70       	andi	r25, 0x00	; 0
 210:	00 97       	sbiw	r24, 0x00	; 0
 212:	b1 f3       	breq	.-20     	; 0x200 <transmit+0x18>
}
 214:	0f 90       	pop	r0
 216:	cf 91       	pop	r28
 218:	df 91       	pop	r29
 21a:	08 95       	ret

0000021c <serialtx>:
void serialtx(const char*p)
{
 21c:	df 93       	push	r29
 21e:	cf 93       	push	r28
 220:	00 d0       	rcall	.+0      	; 0x222 <serialtx+0x6>
 222:	cd b7       	in	r28, 0x3d	; 61
 224:	de b7       	in	r29, 0x3e	; 62
 226:	9a 83       	std	Y+2, r25	; 0x02
 228:	89 83       	std	Y+1, r24	; 0x01
	while(*p)
 22a:	0f c0       	rjmp	.+30     	; 0x24a <serialtx+0x2e>
	{
		transmit(*p++);
 22c:	89 81       	ldd	r24, Y+1	; 0x01
 22e:	9a 81       	ldd	r25, Y+2	; 0x02
 230:	fc 01       	movw	r30, r24
 232:	20 81       	ld	r18, Z
 234:	89 81       	ldd	r24, Y+1	; 0x01
 236:	9a 81       	ldd	r25, Y+2	; 0x02
 238:	01 96       	adiw	r24, 0x01	; 1
 23a:	9a 83       	std	Y+2, r25	; 0x02
 23c:	89 83       	std	Y+1, r24	; 0x01
 23e:	82 2f       	mov	r24, r18
 240:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <transmit>
		delay(2);
 244:	82 e0       	ldi	r24, 0x02	; 2
 246:	0e 94 30 01 	call	0x260	; 0x260 <delay>
	UDR=t;
	while((UCSRA&(1<<UDRE))==0x00);
}
void serialtx(const char*p)
{
	while(*p)
 24a:	89 81       	ldd	r24, Y+1	; 0x01
 24c:	9a 81       	ldd	r25, Y+2	; 0x02
 24e:	fc 01       	movw	r30, r24
 250:	80 81       	ld	r24, Z
 252:	88 23       	and	r24, r24
 254:	59 f7       	brne	.-42     	; 0x22c <serialtx+0x10>
	{
		transmit(*p++);
		delay(2);
	}
}
 256:	0f 90       	pop	r0
 258:	0f 90       	pop	r0
 25a:	cf 91       	pop	r28
 25c:	df 91       	pop	r29
 25e:	08 95       	ret

00000260 <delay>:
void delay(char x)
{
 260:	df 93       	push	r29
 262:	cf 93       	push	r28
 264:	00 d0       	rcall	.+0      	; 0x266 <delay+0x6>
 266:	00 d0       	rcall	.+0      	; 0x268 <delay+0x8>
 268:	0f 92       	push	r0
 26a:	cd b7       	in	r28, 0x3d	; 61
 26c:	de b7       	in	r29, 0x3e	; 62
 26e:	8d 83       	std	Y+5, r24	; 0x05
	int i,j;
	for(i=0;i<=x;i++)
 270:	1a 82       	std	Y+2, r1	; 0x02
 272:	19 82       	std	Y+1, r1	; 0x01
 274:	13 c0       	rjmp	.+38     	; 0x29c <delay+0x3c>
	for(j=0;j<=1000;j++);
 276:	1c 82       	std	Y+4, r1	; 0x04
 278:	1b 82       	std	Y+3, r1	; 0x03
 27a:	05 c0       	rjmp	.+10     	; 0x286 <delay+0x26>
 27c:	8b 81       	ldd	r24, Y+3	; 0x03
 27e:	9c 81       	ldd	r25, Y+4	; 0x04
 280:	01 96       	adiw	r24, 0x01	; 1
 282:	9c 83       	std	Y+4, r25	; 0x04
 284:	8b 83       	std	Y+3, r24	; 0x03
 286:	8b 81       	ldd	r24, Y+3	; 0x03
 288:	9c 81       	ldd	r25, Y+4	; 0x04
 28a:	23 e0       	ldi	r18, 0x03	; 3
 28c:	89 3e       	cpi	r24, 0xE9	; 233
 28e:	92 07       	cpc	r25, r18
 290:	ac f3       	brlt	.-22     	; 0x27c <delay+0x1c>
	}
}
void delay(char x)
{
	int i,j;
	for(i=0;i<=x;i++)
 292:	89 81       	ldd	r24, Y+1	; 0x01
 294:	9a 81       	ldd	r25, Y+2	; 0x02
 296:	01 96       	adiw	r24, 0x01	; 1
 298:	9a 83       	std	Y+2, r25	; 0x02
 29a:	89 83       	std	Y+1, r24	; 0x01
 29c:	8d 81       	ldd	r24, Y+5	; 0x05
 29e:	28 2f       	mov	r18, r24
 2a0:	30 e0       	ldi	r19, 0x00	; 0
 2a2:	89 81       	ldd	r24, Y+1	; 0x01
 2a4:	9a 81       	ldd	r25, Y+2	; 0x02
 2a6:	28 17       	cp	r18, r24
 2a8:	39 07       	cpc	r19, r25
 2aa:	2c f7       	brge	.-54     	; 0x276 <delay+0x16>
	for(j=0;j<=1000;j++);
}
 2ac:	0f 90       	pop	r0
 2ae:	0f 90       	pop	r0
 2b0:	0f 90       	pop	r0
 2b2:	0f 90       	pop	r0
 2b4:	0f 90       	pop	r0
 2b6:	cf 91       	pop	r28
 2b8:	df 91       	pop	r29
 2ba:	08 95       	ret

000002bc <command>:
void command(char c)
{
 2bc:	df 93       	push	r29
 2be:	cf 93       	push	r28
 2c0:	0f 92       	push	r0
 2c2:	cd b7       	in	r28, 0x3d	; 61
 2c4:	de b7       	in	r29, 0x3e	; 62
 2c6:	89 83       	std	Y+1, r24	; 0x01
	PORTC=c;
 2c8:	85 e3       	ldi	r24, 0x35	; 53
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	29 81       	ldd	r18, Y+1	; 0x01
 2ce:	fc 01       	movw	r30, r24
 2d0:	20 83       	st	Z, r18
	PORTD&=~(1<<6);
 2d2:	82 e3       	ldi	r24, 0x32	; 50
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	22 e3       	ldi	r18, 0x32	; 50
 2d8:	30 e0       	ldi	r19, 0x00	; 0
 2da:	f9 01       	movw	r30, r18
 2dc:	20 81       	ld	r18, Z
 2de:	2f 7b       	andi	r18, 0xBF	; 191
 2e0:	fc 01       	movw	r30, r24
 2e2:	20 83       	st	Z, r18
	PORTD|=(1<<7);
 2e4:	82 e3       	ldi	r24, 0x32	; 50
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	22 e3       	ldi	r18, 0x32	; 50
 2ea:	30 e0       	ldi	r19, 0x00	; 0
 2ec:	f9 01       	movw	r30, r18
 2ee:	20 81       	ld	r18, Z
 2f0:	20 68       	ori	r18, 0x80	; 128
 2f2:	fc 01       	movw	r30, r24
 2f4:	20 83       	st	Z, r18
	delay(2);
 2f6:	82 e0       	ldi	r24, 0x02	; 2
 2f8:	0e 94 30 01 	call	0x260	; 0x260 <delay>
	PORTD&=~(1<<7);
 2fc:	82 e3       	ldi	r24, 0x32	; 50
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	22 e3       	ldi	r18, 0x32	; 50
 302:	30 e0       	ldi	r19, 0x00	; 0
 304:	f9 01       	movw	r30, r18
 306:	20 81       	ld	r18, Z
 308:	2f 77       	andi	r18, 0x7F	; 127
 30a:	fc 01       	movw	r30, r24
 30c:	20 83       	st	Z, r18
}
 30e:	0f 90       	pop	r0
 310:	cf 91       	pop	r28
 312:	df 91       	pop	r29
 314:	08 95       	ret

00000316 <data>:
void data(char d)
{
 316:	df 93       	push	r29
 318:	cf 93       	push	r28
 31a:	0f 92       	push	r0
 31c:	cd b7       	in	r28, 0x3d	; 61
 31e:	de b7       	in	r29, 0x3e	; 62
 320:	89 83       	std	Y+1, r24	; 0x01
	PORTC=d;
 322:	85 e3       	ldi	r24, 0x35	; 53
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	29 81       	ldd	r18, Y+1	; 0x01
 328:	fc 01       	movw	r30, r24
 32a:	20 83       	st	Z, r18
	PORTD|=(1<<6);
 32c:	82 e3       	ldi	r24, 0x32	; 50
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	22 e3       	ldi	r18, 0x32	; 50
 332:	30 e0       	ldi	r19, 0x00	; 0
 334:	f9 01       	movw	r30, r18
 336:	20 81       	ld	r18, Z
 338:	20 64       	ori	r18, 0x40	; 64
 33a:	fc 01       	movw	r30, r24
 33c:	20 83       	st	Z, r18
	PORTD|=(1<<7);
 33e:	82 e3       	ldi	r24, 0x32	; 50
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	22 e3       	ldi	r18, 0x32	; 50
 344:	30 e0       	ldi	r19, 0x00	; 0
 346:	f9 01       	movw	r30, r18
 348:	20 81       	ld	r18, Z
 34a:	20 68       	ori	r18, 0x80	; 128
 34c:	fc 01       	movw	r30, r24
 34e:	20 83       	st	Z, r18
	delay(2);
 350:	82 e0       	ldi	r24, 0x02	; 2
 352:	0e 94 30 01 	call	0x260	; 0x260 <delay>
	PORTD&=~(1<<7);
 356:	82 e3       	ldi	r24, 0x32	; 50
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	22 e3       	ldi	r18, 0x32	; 50
 35c:	30 e0       	ldi	r19, 0x00	; 0
 35e:	f9 01       	movw	r30, r18
 360:	20 81       	ld	r18, Z
 362:	2f 77       	andi	r18, 0x7F	; 127
 364:	fc 01       	movw	r30, r24
 366:	20 83       	st	Z, r18
}
 368:	0f 90       	pop	r0
 36a:	cf 91       	pop	r28
 36c:	df 91       	pop	r29
 36e:	08 95       	ret

00000370 <display>:
void display (const char *s)
{
 370:	df 93       	push	r29
 372:	cf 93       	push	r28
 374:	00 d0       	rcall	.+0      	; 0x376 <display+0x6>
 376:	cd b7       	in	r28, 0x3d	; 61
 378:	de b7       	in	r29, 0x3e	; 62
 37a:	9a 83       	std	Y+2, r25	; 0x02
 37c:	89 83       	std	Y+1, r24	; 0x01
	while(*s)
 37e:	0f c0       	rjmp	.+30     	; 0x39e <display+0x2e>
	{
		data(*s++);
 380:	89 81       	ldd	r24, Y+1	; 0x01
 382:	9a 81       	ldd	r25, Y+2	; 0x02
 384:	fc 01       	movw	r30, r24
 386:	20 81       	ld	r18, Z
 388:	89 81       	ldd	r24, Y+1	; 0x01
 38a:	9a 81       	ldd	r25, Y+2	; 0x02
 38c:	01 96       	adiw	r24, 0x01	; 1
 38e:	9a 83       	std	Y+2, r25	; 0x02
 390:	89 83       	std	Y+1, r24	; 0x01
 392:	82 2f       	mov	r24, r18
 394:	0e 94 8b 01 	call	0x316	; 0x316 <data>
		delay(2);
 398:	82 e0       	ldi	r24, 0x02	; 2
 39a:	0e 94 30 01 	call	0x260	; 0x260 <delay>
	delay(2);
	PORTD&=~(1<<7);
}
void display (const char *s)
{
	while(*s)
 39e:	89 81       	ldd	r24, Y+1	; 0x01
 3a0:	9a 81       	ldd	r25, Y+2	; 0x02
 3a2:	fc 01       	movw	r30, r24
 3a4:	80 81       	ld	r24, Z
 3a6:	88 23       	and	r24, r24
 3a8:	59 f7       	brne	.-42     	; 0x380 <display+0x10>
	{
		data(*s++);
		delay(2);
	}
}	
 3aa:	0f 90       	pop	r0
 3ac:	0f 90       	pop	r0
 3ae:	cf 91       	pop	r28
 3b0:	df 91       	pop	r29
 3b2:	08 95       	ret

000003b4 <_exit>:
 3b4:	f8 94       	cli

000003b6 <__stop_program>:
 3b6:	ff cf       	rjmp	.-2      	; 0x3b6 <__stop_program>
