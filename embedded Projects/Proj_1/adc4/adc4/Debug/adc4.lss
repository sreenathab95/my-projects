
adc4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000588  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  00800060  00000588  0000061c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800088  00800088  00000644  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000644  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000d10  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000020  00000000  00000000  00000d95  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000000a9  00000000  00000000  00000db5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000002a0  00000000  00000000  00000e5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000000c8  00000000  00000000  000010fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000048e  00000000  00000000  000011c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000090  00000000  00000000  00001654  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000000a3  00000000  00000000  000016e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 0000001e  00000000  00000000  00001787  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e8       	ldi	r30, 0x88	; 136
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 38       	cpi	r26, 0x88	; 136
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a8 e8       	ldi	r26, 0x88	; 136
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 39       	cpi	r26, 0x92	; 146
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 c2 02 	jmp	0x584	; 0x584 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
void adc_1();
void adc_2();
void adc_3();
char b3,b1,b2,e1,e2,e3,l,a1=0,a2,a3;
int main(void)
{
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
	
	DDRC=0XFF;
  9a:	84 e3       	ldi	r24, 0x34	; 52
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	2f ef       	ldi	r18, 0xFF	; 255
  a0:	fc 01       	movw	r30, r24
  a2:	20 83       	st	Z, r18
	DDRD=0XFF;
  a4:	81 e3       	ldi	r24, 0x31	; 49
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	2f ef       	ldi	r18, 0xFF	; 255
  aa:	fc 01       	movw	r30, r24
  ac:	20 83       	st	Z, r18
	command(0x38);
  ae:	88 e3       	ldi	r24, 0x38	; 56
  b0:	0e 94 2b 02 	call	0x456	; 0x456 <command>
	command(0x06);
  b4:	86 e0       	ldi	r24, 0x06	; 6
  b6:	0e 94 2b 02 	call	0x456	; 0x456 <command>
	command(0x0C);
  ba:	8c e0       	ldi	r24, 0x0C	; 12
  bc:	0e 94 2b 02 	call	0x456	; 0x456 <command>
	command(0x80);
  c0:	80 e8       	ldi	r24, 0x80	; 128
  c2:	0e 94 2b 02 	call	0x456	; 0x456 <command>
	command(0x01);
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	0e 94 2b 02 	call	0x456	; 0x456 <command>
	delay(50);
  cc:	82 e3       	ldi	r24, 0x32	; 50
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	0e 94 87 02 	call	0x50e	; 0x50e <delay>
	ADCSRA=0X87;
  d4:	86 e2       	ldi	r24, 0x26	; 38
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	27 e8       	ldi	r18, 0x87	; 135
  da:	fc 01       	movw	r30, r24
  dc:	20 83       	st	Z, r18
  de:	05 c0       	rjmp	.+10     	; 0xea <main+0x58>
			  command(0xc0);
			  display("       ");
		 }
	 }	  
  
   }
  e0:	00 00       	nop
  e2:	03 c0       	rjmp	.+6      	; 0xea <main+0x58>
  e4:	00 00       	nop
  e6:	01 c0       	rjmp	.+2      	; 0xea <main+0x58>
  e8:	00 00       	nop
	command(0x01);
	delay(50);
	ADCSRA=0X87;
    while(1)
    {
		adc_1();
  ea:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <adc_1>
		adc_2();
  ee:	0e 94 54 01 	call	0x2a8	; 0x2a8 <adc_2>
		adc_3();
  f2:	0e 94 ae 01 	call	0x35c	; 0x35c <adc_3>
      if (b1<100)
  f6:	80 91 8a 00 	lds	r24, 0x008A
  fa:	84 36       	cpi	r24, 0x64	; 100
  fc:	98 f4       	brcc	.+38     	; 0x124 <main+0x92>
      {
		  if (b2<100)
  fe:	80 91 89 00 	lds	r24, 0x0089
 102:	84 36       	cpi	r24, 0x64	; 100
 104:	58 f4       	brcc	.+22     	; 0x11c <main+0x8a>
		  {
			  if (b3<100)
 106:	80 91 8f 00 	lds	r24, 0x008F
 10a:	84 36       	cpi	r24, 0x64	; 100
 10c:	38 f4       	brcc	.+14     	; 0x11c <main+0x8a>
			  {
				  command(0xc0);
 10e:	80 ec       	ldi	r24, 0xC0	; 192
 110:	0e 94 2b 02 	call	0x456	; 0x456 <command>
				  display("sreenath");
 114:	80 e6       	ldi	r24, 0x60	; 96
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	0e 94 08 02 	call	0x410	; 0x410 <display>
			  }
		  }
		  a1=1;
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	80 93 88 00 	sts	0x0088, r24
 122:	11 c0       	rjmp	.+34     	; 0x146 <main+0xb4>
      }
	  else if(b1>100&&a1==1)
 124:	80 91 8a 00 	lds	r24, 0x008A
 128:	85 36       	cpi	r24, 0x65	; 101
 12a:	68 f0       	brcs	.+26     	; 0x146 <main+0xb4>
 12c:	80 91 88 00 	lds	r24, 0x0088
 130:	81 30       	cpi	r24, 0x01	; 1
 132:	49 f4       	brne	.+18     	; 0x146 <main+0xb4>
	  {
		  a1=0;
 134:	10 92 88 00 	sts	0x0088, r1
		  command(0xc0);
 138:	80 ec       	ldi	r24, 0xC0	; 192
 13a:	0e 94 2b 02 	call	0x456	; 0x456 <command>
		  display("      ");
 13e:	89 e6       	ldi	r24, 0x69	; 105
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	0e 94 08 02 	call	0x410	; 0x410 <display>
	  }
	  if (b1>200)
 146:	80 91 8a 00 	lds	r24, 0x008A
 14a:	89 3c       	cpi	r24, 0xC9	; 201
 14c:	98 f0       	brcs	.+38     	; 0x174 <main+0xe2>
	  {
		  if (b2>200)
 14e:	80 91 89 00 	lds	r24, 0x0089
 152:	89 3c       	cpi	r24, 0xC9	; 201
 154:	58 f0       	brcs	.+22     	; 0x16c <main+0xda>
		  {
			  if (b3>200)
 156:	80 91 8f 00 	lds	r24, 0x008F
 15a:	89 3c       	cpi	r24, 0xC9	; 201
 15c:	38 f0       	brcs	.+14     	; 0x16c <main+0xda>
			  {
				command(0xc0);
 15e:	80 ec       	ldi	r24, 0xC0	; 192
 160:	0e 94 2b 02 	call	0x456	; 0x456 <command>
				display("hello");  
 164:	80 e7       	ldi	r24, 0x70	; 112
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	0e 94 08 02 	call	0x410	; 0x410 <display>
			  }
		  }
		  a2=1;
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	80 93 8e 00 	sts	0x008E, r24
 172:	0f c0       	rjmp	.+30     	; 0x192 <main+0x100>
	  }		
		else if(b1<200&&a2==1)
 174:	80 91 8a 00 	lds	r24, 0x008A
 178:	88 3c       	cpi	r24, 0xC8	; 200
 17a:	58 f4       	brcc	.+22     	; 0x192 <main+0x100>
 17c:	80 91 8e 00 	lds	r24, 0x008E
 180:	81 30       	cpi	r24, 0x01	; 1
 182:	39 f4       	brne	.+14     	; 0x192 <main+0x100>
		{
			a2==0;
			command(0xc0);
 184:	80 ec       	ldi	r24, 0xC0	; 192
 186:	0e 94 2b 02 	call	0x456	; 0x456 <command>
			display("    ");
 18a:	86 e7       	ldi	r24, 0x76	; 118
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	0e 94 08 02 	call	0x410	; 0x410 <display>
		}
	  
	  if (b1>100&&b1<200||b2>100&&b2<200||b3>100&&b3<200)
 192:	80 91 8a 00 	lds	r24, 0x008A
 196:	85 36       	cpi	r24, 0x65	; 101
 198:	20 f0       	brcs	.+8      	; 0x1a2 <main+0x110>
 19a:	80 91 8a 00 	lds	r24, 0x008A
 19e:	88 3c       	cpi	r24, 0xC8	; 200
 1a0:	90 f0       	brcs	.+36     	; 0x1c6 <main+0x134>
 1a2:	80 91 89 00 	lds	r24, 0x0089
 1a6:	85 36       	cpi	r24, 0x65	; 101
 1a8:	20 f0       	brcs	.+8      	; 0x1b2 <main+0x120>
 1aa:	80 91 89 00 	lds	r24, 0x0089
 1ae:	88 3c       	cpi	r24, 0xC8	; 200
 1b0:	50 f0       	brcs	.+20     	; 0x1c6 <main+0x134>
 1b2:	80 91 8f 00 	lds	r24, 0x008F
 1b6:	85 36       	cpi	r24, 0x65	; 101
 1b8:	08 f4       	brcc	.+2      	; 0x1bc <main+0x12a>
 1ba:	92 cf       	rjmp	.-220    	; 0xe0 <main+0x4e>
 1bc:	80 91 8f 00 	lds	r24, 0x008F
 1c0:	88 3c       	cpi	r24, 0xC8	; 200
 1c2:	08 f0       	brcs	.+2      	; 0x1c6 <main+0x134>
 1c4:	8f cf       	rjmp	.-226    	; 0xe4 <main+0x52>
	  {
		  a3=1;
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	80 93 8c 00 	sts	0x008C, r24
		  command(0xc0);
 1cc:	80 ec       	ldi	r24, 0xC0	; 192
 1ce:	0e 94 2b 02 	call	0x456	; 0x456 <command>
		  display("hai");
 1d2:	8b e7       	ldi	r24, 0x7B	; 123
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	0e 94 08 02 	call	0x410	; 0x410 <display>
		  if(a3==1)
 1da:	80 91 8c 00 	lds	r24, 0x008C
 1de:	81 30       	cpi	r24, 0x01	; 1
 1e0:	09 f0       	breq	.+2      	; 0x1e4 <main+0x152>
 1e2:	82 cf       	rjmp	.-252    	; 0xe8 <main+0x56>
		  {
			  command(0xc0);
 1e4:	80 ec       	ldi	r24, 0xC0	; 192
 1e6:	0e 94 2b 02 	call	0x456	; 0x456 <command>
			  display("       ");
 1ea:	8f e7       	ldi	r24, 0x7F	; 127
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	0e 94 08 02 	call	0x410	; 0x410 <display>
		 }
	 }	  
  
   }
 1f2:	7b cf       	rjmp	.-266    	; 0xea <main+0x58>

000001f4 <adc_1>:
}
void adc_1()
{
 1f4:	df 93       	push	r29
 1f6:	cf 93       	push	r28
 1f8:	cd b7       	in	r28, 0x3d	; 61
 1fa:	de b7       	in	r29, 0x3e	; 62
	ADMUX=0X61;
 1fc:	87 e2       	ldi	r24, 0x27	; 39
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	21 e6       	ldi	r18, 0x61	; 97
 202:	fc 01       	movw	r30, r24
 204:	20 83       	st	Z, r18
	command(0X80);
 206:	80 e8       	ldi	r24, 0x80	; 128
 208:	0e 94 2b 02 	call	0x456	; 0x456 <command>
	ADCSRA|=(1<<ADSC);
 20c:	86 e2       	ldi	r24, 0x26	; 38
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	26 e2       	ldi	r18, 0x26	; 38
 212:	30 e0       	ldi	r19, 0x00	; 0
 214:	f9 01       	movw	r30, r18
 216:	20 81       	ld	r18, Z
 218:	20 64       	ori	r18, 0x40	; 64
 21a:	fc 01       	movw	r30, r24
 21c:	20 83       	st	Z, r18
	while((ADCSRA&(1<<ADIF))==0);
 21e:	00 00       	nop
 220:	86 e2       	ldi	r24, 0x26	; 38
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	fc 01       	movw	r30, r24
 226:	80 81       	ld	r24, Z
 228:	88 2f       	mov	r24, r24
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	80 71       	andi	r24, 0x10	; 16
 22e:	90 70       	andi	r25, 0x00	; 0
 230:	00 97       	sbiw	r24, 0x00	; 0
 232:	b1 f3       	breq	.-20     	; 0x220 <adc_1+0x2c>
	b1=ADCH;
 234:	85 e2       	ldi	r24, 0x25	; 37
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	fc 01       	movw	r30, r24
 23a:	80 81       	ld	r24, Z
 23c:	80 93 8a 00 	sts	0x008A, r24
	e1=b1%10;
 240:	80 91 8a 00 	lds	r24, 0x008A
 244:	9a e0       	ldi	r25, 0x0A	; 10
 246:	69 2f       	mov	r22, r25
 248:	0e 94 b6 02 	call	0x56c	; 0x56c <__udivmodqi4>
 24c:	89 2f       	mov	r24, r25
 24e:	80 93 91 00 	sts	0x0091, r24
	e2=b1/10;
 252:	80 91 8a 00 	lds	r24, 0x008A
 256:	9a e0       	ldi	r25, 0x0A	; 10
 258:	69 2f       	mov	r22, r25
 25a:	0e 94 b6 02 	call	0x56c	; 0x56c <__udivmodqi4>
 25e:	80 93 8d 00 	sts	0x008D, r24
	e3=e2%10;
 262:	80 91 8d 00 	lds	r24, 0x008D
 266:	9a e0       	ldi	r25, 0x0A	; 10
 268:	69 2f       	mov	r22, r25
 26a:	0e 94 b6 02 	call	0x56c	; 0x56c <__udivmodqi4>
 26e:	89 2f       	mov	r24, r25
 270:	80 93 90 00 	sts	0x0090, r24
	l=e2/10;
 274:	80 91 8d 00 	lds	r24, 0x008D
 278:	9a e0       	ldi	r25, 0x0A	; 10
 27a:	69 2f       	mov	r22, r25
 27c:	0e 94 b6 02 	call	0x56c	; 0x56c <__udivmodqi4>
 280:	80 93 8b 00 	sts	0x008B, r24
	data(l+0x30);
 284:	80 91 8b 00 	lds	r24, 0x008B
 288:	80 5d       	subi	r24, 0xD0	; 208
 28a:	0e 94 59 02 	call	0x4b2	; 0x4b2 <data>
	data(e3+0x30);
 28e:	80 91 90 00 	lds	r24, 0x0090
 292:	80 5d       	subi	r24, 0xD0	; 208
 294:	0e 94 59 02 	call	0x4b2	; 0x4b2 <data>
	data(e1+0x30);
 298:	80 91 91 00 	lds	r24, 0x0091
 29c:	80 5d       	subi	r24, 0xD0	; 208
 29e:	0e 94 59 02 	call	0x4b2	; 0x4b2 <data>
}	
 2a2:	cf 91       	pop	r28
 2a4:	df 91       	pop	r29
 2a6:	08 95       	ret

000002a8 <adc_2>:
void adc_2()
{
 2a8:	df 93       	push	r29
 2aa:	cf 93       	push	r28
 2ac:	cd b7       	in	r28, 0x3d	; 61
 2ae:	de b7       	in	r29, 0x3e	; 62
	ADMUX=0X62;
 2b0:	87 e2       	ldi	r24, 0x27	; 39
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	22 e6       	ldi	r18, 0x62	; 98
 2b6:	fc 01       	movw	r30, r24
 2b8:	20 83       	st	Z, r18
	command(0X84);
 2ba:	84 e8       	ldi	r24, 0x84	; 132
 2bc:	0e 94 2b 02 	call	0x456	; 0x456 <command>
	ADCSRA|=(1<<6);
 2c0:	86 e2       	ldi	r24, 0x26	; 38
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	26 e2       	ldi	r18, 0x26	; 38
 2c6:	30 e0       	ldi	r19, 0x00	; 0
 2c8:	f9 01       	movw	r30, r18
 2ca:	20 81       	ld	r18, Z
 2cc:	20 64       	ori	r18, 0x40	; 64
 2ce:	fc 01       	movw	r30, r24
 2d0:	20 83       	st	Z, r18
	while((ADCSRA&(1<<ADIF))==0);
 2d2:	00 00       	nop
 2d4:	86 e2       	ldi	r24, 0x26	; 38
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	fc 01       	movw	r30, r24
 2da:	80 81       	ld	r24, Z
 2dc:	88 2f       	mov	r24, r24
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	80 71       	andi	r24, 0x10	; 16
 2e2:	90 70       	andi	r25, 0x00	; 0
 2e4:	00 97       	sbiw	r24, 0x00	; 0
 2e6:	b1 f3       	breq	.-20     	; 0x2d4 <adc_2+0x2c>
	b2=ADCH;
 2e8:	85 e2       	ldi	r24, 0x25	; 37
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	fc 01       	movw	r30, r24
 2ee:	80 81       	ld	r24, Z
 2f0:	80 93 89 00 	sts	0x0089, r24
	e1=b2%10;
 2f4:	80 91 89 00 	lds	r24, 0x0089
 2f8:	9a e0       	ldi	r25, 0x0A	; 10
 2fa:	69 2f       	mov	r22, r25
 2fc:	0e 94 b6 02 	call	0x56c	; 0x56c <__udivmodqi4>
 300:	89 2f       	mov	r24, r25
 302:	80 93 91 00 	sts	0x0091, r24
	e2=b2/10;
 306:	80 91 89 00 	lds	r24, 0x0089
 30a:	9a e0       	ldi	r25, 0x0A	; 10
 30c:	69 2f       	mov	r22, r25
 30e:	0e 94 b6 02 	call	0x56c	; 0x56c <__udivmodqi4>
 312:	80 93 8d 00 	sts	0x008D, r24
	e3=e2%10;
 316:	80 91 8d 00 	lds	r24, 0x008D
 31a:	9a e0       	ldi	r25, 0x0A	; 10
 31c:	69 2f       	mov	r22, r25
 31e:	0e 94 b6 02 	call	0x56c	; 0x56c <__udivmodqi4>
 322:	89 2f       	mov	r24, r25
 324:	80 93 90 00 	sts	0x0090, r24
	l=e2/10;
 328:	80 91 8d 00 	lds	r24, 0x008D
 32c:	9a e0       	ldi	r25, 0x0A	; 10
 32e:	69 2f       	mov	r22, r25
 330:	0e 94 b6 02 	call	0x56c	; 0x56c <__udivmodqi4>
 334:	80 93 8b 00 	sts	0x008B, r24
	data(l+0x30);
 338:	80 91 8b 00 	lds	r24, 0x008B
 33c:	80 5d       	subi	r24, 0xD0	; 208
 33e:	0e 94 59 02 	call	0x4b2	; 0x4b2 <data>
	data(e3+0x30);
 342:	80 91 90 00 	lds	r24, 0x0090
 346:	80 5d       	subi	r24, 0xD0	; 208
 348:	0e 94 59 02 	call	0x4b2	; 0x4b2 <data>
	data(e1+0x30);
 34c:	80 91 91 00 	lds	r24, 0x0091
 350:	80 5d       	subi	r24, 0xD0	; 208
 352:	0e 94 59 02 	call	0x4b2	; 0x4b2 <data>
}
 356:	cf 91       	pop	r28
 358:	df 91       	pop	r29
 35a:	08 95       	ret

0000035c <adc_3>:
void adc_3()
{
 35c:	df 93       	push	r29
 35e:	cf 93       	push	r28
 360:	cd b7       	in	r28, 0x3d	; 61
 362:	de b7       	in	r29, 0x3e	; 62
	ADMUX=0X64;
 364:	87 e2       	ldi	r24, 0x27	; 39
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	24 e6       	ldi	r18, 0x64	; 100
 36a:	fc 01       	movw	r30, r24
 36c:	20 83       	st	Z, r18
	command(0X88);
 36e:	88 e8       	ldi	r24, 0x88	; 136
 370:	0e 94 2b 02 	call	0x456	; 0x456 <command>
	ADCSRA|=(1<<6);
 374:	86 e2       	ldi	r24, 0x26	; 38
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	26 e2       	ldi	r18, 0x26	; 38
 37a:	30 e0       	ldi	r19, 0x00	; 0
 37c:	f9 01       	movw	r30, r18
 37e:	20 81       	ld	r18, Z
 380:	20 64       	ori	r18, 0x40	; 64
 382:	fc 01       	movw	r30, r24
 384:	20 83       	st	Z, r18
	while((ADCSRA&(1<<ADIF))==0);
 386:	00 00       	nop
 388:	86 e2       	ldi	r24, 0x26	; 38
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	fc 01       	movw	r30, r24
 38e:	80 81       	ld	r24, Z
 390:	88 2f       	mov	r24, r24
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	80 71       	andi	r24, 0x10	; 16
 396:	90 70       	andi	r25, 0x00	; 0
 398:	00 97       	sbiw	r24, 0x00	; 0
 39a:	b1 f3       	breq	.-20     	; 0x388 <adc_3+0x2c>
	b3=ADCH;
 39c:	85 e2       	ldi	r24, 0x25	; 37
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	fc 01       	movw	r30, r24
 3a2:	80 81       	ld	r24, Z
 3a4:	80 93 8f 00 	sts	0x008F, r24
	e1=b3%10;
 3a8:	80 91 8f 00 	lds	r24, 0x008F
 3ac:	9a e0       	ldi	r25, 0x0A	; 10
 3ae:	69 2f       	mov	r22, r25
 3b0:	0e 94 b6 02 	call	0x56c	; 0x56c <__udivmodqi4>
 3b4:	89 2f       	mov	r24, r25
 3b6:	80 93 91 00 	sts	0x0091, r24
	e2=b3/10;
 3ba:	80 91 8f 00 	lds	r24, 0x008F
 3be:	9a e0       	ldi	r25, 0x0A	; 10
 3c0:	69 2f       	mov	r22, r25
 3c2:	0e 94 b6 02 	call	0x56c	; 0x56c <__udivmodqi4>
 3c6:	80 93 8d 00 	sts	0x008D, r24
	e3=e2%10;
 3ca:	80 91 8d 00 	lds	r24, 0x008D
 3ce:	9a e0       	ldi	r25, 0x0A	; 10
 3d0:	69 2f       	mov	r22, r25
 3d2:	0e 94 b6 02 	call	0x56c	; 0x56c <__udivmodqi4>
 3d6:	89 2f       	mov	r24, r25
 3d8:	80 93 90 00 	sts	0x0090, r24
	l=e2/10;
 3dc:	80 91 8d 00 	lds	r24, 0x008D
 3e0:	9a e0       	ldi	r25, 0x0A	; 10
 3e2:	69 2f       	mov	r22, r25
 3e4:	0e 94 b6 02 	call	0x56c	; 0x56c <__udivmodqi4>
 3e8:	80 93 8b 00 	sts	0x008B, r24
	data(l+0x30);
 3ec:	80 91 8b 00 	lds	r24, 0x008B
 3f0:	80 5d       	subi	r24, 0xD0	; 208
 3f2:	0e 94 59 02 	call	0x4b2	; 0x4b2 <data>
	data(e3+0x30);
 3f6:	80 91 90 00 	lds	r24, 0x0090
 3fa:	80 5d       	subi	r24, 0xD0	; 208
 3fc:	0e 94 59 02 	call	0x4b2	; 0x4b2 <data>
	data(e1+0x30);
 400:	80 91 91 00 	lds	r24, 0x0091
 404:	80 5d       	subi	r24, 0xD0	; 208
 406:	0e 94 59 02 	call	0x4b2	; 0x4b2 <data>
}		
 40a:	cf 91       	pop	r28
 40c:	df 91       	pop	r29
 40e:	08 95       	ret

00000410 <display>:
void display (const char *s)
{
 410:	df 93       	push	r29
 412:	cf 93       	push	r28
 414:	00 d0       	rcall	.+0      	; 0x416 <display+0x6>
 416:	cd b7       	in	r28, 0x3d	; 61
 418:	de b7       	in	r29, 0x3e	; 62
 41a:	9a 83       	std	Y+2, r25	; 0x02
 41c:	89 83       	std	Y+1, r24	; 0x01
	while(*s)
 41e:	10 c0       	rjmp	.+32     	; 0x440 <display+0x30>
	{
		data(*s++);
 420:	89 81       	ldd	r24, Y+1	; 0x01
 422:	9a 81       	ldd	r25, Y+2	; 0x02
 424:	fc 01       	movw	r30, r24
 426:	20 81       	ld	r18, Z
 428:	89 81       	ldd	r24, Y+1	; 0x01
 42a:	9a 81       	ldd	r25, Y+2	; 0x02
 42c:	01 96       	adiw	r24, 0x01	; 1
 42e:	9a 83       	std	Y+2, r25	; 0x02
 430:	89 83       	std	Y+1, r24	; 0x01
 432:	82 2f       	mov	r24, r18
 434:	0e 94 59 02 	call	0x4b2	; 0x4b2 <data>
		delay(2);
 438:	82 e0       	ldi	r24, 0x02	; 2
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	0e 94 87 02 	call	0x50e	; 0x50e <delay>
	data(e3+0x30);
	data(e1+0x30);
}		
void display (const char *s)
{
	while(*s)
 440:	89 81       	ldd	r24, Y+1	; 0x01
 442:	9a 81       	ldd	r25, Y+2	; 0x02
 444:	fc 01       	movw	r30, r24
 446:	80 81       	ld	r24, Z
 448:	88 23       	and	r24, r24
 44a:	51 f7       	brne	.-44     	; 0x420 <display+0x10>
	{
		data(*s++);
		delay(2);
	}
}	
 44c:	0f 90       	pop	r0
 44e:	0f 90       	pop	r0
 450:	cf 91       	pop	r28
 452:	df 91       	pop	r29
 454:	08 95       	ret

00000456 <command>:
			
void command(char c)
{
 456:	df 93       	push	r29
 458:	cf 93       	push	r28
 45a:	0f 92       	push	r0
 45c:	cd b7       	in	r28, 0x3d	; 61
 45e:	de b7       	in	r29, 0x3e	; 62
 460:	89 83       	std	Y+1, r24	; 0x01
	PORTC=c;
 462:	85 e3       	ldi	r24, 0x35	; 53
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	29 81       	ldd	r18, Y+1	; 0x01
 468:	fc 01       	movw	r30, r24
 46a:	20 83       	st	Z, r18
	PORTD&=~(1<<6);
 46c:	82 e3       	ldi	r24, 0x32	; 50
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	22 e3       	ldi	r18, 0x32	; 50
 472:	30 e0       	ldi	r19, 0x00	; 0
 474:	f9 01       	movw	r30, r18
 476:	20 81       	ld	r18, Z
 478:	2f 7b       	andi	r18, 0xBF	; 191
 47a:	fc 01       	movw	r30, r24
 47c:	20 83       	st	Z, r18
	PORTD|=(1<<7);
 47e:	82 e3       	ldi	r24, 0x32	; 50
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	22 e3       	ldi	r18, 0x32	; 50
 484:	30 e0       	ldi	r19, 0x00	; 0
 486:	f9 01       	movw	r30, r18
 488:	20 81       	ld	r18, Z
 48a:	20 68       	ori	r18, 0x80	; 128
 48c:	fc 01       	movw	r30, r24
 48e:	20 83       	st	Z, r18
	delay(2);
 490:	82 e0       	ldi	r24, 0x02	; 2
 492:	90 e0       	ldi	r25, 0x00	; 0
 494:	0e 94 87 02 	call	0x50e	; 0x50e <delay>
	PORTD&=~(1<<7);
 498:	82 e3       	ldi	r24, 0x32	; 50
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	22 e3       	ldi	r18, 0x32	; 50
 49e:	30 e0       	ldi	r19, 0x00	; 0
 4a0:	f9 01       	movw	r30, r18
 4a2:	20 81       	ld	r18, Z
 4a4:	2f 77       	andi	r18, 0x7F	; 127
 4a6:	fc 01       	movw	r30, r24
 4a8:	20 83       	st	Z, r18
}
 4aa:	0f 90       	pop	r0
 4ac:	cf 91       	pop	r28
 4ae:	df 91       	pop	r29
 4b0:	08 95       	ret

000004b2 <data>:
void data(char d)
{
 4b2:	df 93       	push	r29
 4b4:	cf 93       	push	r28
 4b6:	0f 92       	push	r0
 4b8:	cd b7       	in	r28, 0x3d	; 61
 4ba:	de b7       	in	r29, 0x3e	; 62
 4bc:	89 83       	std	Y+1, r24	; 0x01
	PORTC=d;
 4be:	85 e3       	ldi	r24, 0x35	; 53
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	29 81       	ldd	r18, Y+1	; 0x01
 4c4:	fc 01       	movw	r30, r24
 4c6:	20 83       	st	Z, r18
	PORTD|=(1<<6);
 4c8:	82 e3       	ldi	r24, 0x32	; 50
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	22 e3       	ldi	r18, 0x32	; 50
 4ce:	30 e0       	ldi	r19, 0x00	; 0
 4d0:	f9 01       	movw	r30, r18
 4d2:	20 81       	ld	r18, Z
 4d4:	20 64       	ori	r18, 0x40	; 64
 4d6:	fc 01       	movw	r30, r24
 4d8:	20 83       	st	Z, r18
	PORTD|=(1<<7);
 4da:	82 e3       	ldi	r24, 0x32	; 50
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	22 e3       	ldi	r18, 0x32	; 50
 4e0:	30 e0       	ldi	r19, 0x00	; 0
 4e2:	f9 01       	movw	r30, r18
 4e4:	20 81       	ld	r18, Z
 4e6:	20 68       	ori	r18, 0x80	; 128
 4e8:	fc 01       	movw	r30, r24
 4ea:	20 83       	st	Z, r18
	delay(2);
 4ec:	82 e0       	ldi	r24, 0x02	; 2
 4ee:	90 e0       	ldi	r25, 0x00	; 0
 4f0:	0e 94 87 02 	call	0x50e	; 0x50e <delay>
	PORTD&=~(1<<7);
 4f4:	82 e3       	ldi	r24, 0x32	; 50
 4f6:	90 e0       	ldi	r25, 0x00	; 0
 4f8:	22 e3       	ldi	r18, 0x32	; 50
 4fa:	30 e0       	ldi	r19, 0x00	; 0
 4fc:	f9 01       	movw	r30, r18
 4fe:	20 81       	ld	r18, Z
 500:	2f 77       	andi	r18, 0x7F	; 127
 502:	fc 01       	movw	r30, r24
 504:	20 83       	st	Z, r18
}
 506:	0f 90       	pop	r0
 508:	cf 91       	pop	r28
 50a:	df 91       	pop	r29
 50c:	08 95       	ret

0000050e <delay>:
void delay(int x)
{
 50e:	df 93       	push	r29
 510:	cf 93       	push	r28
 512:	00 d0       	rcall	.+0      	; 0x514 <delay+0x6>
 514:	00 d0       	rcall	.+0      	; 0x516 <delay+0x8>
 516:	00 d0       	rcall	.+0      	; 0x518 <delay+0xa>
 518:	cd b7       	in	r28, 0x3d	; 61
 51a:	de b7       	in	r29, 0x3e	; 62
 51c:	9e 83       	std	Y+6, r25	; 0x06
 51e:	8d 83       	std	Y+5, r24	; 0x05
	int i,j;
	for(i=0;i<x;i++)
 520:	1a 82       	std	Y+2, r1	; 0x02
 522:	19 82       	std	Y+1, r1	; 0x01
 524:	13 c0       	rjmp	.+38     	; 0x54c <delay+0x3e>
	for(j=0;j<1000;j++);
 526:	1c 82       	std	Y+4, r1	; 0x04
 528:	1b 82       	std	Y+3, r1	; 0x03
 52a:	05 c0       	rjmp	.+10     	; 0x536 <delay+0x28>
 52c:	8b 81       	ldd	r24, Y+3	; 0x03
 52e:	9c 81       	ldd	r25, Y+4	; 0x04
 530:	01 96       	adiw	r24, 0x01	; 1
 532:	9c 83       	std	Y+4, r25	; 0x04
 534:	8b 83       	std	Y+3, r24	; 0x03
 536:	8b 81       	ldd	r24, Y+3	; 0x03
 538:	9c 81       	ldd	r25, Y+4	; 0x04
 53a:	23 e0       	ldi	r18, 0x03	; 3
 53c:	88 3e       	cpi	r24, 0xE8	; 232
 53e:	92 07       	cpc	r25, r18
 540:	ac f3       	brlt	.-22     	; 0x52c <delay+0x1e>
	PORTD&=~(1<<7);
}
void delay(int x)
{
	int i,j;
	for(i=0;i<x;i++)
 542:	89 81       	ldd	r24, Y+1	; 0x01
 544:	9a 81       	ldd	r25, Y+2	; 0x02
 546:	01 96       	adiw	r24, 0x01	; 1
 548:	9a 83       	std	Y+2, r25	; 0x02
 54a:	89 83       	std	Y+1, r24	; 0x01
 54c:	29 81       	ldd	r18, Y+1	; 0x01
 54e:	3a 81       	ldd	r19, Y+2	; 0x02
 550:	8d 81       	ldd	r24, Y+5	; 0x05
 552:	9e 81       	ldd	r25, Y+6	; 0x06
 554:	28 17       	cp	r18, r24
 556:	39 07       	cpc	r19, r25
 558:	34 f3       	brlt	.-52     	; 0x526 <delay+0x18>
	for(j=0;j<1000;j++);
 55a:	26 96       	adiw	r28, 0x06	; 6
 55c:	0f b6       	in	r0, 0x3f	; 63
 55e:	f8 94       	cli
 560:	de bf       	out	0x3e, r29	; 62
 562:	0f be       	out	0x3f, r0	; 63
 564:	cd bf       	out	0x3d, r28	; 61
 566:	cf 91       	pop	r28
 568:	df 91       	pop	r29
 56a:	08 95       	ret

0000056c <__udivmodqi4>:
 56c:	99 1b       	sub	r25, r25
 56e:	79 e0       	ldi	r23, 0x09	; 9
 570:	04 c0       	rjmp	.+8      	; 0x57a <__udivmodqi4_ep>

00000572 <__udivmodqi4_loop>:
 572:	99 1f       	adc	r25, r25
 574:	96 17       	cp	r25, r22
 576:	08 f0       	brcs	.+2      	; 0x57a <__udivmodqi4_ep>
 578:	96 1b       	sub	r25, r22

0000057a <__udivmodqi4_ep>:
 57a:	88 1f       	adc	r24, r24
 57c:	7a 95       	dec	r23
 57e:	c9 f7       	brne	.-14     	; 0x572 <__udivmodqi4_loop>
 580:	80 95       	com	r24
 582:	08 95       	ret

00000584 <_exit>:
 584:	f8 94       	cli

00000586 <__stop_program>:
 586:	ff cf       	rjmp	.-2      	; 0x586 <__stop_program>
