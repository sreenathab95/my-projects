
gsm usart.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000060e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  0000060e  00000682  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  000006a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000d70  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000020  00000000  00000000  00000df5  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000077  00000000  00000000  00000e15  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000235  00000000  00000000  00000e8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000dc  00000000  00000000  000010c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005b6  00000000  00000000  0000119d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a0  00000000  00000000  00001754  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000000c1  00000000  00000000  000017f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubtypes 0000001e  00000000  00000000  000018b5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e0       	ldi	r30, 0x0E	; 14
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 38       	cpi	r26, 0x82	; 130
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 05 03 	jmp	0x60a	; 0x60a <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
void display(const char *s);
void delay(char x);
void serialtx(const char*p);
char keypad();
int main(void)
{
  82:	df 93       	push	r29
  84:	cf 93       	push	r28
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	e7 97       	sbiw	r28, 0x37	; 55
  8c:	0f b6       	in	r0, 0x3f	; 63
  8e:	f8 94       	cli
  90:	de bf       	out	0x3e, r29	; 62
  92:	0f be       	out	0x3f, r0	; 63
  94:	cd bf       	out	0x3d, r28	; 61
	DDRA=0xf0;
  96:	8a e3       	ldi	r24, 0x3A	; 58
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	20 ef       	ldi	r18, 0xF0	; 240
  9c:	fc 01       	movw	r30, r24
  9e:	20 83       	st	Z, r18
	DDRB=0x00;
  a0:	87 e3       	ldi	r24, 0x37	; 55
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	fc 01       	movw	r30, r24
  a6:	10 82       	st	Z, r1
	PORTB=0xff;
  a8:	88 e3       	ldi	r24, 0x38	; 56
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	2f ef       	ldi	r18, 0xFF	; 255
  ae:	fc 01       	movw	r30, r24
  b0:	20 83       	st	Z, r18
	PORTA=0xff;
  b2:	8b e3       	ldi	r24, 0x3B	; 59
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	2f ef       	ldi	r18, 0xFF	; 255
  b8:	fc 01       	movw	r30, r24
  ba:	20 83       	st	Z, r18
	DDRC=0XFF;
  bc:	84 e3       	ldi	r24, 0x34	; 52
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	2f ef       	ldi	r18, 0xFF	; 255
  c2:	fc 01       	movw	r30, r24
  c4:	20 83       	st	Z, r18
	DDRD=0XFF;
  c6:	81 e3       	ldi	r24, 0x31	; 49
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	2f ef       	ldi	r18, 0xFF	; 255
  cc:	fc 01       	movw	r30, r24
  ce:	20 83       	st	Z, r18
	command(0x38);
  d0:	88 e3       	ldi	r24, 0x38	; 56
  d2:	0e 94 95 01 	call	0x32a	; 0x32a <command>
	command(0x06);
  d6:	86 e0       	ldi	r24, 0x06	; 6
  d8:	0e 94 95 01 	call	0x32a	; 0x32a <command>
	command(0x0C);
  dc:	8c e0       	ldi	r24, 0x0C	; 12
  de:	0e 94 95 01 	call	0x32a	; 0x32a <command>
	command(0x80);
  e2:	80 e8       	ldi	r24, 0x80	; 128
  e4:	0e 94 95 01 	call	0x32a	; 0x32a <command>
	command(0x01);
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	0e 94 95 01 	call	0x32a	; 0x32a <command>
	UCSRA=0x00;
  ee:	8b e2       	ldi	r24, 0x2B	; 43
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	fc 01       	movw	r30, r24
  f4:	10 82       	st	Z, r1
	UCSRB=0x18;
  f6:	8a e2       	ldi	r24, 0x2A	; 42
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	28 e1       	ldi	r18, 0x18	; 24
  fc:	fc 01       	movw	r30, r24
  fe:	20 83       	st	Z, r18
	UCSRC=0x06;
 100:	80 e4       	ldi	r24, 0x40	; 64
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	26 e0       	ldi	r18, 0x06	; 6
 106:	fc 01       	movw	r30, r24
 108:	20 83       	st	Z, r18
	UBRRL=0x19;
 10a:	89 e2       	ldi	r24, 0x29	; 41
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	29 e1       	ldi	r18, 0x19	; 25
 110:	fc 01       	movw	r30, r24
 112:	20 83       	st	Z, r18
	UBRRH=0x00;
 114:	80 e4       	ldi	r24, 0x40	; 64
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	fc 01       	movw	r30, r24
 11a:	10 82       	st	Z, r1
	char k[50];
	int s=0,d=0;
 11c:	1a 82       	std	Y+2, r1	; 0x02
 11e:	19 82       	std	Y+1, r1	; 0x01
 120:	1c 82       	std	Y+4, r1	; 0x04
 122:	1b 82       	std	Y+3, r1	; 0x03
 124:	03 c0       	rjmp	.+6      	; 0x12c <main+0xaa>
				serialtx("haaaai");
				d=2;
			  }
	
		}	
    }
 126:	00 00       	nop
 128:	01 c0       	rjmp	.+2      	; 0x12c <main+0xaa>
 12a:	00 00       	nop
	UBRRH=0x00;
	char k[50];
	int s=0,d=0;
    while(1)
    {
		if(d==0)
 12c:	8b 81       	ldd	r24, Y+3	; 0x03
 12e:	9c 81       	ldd	r25, Y+4	; 0x04
 130:	00 97       	sbiw	r24, 0x00	; 0
 132:	91 f5       	brne	.+100    	; 0x198 <main+0x116>
		{
 		serialtx("DIAL THE NUMBER");
 134:	80 e6       	ldi	r24, 0x60	; 96
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	0e 94 45 01 	call	0x28a	; 0x28a <serialtx>
 		transmit(0x0d);
 13c:	8d e0       	ldi	r24, 0x0D	; 13
 13e:	0e 94 2b 01 	call	0x256	; 0x256 <transmit>
 		for (s=0;s<10;s++)
 142:	1a 82       	std	Y+2, r1	; 0x02
 144:	19 82       	std	Y+1, r1	; 0x01
 146:	1f c0       	rjmp	.+62     	; 0x186 <main+0x104>
 		{
 			k[s]=keypad();
 148:	0e 94 11 02 	call	0x422	; 0x422 <keypad>
 14c:	48 2f       	mov	r20, r24
 14e:	9e 01       	movw	r18, r28
 150:	2a 5f       	subi	r18, 0xFA	; 250
 152:	3f 4f       	sbci	r19, 0xFF	; 255
 154:	89 81       	ldd	r24, Y+1	; 0x01
 156:	9a 81       	ldd	r25, Y+2	; 0x02
 158:	82 0f       	add	r24, r18
 15a:	93 1f       	adc	r25, r19
 15c:	fc 01       	movw	r30, r24
 15e:	40 83       	st	Z, r20
 			transmit(k[s]);
 160:	9e 01       	movw	r18, r28
 162:	2a 5f       	subi	r18, 0xFA	; 250
 164:	3f 4f       	sbci	r19, 0xFF	; 255
 166:	89 81       	ldd	r24, Y+1	; 0x01
 168:	9a 81       	ldd	r25, Y+2	; 0x02
 16a:	82 0f       	add	r24, r18
 16c:	93 1f       	adc	r25, r19
 16e:	fc 01       	movw	r30, r24
 170:	80 81       	ld	r24, Z
 172:	0e 94 2b 01 	call	0x256	; 0x256 <transmit>
 			delay(30);
 176:	8e e1       	ldi	r24, 0x1E	; 30
 178:	0e 94 67 01 	call	0x2ce	; 0x2ce <delay>
    {
		if(d==0)
		{
 		serialtx("DIAL THE NUMBER");
 		transmit(0x0d);
 		for (s=0;s<10;s++)
 17c:	89 81       	ldd	r24, Y+1	; 0x01
 17e:	9a 81       	ldd	r25, Y+2	; 0x02
 180:	01 96       	adiw	r24, 0x01	; 1
 182:	9a 83       	std	Y+2, r25	; 0x02
 184:	89 83       	std	Y+1, r24	; 0x01
 186:	89 81       	ldd	r24, Y+1	; 0x01
 188:	9a 81       	ldd	r25, Y+2	; 0x02
 18a:	8a 30       	cpi	r24, 0x0A	; 10
 18c:	91 05       	cpc	r25, r1
 18e:	e4 f2       	brlt	.-72     	; 0x148 <main+0xc6>
 		{
 			k[s]=keypad();
 			transmit(k[s]);
 			delay(30);
 		}
		d=1;
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	9c 83       	std	Y+4, r25	; 0x04
 196:	8b 83       	std	Y+3, r24	; 0x03
		}		
		if(d==1)
 198:	8b 81       	ldd	r24, Y+3	; 0x03
 19a:	9c 81       	ldd	r25, Y+4	; 0x04
 19c:	81 30       	cpi	r24, 0x01	; 1
 19e:	91 05       	cpc	r25, r1
 1a0:	11 f6       	brne	.-124    	; 0x126 <main+0xa4>
		{
			
				char i=PINB;
 1a2:	86 e3       	ldi	r24, 0x36	; 54
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	fc 01       	movw	r30, r24
 1a8:	80 81       	ld	r24, Z
 1aa:	8d 83       	std	Y+5, r24	; 0x05
				i=i&0xff;
			  if(i==0xfe)
 1ac:	8d 81       	ldd	r24, Y+5	; 0x05
 1ae:	8e 3f       	cpi	r24, 0xFE	; 254
 1b0:	09 f0       	breq	.+2      	; 0x1b4 <main+0x132>
 1b2:	bb cf       	rjmp	.-138    	; 0x12a <main+0xa8>
			  {
				transmit(0x0d);
 1b4:	8d e0       	ldi	r24, 0x0D	; 13
 1b6:	0e 94 2b 01 	call	0x256	; 0x256 <transmit>
				serialtx("AT+CMGS=");
 1ba:	80 e7       	ldi	r24, 0x70	; 112
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	0e 94 45 01 	call	0x28a	; 0x28a <serialtx>
				serialtx("\"");
 1c2:	89 e7       	ldi	r24, 0x79	; 121
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	0e 94 45 01 	call	0x28a	; 0x28a <serialtx>
				for (s=0;s<10;s++)
 1ca:	1a 82       	std	Y+2, r1	; 0x02
 1cc:	19 82       	std	Y+1, r1	; 0x01
 1ce:	13 c0       	rjmp	.+38     	; 0x1f6 <main+0x174>
				{
					transmit(k[s]);
 1d0:	9e 01       	movw	r18, r28
 1d2:	2a 5f       	subi	r18, 0xFA	; 250
 1d4:	3f 4f       	sbci	r19, 0xFF	; 255
 1d6:	89 81       	ldd	r24, Y+1	; 0x01
 1d8:	9a 81       	ldd	r25, Y+2	; 0x02
 1da:	82 0f       	add	r24, r18
 1dc:	93 1f       	adc	r25, r19
 1de:	fc 01       	movw	r30, r24
 1e0:	80 81       	ld	r24, Z
 1e2:	0e 94 2b 01 	call	0x256	; 0x256 <transmit>
					delay(10);
 1e6:	8a e0       	ldi	r24, 0x0A	; 10
 1e8:	0e 94 67 01 	call	0x2ce	; 0x2ce <delay>
			  if(i==0xfe)
			  {
				transmit(0x0d);
				serialtx("AT+CMGS=");
				serialtx("\"");
				for (s=0;s<10;s++)
 1ec:	89 81       	ldd	r24, Y+1	; 0x01
 1ee:	9a 81       	ldd	r25, Y+2	; 0x02
 1f0:	01 96       	adiw	r24, 0x01	; 1
 1f2:	9a 83       	std	Y+2, r25	; 0x02
 1f4:	89 83       	std	Y+1, r24	; 0x01
 1f6:	89 81       	ldd	r24, Y+1	; 0x01
 1f8:	9a 81       	ldd	r25, Y+2	; 0x02
 1fa:	8a 30       	cpi	r24, 0x0A	; 10
 1fc:	91 05       	cpc	r25, r1
 1fe:	44 f3       	brlt	.-48     	; 0x1d0 <main+0x14e>
				{
					transmit(k[s]);
					delay(10);
				}
				serialtx("\"");
 200:	89 e7       	ldi	r24, 0x79	; 121
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	0e 94 45 01 	call	0x28a	; 0x28a <serialtx>
				transmit(0x0d);
 208:	8d e0       	ldi	r24, 0x0D	; 13
 20a:	0e 94 2b 01 	call	0x256	; 0x256 <transmit>
				serialtx("haaaai");
 20e:	8b e7       	ldi	r24, 0x7B	; 123
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	0e 94 45 01 	call	0x28a	; 0x28a <serialtx>
				d=2;
 216:	82 e0       	ldi	r24, 0x02	; 2
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	9c 83       	std	Y+4, r25	; 0x04
 21c:	8b 83       	std	Y+3, r24	; 0x03
			  }
	
		}	
    }
 21e:	86 cf       	rjmp	.-244    	; 0x12c <main+0xaa>

00000220 <receive>:
}
char receive()
{
 220:	df 93       	push	r29
 222:	cf 93       	push	r28
 224:	cd b7       	in	r28, 0x3d	; 61
 226:	de b7       	in	r29, 0x3e	; 62
	UCSRA&=~(1<<RXC);
 228:	8b e2       	ldi	r24, 0x2B	; 43
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	2b e2       	ldi	r18, 0x2B	; 43
 22e:	30 e0       	ldi	r19, 0x00	; 0
 230:	f9 01       	movw	r30, r18
 232:	20 81       	ld	r18, Z
 234:	2f 77       	andi	r18, 0x7F	; 127
 236:	fc 01       	movw	r30, r24
 238:	20 83       	st	Z, r18
	while((UCSRA&(1<<RXC))==0);
 23a:	00 00       	nop
 23c:	8b e2       	ldi	r24, 0x2B	; 43
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	fc 01       	movw	r30, r24
 242:	80 81       	ld	r24, Z
 244:	88 23       	and	r24, r24
 246:	d4 f7       	brge	.-12     	; 0x23c <receive+0x1c>
	return(UDR);
 248:	8c e2       	ldi	r24, 0x2C	; 44
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	fc 01       	movw	r30, r24
 24e:	80 81       	ld	r24, Z
}
 250:	cf 91       	pop	r28
 252:	df 91       	pop	r29
 254:	08 95       	ret

00000256 <transmit>:
void transmit(char t)
{
 256:	df 93       	push	r29
 258:	cf 93       	push	r28
 25a:	0f 92       	push	r0
 25c:	cd b7       	in	r28, 0x3d	; 61
 25e:	de b7       	in	r29, 0x3e	; 62
 260:	89 83       	std	Y+1, r24	; 0x01
	UDR=t;
 262:	8c e2       	ldi	r24, 0x2C	; 44
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	29 81       	ldd	r18, Y+1	; 0x01
 268:	fc 01       	movw	r30, r24
 26a:	20 83       	st	Z, r18
	while((UCSRA&(1<<UDRE))==0x00);
 26c:	00 00       	nop
 26e:	8b e2       	ldi	r24, 0x2B	; 43
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	fc 01       	movw	r30, r24
 274:	80 81       	ld	r24, Z
 276:	88 2f       	mov	r24, r24
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	80 72       	andi	r24, 0x20	; 32
 27c:	90 70       	andi	r25, 0x00	; 0
 27e:	00 97       	sbiw	r24, 0x00	; 0
 280:	b1 f3       	breq	.-20     	; 0x26e <transmit+0x18>
}
 282:	0f 90       	pop	r0
 284:	cf 91       	pop	r28
 286:	df 91       	pop	r29
 288:	08 95       	ret

0000028a <serialtx>:
void serialtx(const char*p)
{
 28a:	df 93       	push	r29
 28c:	cf 93       	push	r28
 28e:	00 d0       	rcall	.+0      	; 0x290 <serialtx+0x6>
 290:	cd b7       	in	r28, 0x3d	; 61
 292:	de b7       	in	r29, 0x3e	; 62
 294:	9a 83       	std	Y+2, r25	; 0x02
 296:	89 83       	std	Y+1, r24	; 0x01
	while(*p)
 298:	0f c0       	rjmp	.+30     	; 0x2b8 <serialtx+0x2e>
	{
		transmit(*p++);
 29a:	89 81       	ldd	r24, Y+1	; 0x01
 29c:	9a 81       	ldd	r25, Y+2	; 0x02
 29e:	fc 01       	movw	r30, r24
 2a0:	20 81       	ld	r18, Z
 2a2:	89 81       	ldd	r24, Y+1	; 0x01
 2a4:	9a 81       	ldd	r25, Y+2	; 0x02
 2a6:	01 96       	adiw	r24, 0x01	; 1
 2a8:	9a 83       	std	Y+2, r25	; 0x02
 2aa:	89 83       	std	Y+1, r24	; 0x01
 2ac:	82 2f       	mov	r24, r18
 2ae:	0e 94 2b 01 	call	0x256	; 0x256 <transmit>
		delay(2);
 2b2:	82 e0       	ldi	r24, 0x02	; 2
 2b4:	0e 94 67 01 	call	0x2ce	; 0x2ce <delay>
	UDR=t;
	while((UCSRA&(1<<UDRE))==0x00);
}
void serialtx(const char*p)
{
	while(*p)
 2b8:	89 81       	ldd	r24, Y+1	; 0x01
 2ba:	9a 81       	ldd	r25, Y+2	; 0x02
 2bc:	fc 01       	movw	r30, r24
 2be:	80 81       	ld	r24, Z
 2c0:	88 23       	and	r24, r24
 2c2:	59 f7       	brne	.-42     	; 0x29a <serialtx+0x10>
	{
		transmit(*p++);
		delay(2);
	}
}
 2c4:	0f 90       	pop	r0
 2c6:	0f 90       	pop	r0
 2c8:	cf 91       	pop	r28
 2ca:	df 91       	pop	r29
 2cc:	08 95       	ret

000002ce <delay>:
void delay(char x)
{
 2ce:	df 93       	push	r29
 2d0:	cf 93       	push	r28
 2d2:	00 d0       	rcall	.+0      	; 0x2d4 <delay+0x6>
 2d4:	00 d0       	rcall	.+0      	; 0x2d6 <delay+0x8>
 2d6:	0f 92       	push	r0
 2d8:	cd b7       	in	r28, 0x3d	; 61
 2da:	de b7       	in	r29, 0x3e	; 62
 2dc:	8d 83       	std	Y+5, r24	; 0x05
	int i,j;
	for(i=0;i<=x;i++)
 2de:	1a 82       	std	Y+2, r1	; 0x02
 2e0:	19 82       	std	Y+1, r1	; 0x01
 2e2:	13 c0       	rjmp	.+38     	; 0x30a <delay+0x3c>
	for(j=0;j<=1000;j++);
 2e4:	1c 82       	std	Y+4, r1	; 0x04
 2e6:	1b 82       	std	Y+3, r1	; 0x03
 2e8:	05 c0       	rjmp	.+10     	; 0x2f4 <delay+0x26>
 2ea:	8b 81       	ldd	r24, Y+3	; 0x03
 2ec:	9c 81       	ldd	r25, Y+4	; 0x04
 2ee:	01 96       	adiw	r24, 0x01	; 1
 2f0:	9c 83       	std	Y+4, r25	; 0x04
 2f2:	8b 83       	std	Y+3, r24	; 0x03
 2f4:	8b 81       	ldd	r24, Y+3	; 0x03
 2f6:	9c 81       	ldd	r25, Y+4	; 0x04
 2f8:	23 e0       	ldi	r18, 0x03	; 3
 2fa:	89 3e       	cpi	r24, 0xE9	; 233
 2fc:	92 07       	cpc	r25, r18
 2fe:	ac f3       	brlt	.-22     	; 0x2ea <delay+0x1c>
	}
}
void delay(char x)
{
	int i,j;
	for(i=0;i<=x;i++)
 300:	89 81       	ldd	r24, Y+1	; 0x01
 302:	9a 81       	ldd	r25, Y+2	; 0x02
 304:	01 96       	adiw	r24, 0x01	; 1
 306:	9a 83       	std	Y+2, r25	; 0x02
 308:	89 83       	std	Y+1, r24	; 0x01
 30a:	8d 81       	ldd	r24, Y+5	; 0x05
 30c:	28 2f       	mov	r18, r24
 30e:	30 e0       	ldi	r19, 0x00	; 0
 310:	89 81       	ldd	r24, Y+1	; 0x01
 312:	9a 81       	ldd	r25, Y+2	; 0x02
 314:	28 17       	cp	r18, r24
 316:	39 07       	cpc	r19, r25
 318:	2c f7       	brge	.-54     	; 0x2e4 <delay+0x16>
	for(j=0;j<=1000;j++);
}
 31a:	0f 90       	pop	r0
 31c:	0f 90       	pop	r0
 31e:	0f 90       	pop	r0
 320:	0f 90       	pop	r0
 322:	0f 90       	pop	r0
 324:	cf 91       	pop	r28
 326:	df 91       	pop	r29
 328:	08 95       	ret

0000032a <command>:
void command(char c)
{
 32a:	df 93       	push	r29
 32c:	cf 93       	push	r28
 32e:	0f 92       	push	r0
 330:	cd b7       	in	r28, 0x3d	; 61
 332:	de b7       	in	r29, 0x3e	; 62
 334:	89 83       	std	Y+1, r24	; 0x01
	PORTC=c;
 336:	85 e3       	ldi	r24, 0x35	; 53
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	29 81       	ldd	r18, Y+1	; 0x01
 33c:	fc 01       	movw	r30, r24
 33e:	20 83       	st	Z, r18
	PORTD&=~(1<<6);
 340:	82 e3       	ldi	r24, 0x32	; 50
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	22 e3       	ldi	r18, 0x32	; 50
 346:	30 e0       	ldi	r19, 0x00	; 0
 348:	f9 01       	movw	r30, r18
 34a:	20 81       	ld	r18, Z
 34c:	2f 7b       	andi	r18, 0xBF	; 191
 34e:	fc 01       	movw	r30, r24
 350:	20 83       	st	Z, r18
	PORTD|=(1<<7);
 352:	82 e3       	ldi	r24, 0x32	; 50
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	22 e3       	ldi	r18, 0x32	; 50
 358:	30 e0       	ldi	r19, 0x00	; 0
 35a:	f9 01       	movw	r30, r18
 35c:	20 81       	ld	r18, Z
 35e:	20 68       	ori	r18, 0x80	; 128
 360:	fc 01       	movw	r30, r24
 362:	20 83       	st	Z, r18
	delay(2);
 364:	82 e0       	ldi	r24, 0x02	; 2
 366:	0e 94 67 01 	call	0x2ce	; 0x2ce <delay>
	PORTD&=~(1<<7);
 36a:	82 e3       	ldi	r24, 0x32	; 50
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	22 e3       	ldi	r18, 0x32	; 50
 370:	30 e0       	ldi	r19, 0x00	; 0
 372:	f9 01       	movw	r30, r18
 374:	20 81       	ld	r18, Z
 376:	2f 77       	andi	r18, 0x7F	; 127
 378:	fc 01       	movw	r30, r24
 37a:	20 83       	st	Z, r18
}
 37c:	0f 90       	pop	r0
 37e:	cf 91       	pop	r28
 380:	df 91       	pop	r29
 382:	08 95       	ret

00000384 <data>:
void data(char d)
{
 384:	df 93       	push	r29
 386:	cf 93       	push	r28
 388:	0f 92       	push	r0
 38a:	cd b7       	in	r28, 0x3d	; 61
 38c:	de b7       	in	r29, 0x3e	; 62
 38e:	89 83       	std	Y+1, r24	; 0x01
	PORTC=d;
 390:	85 e3       	ldi	r24, 0x35	; 53
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	29 81       	ldd	r18, Y+1	; 0x01
 396:	fc 01       	movw	r30, r24
 398:	20 83       	st	Z, r18
	PORTD|=(1<<6);
 39a:	82 e3       	ldi	r24, 0x32	; 50
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	22 e3       	ldi	r18, 0x32	; 50
 3a0:	30 e0       	ldi	r19, 0x00	; 0
 3a2:	f9 01       	movw	r30, r18
 3a4:	20 81       	ld	r18, Z
 3a6:	20 64       	ori	r18, 0x40	; 64
 3a8:	fc 01       	movw	r30, r24
 3aa:	20 83       	st	Z, r18
	PORTD|=(1<<7);
 3ac:	82 e3       	ldi	r24, 0x32	; 50
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	22 e3       	ldi	r18, 0x32	; 50
 3b2:	30 e0       	ldi	r19, 0x00	; 0
 3b4:	f9 01       	movw	r30, r18
 3b6:	20 81       	ld	r18, Z
 3b8:	20 68       	ori	r18, 0x80	; 128
 3ba:	fc 01       	movw	r30, r24
 3bc:	20 83       	st	Z, r18
	delay(2);
 3be:	82 e0       	ldi	r24, 0x02	; 2
 3c0:	0e 94 67 01 	call	0x2ce	; 0x2ce <delay>
	PORTD&=~(1<<7);
 3c4:	82 e3       	ldi	r24, 0x32	; 50
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	22 e3       	ldi	r18, 0x32	; 50
 3ca:	30 e0       	ldi	r19, 0x00	; 0
 3cc:	f9 01       	movw	r30, r18
 3ce:	20 81       	ld	r18, Z
 3d0:	2f 77       	andi	r18, 0x7F	; 127
 3d2:	fc 01       	movw	r30, r24
 3d4:	20 83       	st	Z, r18
}
 3d6:	0f 90       	pop	r0
 3d8:	cf 91       	pop	r28
 3da:	df 91       	pop	r29
 3dc:	08 95       	ret

000003de <display>:
void display (const char *s)
{
 3de:	df 93       	push	r29
 3e0:	cf 93       	push	r28
 3e2:	00 d0       	rcall	.+0      	; 0x3e4 <display+0x6>
 3e4:	cd b7       	in	r28, 0x3d	; 61
 3e6:	de b7       	in	r29, 0x3e	; 62
 3e8:	9a 83       	std	Y+2, r25	; 0x02
 3ea:	89 83       	std	Y+1, r24	; 0x01
	while(*s)
 3ec:	0f c0       	rjmp	.+30     	; 0x40c <display+0x2e>
	{
		data(*s++);
 3ee:	89 81       	ldd	r24, Y+1	; 0x01
 3f0:	9a 81       	ldd	r25, Y+2	; 0x02
 3f2:	fc 01       	movw	r30, r24
 3f4:	20 81       	ld	r18, Z
 3f6:	89 81       	ldd	r24, Y+1	; 0x01
 3f8:	9a 81       	ldd	r25, Y+2	; 0x02
 3fa:	01 96       	adiw	r24, 0x01	; 1
 3fc:	9a 83       	std	Y+2, r25	; 0x02
 3fe:	89 83       	std	Y+1, r24	; 0x01
 400:	82 2f       	mov	r24, r18
 402:	0e 94 c2 01 	call	0x384	; 0x384 <data>
		delay(2);
 406:	82 e0       	ldi	r24, 0x02	; 2
 408:	0e 94 67 01 	call	0x2ce	; 0x2ce <delay>
	delay(2);
	PORTD&=~(1<<7);
}
void display (const char *s)
{
	while(*s)
 40c:	89 81       	ldd	r24, Y+1	; 0x01
 40e:	9a 81       	ldd	r25, Y+2	; 0x02
 410:	fc 01       	movw	r30, r24
 412:	80 81       	ld	r24, Z
 414:	88 23       	and	r24, r24
 416:	59 f7       	brne	.-42     	; 0x3ee <display+0x10>
	{
		data(*s++);
		delay(2);
	}
}
 418:	0f 90       	pop	r0
 41a:	0f 90       	pop	r0
 41c:	cf 91       	pop	r28
 41e:	df 91       	pop	r29
 420:	08 95       	ret

00000422 <keypad>:
  char keypad()
	   {
 422:	df 93       	push	r29
 424:	cf 93       	push	r28
 426:	00 d0       	rcall	.+0      	; 0x428 <keypad+0x6>
 428:	00 d0       	rcall	.+0      	; 0x42a <keypad+0x8>
 42a:	cd b7       	in	r28, 0x3d	; 61
 42c:	de b7       	in	r29, 0x3e	; 62
	  	 delay(70);
 42e:	86 e4       	ldi	r24, 0x46	; 70
 430:	0e 94 67 01 	call	0x2ce	; 0x2ce <delay>
	  	 char f=0,h;
 434:	19 82       	std	Y+1, r1	; 0x01
 436:	01 c0       	rjmp	.+2      	; 0x43a <keypad+0x18>
	  				f=1;
	  			}
	  									
	  			if(f==1)
	  			return(h);
	  		}
 438:	00 00       	nop
	  	 int i;
	  	 
	  	 while(1)
	  	 {
	  		
	  		PORTA=0x7F;
 43a:	8b e3       	ldi	r24, 0x3B	; 59
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	2f e7       	ldi	r18, 0x7F	; 127
 440:	fc 01       	movw	r30, r24
 442:	20 83       	st	Z, r18
	  		i=PINA;
 444:	89 e3       	ldi	r24, 0x39	; 57
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	fc 01       	movw	r30, r24
 44a:	80 81       	ld	r24, Z
 44c:	88 2f       	mov	r24, r24
 44e:	90 e0       	ldi	r25, 0x00	; 0
 450:	9c 83       	std	Y+4, r25	; 0x04
 452:	8b 83       	std	Y+3, r24	; 0x03
	  		i=i&0X0F;
 454:	8b 81       	ldd	r24, Y+3	; 0x03
 456:	9c 81       	ldd	r25, Y+4	; 0x04
 458:	8f 70       	andi	r24, 0x0F	; 15
 45a:	90 70       	andi	r25, 0x00	; 0
 45c:	9c 83       	std	Y+4, r25	; 0x04
 45e:	8b 83       	std	Y+3, r24	; 0x03
	  		if(i==0x0E)
 460:	8b 81       	ldd	r24, Y+3	; 0x03
 462:	9c 81       	ldd	r25, Y+4	; 0x04
 464:	8e 30       	cpi	r24, 0x0E	; 14
 466:	91 05       	cpc	r25, r1
 468:	21 f4       	brne	.+8      	; 0x472 <__stack+0x13>
	  		{
	  			h='/';
 46a:	8f e2       	ldi	r24, 0x2F	; 47
 46c:	8a 83       	std	Y+2, r24	; 0x02
	  			f=1;
 46e:	81 e0       	ldi	r24, 0x01	; 1
 470:	89 83       	std	Y+1, r24	; 0x01
	  				
	  			}
	  		 if(i==0x0D)
 472:	8b 81       	ldd	r24, Y+3	; 0x03
 474:	9c 81       	ldd	r25, Y+4	; 0x04
 476:	8d 30       	cpi	r24, 0x0D	; 13
 478:	91 05       	cpc	r25, r1
 47a:	21 f4       	brne	.+8      	; 0x484 <__stack+0x25>
	  			{
	  				h='*';
 47c:	8a e2       	ldi	r24, 0x2A	; 42
 47e:	8a 83       	std	Y+2, r24	; 0x02
	  				f=1;
 480:	81 e0       	ldi	r24, 0x01	; 1
 482:	89 83       	std	Y+1, r24	; 0x01
	  			}
	  		 if(i==0X0B)
 484:	8b 81       	ldd	r24, Y+3	; 0x03
 486:	9c 81       	ldd	r25, Y+4	; 0x04
 488:	8b 30       	cpi	r24, 0x0B	; 11
 48a:	91 05       	cpc	r25, r1
 48c:	21 f4       	brne	.+8      	; 0x496 <__stack+0x37>
	  			{
	  				h='-';
 48e:	8d e2       	ldi	r24, 0x2D	; 45
 490:	8a 83       	std	Y+2, r24	; 0x02
	  				f=1;
 492:	81 e0       	ldi	r24, 0x01	; 1
 494:	89 83       	std	Y+1, r24	; 0x01
	  			}
	  		 if(i==0x07)
 496:	8b 81       	ldd	r24, Y+3	; 0x03
 498:	9c 81       	ldd	r25, Y+4	; 0x04
 49a:	87 30       	cpi	r24, 0x07	; 7
 49c:	91 05       	cpc	r25, r1
 49e:	21 f4       	brne	.+8      	; 0x4a8 <__stack+0x49>
	  			{
	  				h='+';
 4a0:	8b e2       	ldi	r24, 0x2B	; 43
 4a2:	8a 83       	std	Y+2, r24	; 0x02
	  				f=1;
 4a4:	81 e0       	ldi	r24, 0x01	; 1
 4a6:	89 83       	std	Y+1, r24	; 0x01
	  			}
	  							
	  	PORTA=0xBF;
 4a8:	8b e3       	ldi	r24, 0x3B	; 59
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	2f eb       	ldi	r18, 0xBF	; 191
 4ae:	fc 01       	movw	r30, r24
 4b0:	20 83       	st	Z, r18
	  		i=PINA;
 4b2:	89 e3       	ldi	r24, 0x39	; 57
 4b4:	90 e0       	ldi	r25, 0x00	; 0
 4b6:	fc 01       	movw	r30, r24
 4b8:	80 81       	ld	r24, Z
 4ba:	88 2f       	mov	r24, r24
 4bc:	90 e0       	ldi	r25, 0x00	; 0
 4be:	9c 83       	std	Y+4, r25	; 0x04
 4c0:	8b 83       	std	Y+3, r24	; 0x03
	  		i=i&0X0F;
 4c2:	8b 81       	ldd	r24, Y+3	; 0x03
 4c4:	9c 81       	ldd	r25, Y+4	; 0x04
 4c6:	8f 70       	andi	r24, 0x0F	; 15
 4c8:	90 70       	andi	r25, 0x00	; 0
 4ca:	9c 83       	std	Y+4, r25	; 0x04
 4cc:	8b 83       	std	Y+3, r24	; 0x03
	  		if(i==0x0E)
 4ce:	8b 81       	ldd	r24, Y+3	; 0x03
 4d0:	9c 81       	ldd	r25, Y+4	; 0x04
 4d2:	8e 30       	cpi	r24, 0x0E	; 14
 4d4:	91 05       	cpc	r25, r1
 4d6:	21 f4       	brne	.+8      	; 0x4e0 <__stack+0x81>
	  		{
	  			h='9';
 4d8:	89 e3       	ldi	r24, 0x39	; 57
 4da:	8a 83       	std	Y+2, r24	; 0x02
	  			f=1;
 4dc:	81 e0       	ldi	r24, 0x01	; 1
 4de:	89 83       	std	Y+1, r24	; 0x01
	  				
	  			}
	  			 if(i==0x0D)
 4e0:	8b 81       	ldd	r24, Y+3	; 0x03
 4e2:	9c 81       	ldd	r25, Y+4	; 0x04
 4e4:	8d 30       	cpi	r24, 0x0D	; 13
 4e6:	91 05       	cpc	r25, r1
 4e8:	21 f4       	brne	.+8      	; 0x4f2 <__stack+0x93>
	  			{
	  				h='6';
 4ea:	86 e3       	ldi	r24, 0x36	; 54
 4ec:	8a 83       	std	Y+2, r24	; 0x02
	  				f=1;
 4ee:	81 e0       	ldi	r24, 0x01	; 1
 4f0:	89 83       	std	Y+1, r24	; 0x01
	  				
	  			}
	  			if(i==0X0B)
 4f2:	8b 81       	ldd	r24, Y+3	; 0x03
 4f4:	9c 81       	ldd	r25, Y+4	; 0x04
 4f6:	8b 30       	cpi	r24, 0x0B	; 11
 4f8:	91 05       	cpc	r25, r1
 4fa:	21 f4       	brne	.+8      	; 0x504 <__stack+0xa5>
	  			{
	  				h='3';
 4fc:	83 e3       	ldi	r24, 0x33	; 51
 4fe:	8a 83       	std	Y+2, r24	; 0x02
	  				f=1;
 500:	81 e0       	ldi	r24, 0x01	; 1
 502:	89 83       	std	Y+1, r24	; 0x01
	  				
	  			}
	  			if(i==0x07)
 504:	8b 81       	ldd	r24, Y+3	; 0x03
 506:	9c 81       	ldd	r25, Y+4	; 0x04
 508:	87 30       	cpi	r24, 0x07	; 7
 50a:	91 05       	cpc	r25, r1
 50c:	21 f4       	brne	.+8      	; 0x516 <__stack+0xb7>
	  			{
	  				h='=';
 50e:	8d e3       	ldi	r24, 0x3D	; 61
 510:	8a 83       	std	Y+2, r24	; 0x02
	  				f=1;
 512:	81 e0       	ldi	r24, 0x01	; 1
 514:	89 83       	std	Y+1, r24	; 0x01
	  				
	  			}
	  	PORTA=0xDF;
 516:	8b e3       	ldi	r24, 0x3B	; 59
 518:	90 e0       	ldi	r25, 0x00	; 0
 51a:	2f ed       	ldi	r18, 0xDF	; 223
 51c:	fc 01       	movw	r30, r24
 51e:	20 83       	st	Z, r18
	  		i=PINA;
 520:	89 e3       	ldi	r24, 0x39	; 57
 522:	90 e0       	ldi	r25, 0x00	; 0
 524:	fc 01       	movw	r30, r24
 526:	80 81       	ld	r24, Z
 528:	88 2f       	mov	r24, r24
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	9c 83       	std	Y+4, r25	; 0x04
 52e:	8b 83       	std	Y+3, r24	; 0x03
	  		i=i&0X0F;
 530:	8b 81       	ldd	r24, Y+3	; 0x03
 532:	9c 81       	ldd	r25, Y+4	; 0x04
 534:	8f 70       	andi	r24, 0x0F	; 15
 536:	90 70       	andi	r25, 0x00	; 0
 538:	9c 83       	std	Y+4, r25	; 0x04
 53a:	8b 83       	std	Y+3, r24	; 0x03
	  		if(i==0x0E)
 53c:	8b 81       	ldd	r24, Y+3	; 0x03
 53e:	9c 81       	ldd	r25, Y+4	; 0x04
 540:	8e 30       	cpi	r24, 0x0E	; 14
 542:	91 05       	cpc	r25, r1
 544:	21 f4       	brne	.+8      	; 0x54e <__stack+0xef>
	  		{
	  			h='8';
 546:	88 e3       	ldi	r24, 0x38	; 56
 548:	8a 83       	std	Y+2, r24	; 0x02
	  			f=1;
 54a:	81 e0       	ldi	r24, 0x01	; 1
 54c:	89 83       	std	Y+1, r24	; 0x01
	  			
	  			}
	  			 if(i==0x0D)
 54e:	8b 81       	ldd	r24, Y+3	; 0x03
 550:	9c 81       	ldd	r25, Y+4	; 0x04
 552:	8d 30       	cpi	r24, 0x0D	; 13
 554:	91 05       	cpc	r25, r1
 556:	21 f4       	brne	.+8      	; 0x560 <__stack+0x101>
	  			{
	  				h='5';
 558:	85 e3       	ldi	r24, 0x35	; 53
 55a:	8a 83       	std	Y+2, r24	; 0x02
	  				f=1;
 55c:	81 e0       	ldi	r24, 0x01	; 1
 55e:	89 83       	std	Y+1, r24	; 0x01
	  				
	  			}
	  			 if(i==0X0B)
 560:	8b 81       	ldd	r24, Y+3	; 0x03
 562:	9c 81       	ldd	r25, Y+4	; 0x04
 564:	8b 30       	cpi	r24, 0x0B	; 11
 566:	91 05       	cpc	r25, r1
 568:	21 f4       	brne	.+8      	; 0x572 <__stack+0x113>
	  			{
	  				h='2';
 56a:	82 e3       	ldi	r24, 0x32	; 50
 56c:	8a 83       	std	Y+2, r24	; 0x02
	  				f=1;
 56e:	81 e0       	ldi	r24, 0x01	; 1
 570:	89 83       	std	Y+1, r24	; 0x01
	  			}
	  			 if(i==0x07)
 572:	8b 81       	ldd	r24, Y+3	; 0x03
 574:	9c 81       	ldd	r25, Y+4	; 0x04
 576:	87 30       	cpi	r24, 0x07	; 7
 578:	91 05       	cpc	r25, r1
 57a:	21 f4       	brne	.+8      	; 0x584 <__stack+0x125>
	  			{
	  				h='0';
 57c:	80 e3       	ldi	r24, 0x30	; 48
 57e:	8a 83       	std	Y+2, r24	; 0x02
	  				f=1;
 580:	81 e0       	ldi	r24, 0x01	; 1
 582:	89 83       	std	Y+1, r24	; 0x01
	  			}
	  							
	  	
	  	PORTA=0xEF;
 584:	8b e3       	ldi	r24, 0x3B	; 59
 586:	90 e0       	ldi	r25, 0x00	; 0
 588:	2f ee       	ldi	r18, 0xEF	; 239
 58a:	fc 01       	movw	r30, r24
 58c:	20 83       	st	Z, r18
	  		i=PINA;
 58e:	89 e3       	ldi	r24, 0x39	; 57
 590:	90 e0       	ldi	r25, 0x00	; 0
 592:	fc 01       	movw	r30, r24
 594:	80 81       	ld	r24, Z
 596:	88 2f       	mov	r24, r24
 598:	90 e0       	ldi	r25, 0x00	; 0
 59a:	9c 83       	std	Y+4, r25	; 0x04
 59c:	8b 83       	std	Y+3, r24	; 0x03
	  		i=i&0X0F;
 59e:	8b 81       	ldd	r24, Y+3	; 0x03
 5a0:	9c 81       	ldd	r25, Y+4	; 0x04
 5a2:	8f 70       	andi	r24, 0x0F	; 15
 5a4:	90 70       	andi	r25, 0x00	; 0
 5a6:	9c 83       	std	Y+4, r25	; 0x04
 5a8:	8b 83       	std	Y+3, r24	; 0x03
	  		if(i==0x0E)
 5aa:	8b 81       	ldd	r24, Y+3	; 0x03
 5ac:	9c 81       	ldd	r25, Y+4	; 0x04
 5ae:	8e 30       	cpi	r24, 0x0E	; 14
 5b0:	91 05       	cpc	r25, r1
 5b2:	21 f4       	brne	.+8      	; 0x5bc <__stack+0x15d>
	  		{
	  			h='7';
 5b4:	87 e3       	ldi	r24, 0x37	; 55
 5b6:	8a 83       	std	Y+2, r24	; 0x02
	  			f=1;
 5b8:	81 e0       	ldi	r24, 0x01	; 1
 5ba:	89 83       	std	Y+1, r24	; 0x01
	  			
	  		}			
	  			if(i==0x0D)
 5bc:	8b 81       	ldd	r24, Y+3	; 0x03
 5be:	9c 81       	ldd	r25, Y+4	; 0x04
 5c0:	8d 30       	cpi	r24, 0x0D	; 13
 5c2:	91 05       	cpc	r25, r1
 5c4:	21 f4       	brne	.+8      	; 0x5ce <__stack+0x16f>
	  			{
	  				h='4';
 5c6:	84 e3       	ldi	r24, 0x34	; 52
 5c8:	8a 83       	std	Y+2, r24	; 0x02
	  				f=1;
 5ca:	81 e0       	ldi	r24, 0x01	; 1
 5cc:	89 83       	std	Y+1, r24	; 0x01
	  				
	  			}
	  			 if(i==0X0B)
 5ce:	8b 81       	ldd	r24, Y+3	; 0x03
 5d0:	9c 81       	ldd	r25, Y+4	; 0x04
 5d2:	8b 30       	cpi	r24, 0x0B	; 11
 5d4:	91 05       	cpc	r25, r1
 5d6:	21 f4       	brne	.+8      	; 0x5e0 <__stack+0x181>
	  			{
	  				h='1';
 5d8:	81 e3       	ldi	r24, 0x31	; 49
 5da:	8a 83       	std	Y+2, r24	; 0x02
	  				f=1;
 5dc:	81 e0       	ldi	r24, 0x01	; 1
 5de:	89 83       	std	Y+1, r24	; 0x01
	  			   
	  			}
	  			 if(i==0x07)
 5e0:	8b 81       	ldd	r24, Y+3	; 0x03
 5e2:	9c 81       	ldd	r25, Y+4	; 0x04
 5e4:	87 30       	cpi	r24, 0x07	; 7
 5e6:	91 05       	cpc	r25, r1
 5e8:	21 f4       	brne	.+8      	; 0x5f2 <__stack+0x193>
	  			{
	  				h='C';
 5ea:	83 e4       	ldi	r24, 0x43	; 67
 5ec:	8a 83       	std	Y+2, r24	; 0x02
	  				f=1;
 5ee:	81 e0       	ldi	r24, 0x01	; 1
 5f0:	89 83       	std	Y+1, r24	; 0x01
	  			}
	  									
	  			if(f==1)
 5f2:	89 81       	ldd	r24, Y+1	; 0x01
 5f4:	81 30       	cpi	r24, 0x01	; 1
 5f6:	09 f0       	breq	.+2      	; 0x5fa <__stack+0x19b>
 5f8:	1f cf       	rjmp	.-450    	; 0x438 <keypad+0x16>
	  			return(h);
 5fa:	8a 81       	ldd	r24, Y+2	; 0x02
	  		}
	  	 			
 5fc:	0f 90       	pop	r0
 5fe:	0f 90       	pop	r0
 600:	0f 90       	pop	r0
 602:	0f 90       	pop	r0
 604:	cf 91       	pop	r28
 606:	df 91       	pop	r29
 608:	08 95       	ret

0000060a <_exit>:
 60a:	f8 94       	cli

0000060c <__stop_program>:
 60c:	ff cf       	rjmp	.-2      	; 0x60c <__stop_program>
