
adc3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  000005ae  00000642  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  00800072  00800072  00000654  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000654  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000d20  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000020  00000000  00000000  00000da5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000000ca  00000000  00000000  00000dc5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000002fe  00000000  00000000  00000e8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000000c8  00000000  00000000  0000118d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000004be  00000000  00000000  00001255  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000090  00000000  00000000  00001714  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000000a3  00000000  00000000  000017a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 0000001e  00000000  00000000  00001847  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ea       	ldi	r30, 0xAE	; 174
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 37       	cpi	r26, 0x72	; 114
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a2 e7       	ldi	r26, 0x72	; 114
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a1 38       	cpi	r26, 0x81	; 129
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
void adc_1();
void adc_2();
void adc_3();
char b,b1,b2,e1,e2,e3,l,a1=0,a2=0,a3=0,a4=0,a5=0,a6,a7,c=0;
int main(void)
{
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
	
	DDRC=0XFF;
  9a:	84 e3       	ldi	r24, 0x34	; 52
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	2f ef       	ldi	r18, 0xFF	; 255
  a0:	fc 01       	movw	r30, r24
  a2:	20 83       	st	Z, r18
	DDRD=0XFF;
  a4:	81 e3       	ldi	r24, 0x31	; 49
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	2f ef       	ldi	r18, 0xFF	; 255
  aa:	fc 01       	movw	r30, r24
  ac:	20 83       	st	Z, r18
	command(0x38);
  ae:	88 e3       	ldi	r24, 0x38	; 56
  b0:	0e 94 3e 02 	call	0x47c	; 0x47c <command>
	command(0x06);
  b4:	86 e0       	ldi	r24, 0x06	; 6
  b6:	0e 94 3e 02 	call	0x47c	; 0x47c <command>
	command(0x0C);
  ba:	8c e0       	ldi	r24, 0x0C	; 12
  bc:	0e 94 3e 02 	call	0x47c	; 0x47c <command>
	command(0x80);
  c0:	80 e8       	ldi	r24, 0x80	; 128
  c2:	0e 94 3e 02 	call	0x47c	; 0x47c <command>
	command(0x01);
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	0e 94 3e 02 	call	0x47c	; 0x47c <command>
	delay(50);
  cc:	82 e3       	ldi	r24, 0x32	; 50
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	0e 94 9a 02 	call	0x534	; 0x534 <delay>
	ADCSRA=0X87;
  d4:	86 e2       	ldi	r24, 0x26	; 38
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	27 e8       	ldi	r18, 0x87	; 135
  da:	fc 01       	movw	r30, r24
  dc:	20 83       	st	Z, r18
  de:	03 c0       	rjmp	.+6      	; 0xe6 <main+0x54>
			  a1=0;
			  a4=1;
			  command(0xc0);
			  display("        ");
		  }   
	}		 		    			    			  
  e0:	00 00       	nop
  e2:	01 c0       	rjmp	.+2      	; 0xe6 <main+0x54>
  e4:	00 00       	nop
	command(0x01);
	delay(50);
	ADCSRA=0X87;
	while(1)
	{
		 adc_1();
  e6:	0e 94 0a 01 	call	0x214	; 0x214 <adc_1>
		 adc_2();
  ea:	0e 94 67 01 	call	0x2ce	; 0x2ce <adc_2>
		 adc_3();
  ee:	0e 94 c1 01 	call	0x382	; 0x382 <adc_3>
		if(b>200&&a1==0&&a2==0&&a4==0)
  f2:	80 91 78 00 	lds	r24, 0x0078
  f6:	89 3c       	cpi	r24, 0xC9	; 201
  f8:	78 f0       	brcs	.+30     	; 0x118 <main+0x86>
  fa:	80 91 72 00 	lds	r24, 0x0072
  fe:	88 23       	and	r24, r24
 100:	59 f4       	brne	.+22     	; 0x118 <main+0x86>
 102:	80 91 73 00 	lds	r24, 0x0073
 106:	88 23       	and	r24, r24
 108:	39 f4       	brne	.+14     	; 0x118 <main+0x86>
 10a:	80 91 75 00 	lds	r24, 0x0075
 10e:	88 23       	and	r24, r24
 110:	19 f4       	brne	.+6      	; 0x118 <main+0x86>
		  {
			  a1=1;
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	80 93 72 00 	sts	0x0072, r24
		  }
		if(b<200)
 118:	80 91 78 00 	lds	r24, 0x0078
 11c:	88 3c       	cpi	r24, 0xC8	; 200
 11e:	20 f4       	brcc	.+8      	; 0x128 <main+0x96>
		  {
			  a1=0;
 120:	10 92 72 00 	sts	0x0072, r1
			  a4=0;
 124:	10 92 75 00 	sts	0x0075, r1
		  }
		if(b1>200&&a1==1&&a2==0)
 128:	80 91 7a 00 	lds	r24, 0x007A
 12c:	89 3c       	cpi	r24, 0xC9	; 201
 12e:	58 f0       	brcs	.+22     	; 0x146 <main+0xb4>
 130:	80 91 72 00 	lds	r24, 0x0072
 134:	81 30       	cpi	r24, 0x01	; 1
 136:	39 f4       	brne	.+14     	; 0x146 <main+0xb4>
 138:	80 91 73 00 	lds	r24, 0x0073
 13c:	88 23       	and	r24, r24
 13e:	19 f4       	brne	.+6      	; 0x146 <main+0xb4>
		  {
			  a2=1;
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	80 93 73 00 	sts	0x0073, r24
		  }
		 if(b1<200)
 146:	80 91 7a 00 	lds	r24, 0x007A
 14a:	88 3c       	cpi	r24, 0xC8	; 200
 14c:	20 f4       	brcc	.+8      	; 0x156 <main+0xc4>
		  {
			  a2=0;
 14e:	10 92 73 00 	sts	0x0073, r1
			  a4=0;
 152:	10 92 75 00 	sts	0x0075, r1
		  }	
		if(b2>200&&a1==1&&a2==1&&a3==0)
 156:	80 91 79 00 	lds	r24, 0x0079
 15a:	89 3c       	cpi	r24, 0xC9	; 201
 15c:	b0 f0       	brcs	.+44     	; 0x18a <main+0xf8>
 15e:	80 91 72 00 	lds	r24, 0x0072
 162:	81 30       	cpi	r24, 0x01	; 1
 164:	91 f4       	brne	.+36     	; 0x18a <main+0xf8>
 166:	80 91 73 00 	lds	r24, 0x0073
 16a:	81 30       	cpi	r24, 0x01	; 1
 16c:	71 f4       	brne	.+28     	; 0x18a <main+0xf8>
 16e:	80 91 74 00 	lds	r24, 0x0074
 172:	88 23       	and	r24, r24
 174:	51 f4       	brne	.+20     	; 0x18a <main+0xf8>
		  {
			  a3=1;
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	80 93 74 00 	sts	0x0074, r24
			    command(0xc0);
 17c:	80 ec       	ldi	r24, 0xC0	; 192
 17e:	0e 94 3e 02 	call	0x47c	; 0x47c <command>
			  display("Sreenath");
 182:	80 e6       	ldi	r24, 0x60	; 96
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	0e 94 1b 02 	call	0x436	; 0x436 <display>
		  }  
		if(b1>200&&b<200)
 18a:	80 91 7a 00 	lds	r24, 0x007A
 18e:	89 3c       	cpi	r24, 0xC9	; 201
 190:	90 f0       	brcs	.+36     	; 0x1b6 <main+0x124>
 192:	80 91 78 00 	lds	r24, 0x0078
 196:	88 3c       	cpi	r24, 0xC8	; 200
 198:	70 f4       	brcc	.+28     	; 0x1b6 <main+0x124>
		  {
			  a2=0;
 19a:	10 92 73 00 	sts	0x0073, r1
			  a1=0;
 19e:	10 92 72 00 	sts	0x0072, r1
			  a4=1;
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	80 93 75 00 	sts	0x0075, r24
			  command(0xc0);
 1a8:	80 ec       	ldi	r24, 0xC0	; 192
 1aa:	0e 94 3e 02 	call	0x47c	; 0x47c <command>
			  display("        ");
 1ae:	89 e6       	ldi	r24, 0x69	; 105
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	0e 94 1b 02 	call	0x436	; 0x436 <display>
		  }
		if(b2>200&&b<200)
 1b6:	80 91 79 00 	lds	r24, 0x0079
 1ba:	89 3c       	cpi	r24, 0xC9	; 201
 1bc:	90 f0       	brcs	.+36     	; 0x1e2 <main+0x150>
 1be:	80 91 78 00 	lds	r24, 0x0078
 1c2:	88 3c       	cpi	r24, 0xC8	; 200
 1c4:	70 f4       	brcc	.+28     	; 0x1e2 <main+0x150>
		  {
			  a2=0;
 1c6:	10 92 73 00 	sts	0x0073, r1
			  a1=0;
 1ca:	10 92 72 00 	sts	0x0072, r1
			  a4=1;
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	80 93 75 00 	sts	0x0075, r24
			  command(0xc0);
 1d4:	80 ec       	ldi	r24, 0xC0	; 192
 1d6:	0e 94 3e 02 	call	0x47c	; 0x47c <command>
			  display("        ");
 1da:	89 e6       	ldi	r24, 0x69	; 105
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	0e 94 1b 02 	call	0x436	; 0x436 <display>
		  } 
		if(b2>200&&b1<200)
 1e2:	80 91 79 00 	lds	r24, 0x0079
 1e6:	89 3c       	cpi	r24, 0xC9	; 201
 1e8:	08 f4       	brcc	.+2      	; 0x1ec <main+0x15a>
 1ea:	7a cf       	rjmp	.-268    	; 0xe0 <main+0x4e>
 1ec:	80 91 7a 00 	lds	r24, 0x007A
 1f0:	88 3c       	cpi	r24, 0xC8	; 200
 1f2:	08 f0       	brcs	.+2      	; 0x1f6 <main+0x164>
 1f4:	77 cf       	rjmp	.-274    	; 0xe4 <main+0x52>
		  {
			  a2=0;
 1f6:	10 92 73 00 	sts	0x0073, r1
			  a1=0;
 1fa:	10 92 72 00 	sts	0x0072, r1
			  a4=1;
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	80 93 75 00 	sts	0x0075, r24
			  command(0xc0);
 204:	80 ec       	ldi	r24, 0xC0	; 192
 206:	0e 94 3e 02 	call	0x47c	; 0x47c <command>
			  display("        ");
 20a:	89 e6       	ldi	r24, 0x69	; 105
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	0e 94 1b 02 	call	0x436	; 0x436 <display>
		  }   
	}		 		    			    			  
 212:	69 cf       	rjmp	.-302    	; 0xe6 <main+0x54>

00000214 <adc_1>:
			
}	

void adc_1()
{
 214:	df 93       	push	r29
 216:	cf 93       	push	r28
 218:	cd b7       	in	r28, 0x3d	; 61
 21a:	de b7       	in	r29, 0x3e	; 62
	ADMUX=0X61;
 21c:	87 e2       	ldi	r24, 0x27	; 39
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	21 e6       	ldi	r18, 0x61	; 97
 222:	fc 01       	movw	r30, r24
 224:	20 83       	st	Z, r18
	command(0X80);
 226:	80 e8       	ldi	r24, 0x80	; 128
 228:	0e 94 3e 02 	call	0x47c	; 0x47c <command>
	ADCSRA|=(1<<ADSC);
 22c:	86 e2       	ldi	r24, 0x26	; 38
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	26 e2       	ldi	r18, 0x26	; 38
 232:	30 e0       	ldi	r19, 0x00	; 0
 234:	f9 01       	movw	r30, r18
 236:	20 81       	ld	r18, Z
 238:	20 64       	ori	r18, 0x40	; 64
 23a:	fc 01       	movw	r30, r24
 23c:	20 83       	st	Z, r18
	while((ADCSRA&(1<<ADIF))==0);
 23e:	00 00       	nop
 240:	86 e2       	ldi	r24, 0x26	; 38
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	fc 01       	movw	r30, r24
 246:	80 81       	ld	r24, Z
 248:	88 2f       	mov	r24, r24
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	80 71       	andi	r24, 0x10	; 16
 24e:	90 70       	andi	r25, 0x00	; 0
 250:	00 97       	sbiw	r24, 0x00	; 0
 252:	b1 f3       	breq	.-20     	; 0x240 <adc_1+0x2c>
	b=ADCH;
 254:	85 e2       	ldi	r24, 0x25	; 37
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	fc 01       	movw	r30, r24
 25a:	80 81       	ld	r24, Z
 25c:	80 93 78 00 	sts	0x0078, r24
	e1=b%10;
 260:	80 91 78 00 	lds	r24, 0x0078
 264:	9a e0       	ldi	r25, 0x0A	; 10
 266:	69 2f       	mov	r22, r25
 268:	0e 94 c9 02 	call	0x592	; 0x592 <__udivmodqi4>
 26c:	89 2f       	mov	r24, r25
 26e:	80 93 80 00 	sts	0x0080, r24
	e2=b/10;
 272:	80 91 78 00 	lds	r24, 0x0078
 276:	9a e0       	ldi	r25, 0x0A	; 10
 278:	69 2f       	mov	r22, r25
 27a:	0e 94 c9 02 	call	0x592	; 0x592 <__udivmodqi4>
 27e:	80 93 7d 00 	sts	0x007D, r24
	e3=e2%10;
 282:	80 91 7d 00 	lds	r24, 0x007D
 286:	9a e0       	ldi	r25, 0x0A	; 10
 288:	69 2f       	mov	r22, r25
 28a:	0e 94 c9 02 	call	0x592	; 0x592 <__udivmodqi4>
 28e:	89 2f       	mov	r24, r25
 290:	80 93 7f 00 	sts	0x007F, r24
	l=e2/10;
 294:	80 91 7d 00 	lds	r24, 0x007D
 298:	9a e0       	ldi	r25, 0x0A	; 10
 29a:	69 2f       	mov	r22, r25
 29c:	0e 94 c9 02 	call	0x592	; 0x592 <__udivmodqi4>
 2a0:	80 93 7b 00 	sts	0x007B, r24
	command(0X80);
 2a4:	80 e8       	ldi	r24, 0x80	; 128
 2a6:	0e 94 3e 02 	call	0x47c	; 0x47c <command>
	data(l+0x30);
 2aa:	80 91 7b 00 	lds	r24, 0x007B
 2ae:	80 5d       	subi	r24, 0xD0	; 208
 2b0:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <data>
	data(e3+0x30);
 2b4:	80 91 7f 00 	lds	r24, 0x007F
 2b8:	80 5d       	subi	r24, 0xD0	; 208
 2ba:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <data>
	data(e1+0x30);
 2be:	80 91 80 00 	lds	r24, 0x0080
 2c2:	80 5d       	subi	r24, 0xD0	; 208
 2c4:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <data>
}	
 2c8:	cf 91       	pop	r28
 2ca:	df 91       	pop	r29
 2cc:	08 95       	ret

000002ce <adc_2>:
void adc_2()
{
 2ce:	df 93       	push	r29
 2d0:	cf 93       	push	r28
 2d2:	cd b7       	in	r28, 0x3d	; 61
 2d4:	de b7       	in	r29, 0x3e	; 62
	ADMUX=0X62;
 2d6:	87 e2       	ldi	r24, 0x27	; 39
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	22 e6       	ldi	r18, 0x62	; 98
 2dc:	fc 01       	movw	r30, r24
 2de:	20 83       	st	Z, r18
	ADCSRA|=(1<<6);
 2e0:	86 e2       	ldi	r24, 0x26	; 38
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	26 e2       	ldi	r18, 0x26	; 38
 2e6:	30 e0       	ldi	r19, 0x00	; 0
 2e8:	f9 01       	movw	r30, r18
 2ea:	20 81       	ld	r18, Z
 2ec:	20 64       	ori	r18, 0x40	; 64
 2ee:	fc 01       	movw	r30, r24
 2f0:	20 83       	st	Z, r18
	while((ADCSRA&(1<<ADIF))==0);
 2f2:	00 00       	nop
 2f4:	86 e2       	ldi	r24, 0x26	; 38
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	fc 01       	movw	r30, r24
 2fa:	80 81       	ld	r24, Z
 2fc:	88 2f       	mov	r24, r24
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	80 71       	andi	r24, 0x10	; 16
 302:	90 70       	andi	r25, 0x00	; 0
 304:	00 97       	sbiw	r24, 0x00	; 0
 306:	b1 f3       	breq	.-20     	; 0x2f4 <adc_2+0x26>
	b1=ADCH;
 308:	85 e2       	ldi	r24, 0x25	; 37
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	fc 01       	movw	r30, r24
 30e:	80 81       	ld	r24, Z
 310:	80 93 7a 00 	sts	0x007A, r24
	e1=b1%10;
 314:	80 91 7a 00 	lds	r24, 0x007A
 318:	9a e0       	ldi	r25, 0x0A	; 10
 31a:	69 2f       	mov	r22, r25
 31c:	0e 94 c9 02 	call	0x592	; 0x592 <__udivmodqi4>
 320:	89 2f       	mov	r24, r25
 322:	80 93 80 00 	sts	0x0080, r24
	e2=b1/10;
 326:	80 91 7a 00 	lds	r24, 0x007A
 32a:	9a e0       	ldi	r25, 0x0A	; 10
 32c:	69 2f       	mov	r22, r25
 32e:	0e 94 c9 02 	call	0x592	; 0x592 <__udivmodqi4>
 332:	80 93 7d 00 	sts	0x007D, r24
	e3=e2%10;
 336:	80 91 7d 00 	lds	r24, 0x007D
 33a:	9a e0       	ldi	r25, 0x0A	; 10
 33c:	69 2f       	mov	r22, r25
 33e:	0e 94 c9 02 	call	0x592	; 0x592 <__udivmodqi4>
 342:	89 2f       	mov	r24, r25
 344:	80 93 7f 00 	sts	0x007F, r24
	l=e2/10;
 348:	80 91 7d 00 	lds	r24, 0x007D
 34c:	9a e0       	ldi	r25, 0x0A	; 10
 34e:	69 2f       	mov	r22, r25
 350:	0e 94 c9 02 	call	0x592	; 0x592 <__udivmodqi4>
 354:	80 93 7b 00 	sts	0x007B, r24
	command(0X84);
 358:	84 e8       	ldi	r24, 0x84	; 132
 35a:	0e 94 3e 02 	call	0x47c	; 0x47c <command>
	data(l+0x30);
 35e:	80 91 7b 00 	lds	r24, 0x007B
 362:	80 5d       	subi	r24, 0xD0	; 208
 364:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <data>
	data(e3+0x30);
 368:	80 91 7f 00 	lds	r24, 0x007F
 36c:	80 5d       	subi	r24, 0xD0	; 208
 36e:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <data>
	data(e1+0x30);
 372:	80 91 80 00 	lds	r24, 0x0080
 376:	80 5d       	subi	r24, 0xD0	; 208
 378:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <data>
}
 37c:	cf 91       	pop	r28
 37e:	df 91       	pop	r29
 380:	08 95       	ret

00000382 <adc_3>:
void adc_3()
{
 382:	df 93       	push	r29
 384:	cf 93       	push	r28
 386:	cd b7       	in	r28, 0x3d	; 61
 388:	de b7       	in	r29, 0x3e	; 62
	ADMUX=0X64;
 38a:	87 e2       	ldi	r24, 0x27	; 39
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	24 e6       	ldi	r18, 0x64	; 100
 390:	fc 01       	movw	r30, r24
 392:	20 83       	st	Z, r18
	command(0X88);
 394:	88 e8       	ldi	r24, 0x88	; 136
 396:	0e 94 3e 02 	call	0x47c	; 0x47c <command>
	ADCSRA|=(1<<6);
 39a:	86 e2       	ldi	r24, 0x26	; 38
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	26 e2       	ldi	r18, 0x26	; 38
 3a0:	30 e0       	ldi	r19, 0x00	; 0
 3a2:	f9 01       	movw	r30, r18
 3a4:	20 81       	ld	r18, Z
 3a6:	20 64       	ori	r18, 0x40	; 64
 3a8:	fc 01       	movw	r30, r24
 3aa:	20 83       	st	Z, r18
	while((ADCSRA&(1<<ADIF))==0);
 3ac:	00 00       	nop
 3ae:	86 e2       	ldi	r24, 0x26	; 38
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	fc 01       	movw	r30, r24
 3b4:	80 81       	ld	r24, Z
 3b6:	88 2f       	mov	r24, r24
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	80 71       	andi	r24, 0x10	; 16
 3bc:	90 70       	andi	r25, 0x00	; 0
 3be:	00 97       	sbiw	r24, 0x00	; 0
 3c0:	b1 f3       	breq	.-20     	; 0x3ae <adc_3+0x2c>
	b2=ADCH;
 3c2:	85 e2       	ldi	r24, 0x25	; 37
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	fc 01       	movw	r30, r24
 3c8:	80 81       	ld	r24, Z
 3ca:	80 93 79 00 	sts	0x0079, r24
	e1=b2%10;
 3ce:	80 91 79 00 	lds	r24, 0x0079
 3d2:	9a e0       	ldi	r25, 0x0A	; 10
 3d4:	69 2f       	mov	r22, r25
 3d6:	0e 94 c9 02 	call	0x592	; 0x592 <__udivmodqi4>
 3da:	89 2f       	mov	r24, r25
 3dc:	80 93 80 00 	sts	0x0080, r24
	e2=b2/10;
 3e0:	80 91 79 00 	lds	r24, 0x0079
 3e4:	9a e0       	ldi	r25, 0x0A	; 10
 3e6:	69 2f       	mov	r22, r25
 3e8:	0e 94 c9 02 	call	0x592	; 0x592 <__udivmodqi4>
 3ec:	80 93 7d 00 	sts	0x007D, r24
	e3=e2%10;
 3f0:	80 91 7d 00 	lds	r24, 0x007D
 3f4:	9a e0       	ldi	r25, 0x0A	; 10
 3f6:	69 2f       	mov	r22, r25
 3f8:	0e 94 c9 02 	call	0x592	; 0x592 <__udivmodqi4>
 3fc:	89 2f       	mov	r24, r25
 3fe:	80 93 7f 00 	sts	0x007F, r24
	l=e2/10;
 402:	80 91 7d 00 	lds	r24, 0x007D
 406:	9a e0       	ldi	r25, 0x0A	; 10
 408:	69 2f       	mov	r22, r25
 40a:	0e 94 c9 02 	call	0x592	; 0x592 <__udivmodqi4>
 40e:	80 93 7b 00 	sts	0x007B, r24
	data(l+0x30);
 412:	80 91 7b 00 	lds	r24, 0x007B
 416:	80 5d       	subi	r24, 0xD0	; 208
 418:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <data>
	data(e3+0x30);
 41c:	80 91 7f 00 	lds	r24, 0x007F
 420:	80 5d       	subi	r24, 0xD0	; 208
 422:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <data>
	data(e1+0x30);
 426:	80 91 80 00 	lds	r24, 0x0080
 42a:	80 5d       	subi	r24, 0xD0	; 208
 42c:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <data>
}		
 430:	cf 91       	pop	r28
 432:	df 91       	pop	r29
 434:	08 95       	ret

00000436 <display>:
void display (const char *s)
{
 436:	df 93       	push	r29
 438:	cf 93       	push	r28
 43a:	00 d0       	rcall	.+0      	; 0x43c <display+0x6>
 43c:	cd b7       	in	r28, 0x3d	; 61
 43e:	de b7       	in	r29, 0x3e	; 62
 440:	9a 83       	std	Y+2, r25	; 0x02
 442:	89 83       	std	Y+1, r24	; 0x01
	while(*s)
 444:	10 c0       	rjmp	.+32     	; 0x466 <__stack+0x7>
	{
		data(*s++);
 446:	89 81       	ldd	r24, Y+1	; 0x01
 448:	9a 81       	ldd	r25, Y+2	; 0x02
 44a:	fc 01       	movw	r30, r24
 44c:	20 81       	ld	r18, Z
 44e:	89 81       	ldd	r24, Y+1	; 0x01
 450:	9a 81       	ldd	r25, Y+2	; 0x02
 452:	01 96       	adiw	r24, 0x01	; 1
 454:	9a 83       	std	Y+2, r25	; 0x02
 456:	89 83       	std	Y+1, r24	; 0x01
 458:	82 2f       	mov	r24, r18
 45a:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <data>
		delay(2);
 45e:	82 e0       	ldi	r24, 0x02	; 2
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	0e 94 9a 02 	call	0x534	; 0x534 <delay>
	data(e3+0x30);
	data(e1+0x30);
}		
void display (const char *s)
{
	while(*s)
 466:	89 81       	ldd	r24, Y+1	; 0x01
 468:	9a 81       	ldd	r25, Y+2	; 0x02
 46a:	fc 01       	movw	r30, r24
 46c:	80 81       	ld	r24, Z
 46e:	88 23       	and	r24, r24
 470:	51 f7       	brne	.-44     	; 0x446 <display+0x10>
	{
		data(*s++);
		delay(2);
	}
}	
 472:	0f 90       	pop	r0
 474:	0f 90       	pop	r0
 476:	cf 91       	pop	r28
 478:	df 91       	pop	r29
 47a:	08 95       	ret

0000047c <command>:
			
void command(char c)
{
 47c:	df 93       	push	r29
 47e:	cf 93       	push	r28
 480:	0f 92       	push	r0
 482:	cd b7       	in	r28, 0x3d	; 61
 484:	de b7       	in	r29, 0x3e	; 62
 486:	89 83       	std	Y+1, r24	; 0x01
	PORTC=c;
 488:	85 e3       	ldi	r24, 0x35	; 53
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	29 81       	ldd	r18, Y+1	; 0x01
 48e:	fc 01       	movw	r30, r24
 490:	20 83       	st	Z, r18
	PORTD&=~(1<<6);
 492:	82 e3       	ldi	r24, 0x32	; 50
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	22 e3       	ldi	r18, 0x32	; 50
 498:	30 e0       	ldi	r19, 0x00	; 0
 49a:	f9 01       	movw	r30, r18
 49c:	20 81       	ld	r18, Z
 49e:	2f 7b       	andi	r18, 0xBF	; 191
 4a0:	fc 01       	movw	r30, r24
 4a2:	20 83       	st	Z, r18
	PORTD|=(1<<7);
 4a4:	82 e3       	ldi	r24, 0x32	; 50
 4a6:	90 e0       	ldi	r25, 0x00	; 0
 4a8:	22 e3       	ldi	r18, 0x32	; 50
 4aa:	30 e0       	ldi	r19, 0x00	; 0
 4ac:	f9 01       	movw	r30, r18
 4ae:	20 81       	ld	r18, Z
 4b0:	20 68       	ori	r18, 0x80	; 128
 4b2:	fc 01       	movw	r30, r24
 4b4:	20 83       	st	Z, r18
	delay(2);
 4b6:	82 e0       	ldi	r24, 0x02	; 2
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	0e 94 9a 02 	call	0x534	; 0x534 <delay>
	PORTD&=~(1<<7);
 4be:	82 e3       	ldi	r24, 0x32	; 50
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	22 e3       	ldi	r18, 0x32	; 50
 4c4:	30 e0       	ldi	r19, 0x00	; 0
 4c6:	f9 01       	movw	r30, r18
 4c8:	20 81       	ld	r18, Z
 4ca:	2f 77       	andi	r18, 0x7F	; 127
 4cc:	fc 01       	movw	r30, r24
 4ce:	20 83       	st	Z, r18
}
 4d0:	0f 90       	pop	r0
 4d2:	cf 91       	pop	r28
 4d4:	df 91       	pop	r29
 4d6:	08 95       	ret

000004d8 <data>:
void data(char d)
{
 4d8:	df 93       	push	r29
 4da:	cf 93       	push	r28
 4dc:	0f 92       	push	r0
 4de:	cd b7       	in	r28, 0x3d	; 61
 4e0:	de b7       	in	r29, 0x3e	; 62
 4e2:	89 83       	std	Y+1, r24	; 0x01
	PORTC=d;
 4e4:	85 e3       	ldi	r24, 0x35	; 53
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	29 81       	ldd	r18, Y+1	; 0x01
 4ea:	fc 01       	movw	r30, r24
 4ec:	20 83       	st	Z, r18
	PORTD|=(1<<6);
 4ee:	82 e3       	ldi	r24, 0x32	; 50
 4f0:	90 e0       	ldi	r25, 0x00	; 0
 4f2:	22 e3       	ldi	r18, 0x32	; 50
 4f4:	30 e0       	ldi	r19, 0x00	; 0
 4f6:	f9 01       	movw	r30, r18
 4f8:	20 81       	ld	r18, Z
 4fa:	20 64       	ori	r18, 0x40	; 64
 4fc:	fc 01       	movw	r30, r24
 4fe:	20 83       	st	Z, r18
	PORTD|=(1<<7);
 500:	82 e3       	ldi	r24, 0x32	; 50
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	22 e3       	ldi	r18, 0x32	; 50
 506:	30 e0       	ldi	r19, 0x00	; 0
 508:	f9 01       	movw	r30, r18
 50a:	20 81       	ld	r18, Z
 50c:	20 68       	ori	r18, 0x80	; 128
 50e:	fc 01       	movw	r30, r24
 510:	20 83       	st	Z, r18
	delay(2);
 512:	82 e0       	ldi	r24, 0x02	; 2
 514:	90 e0       	ldi	r25, 0x00	; 0
 516:	0e 94 9a 02 	call	0x534	; 0x534 <delay>
	PORTD&=~(1<<7);
 51a:	82 e3       	ldi	r24, 0x32	; 50
 51c:	90 e0       	ldi	r25, 0x00	; 0
 51e:	22 e3       	ldi	r18, 0x32	; 50
 520:	30 e0       	ldi	r19, 0x00	; 0
 522:	f9 01       	movw	r30, r18
 524:	20 81       	ld	r18, Z
 526:	2f 77       	andi	r18, 0x7F	; 127
 528:	fc 01       	movw	r30, r24
 52a:	20 83       	st	Z, r18
}
 52c:	0f 90       	pop	r0
 52e:	cf 91       	pop	r28
 530:	df 91       	pop	r29
 532:	08 95       	ret

00000534 <delay>:
void delay(int x)
{
 534:	df 93       	push	r29
 536:	cf 93       	push	r28
 538:	00 d0       	rcall	.+0      	; 0x53a <delay+0x6>
 53a:	00 d0       	rcall	.+0      	; 0x53c <delay+0x8>
 53c:	00 d0       	rcall	.+0      	; 0x53e <delay+0xa>
 53e:	cd b7       	in	r28, 0x3d	; 61
 540:	de b7       	in	r29, 0x3e	; 62
 542:	9e 83       	std	Y+6, r25	; 0x06
 544:	8d 83       	std	Y+5, r24	; 0x05
	int i,j;
	for(i=0;i<x;i++)
 546:	1a 82       	std	Y+2, r1	; 0x02
 548:	19 82       	std	Y+1, r1	; 0x01
 54a:	13 c0       	rjmp	.+38     	; 0x572 <delay+0x3e>
	for(j=0;j<1000;j++);
 54c:	1c 82       	std	Y+4, r1	; 0x04
 54e:	1b 82       	std	Y+3, r1	; 0x03
 550:	05 c0       	rjmp	.+10     	; 0x55c <delay+0x28>
 552:	8b 81       	ldd	r24, Y+3	; 0x03
 554:	9c 81       	ldd	r25, Y+4	; 0x04
 556:	01 96       	adiw	r24, 0x01	; 1
 558:	9c 83       	std	Y+4, r25	; 0x04
 55a:	8b 83       	std	Y+3, r24	; 0x03
 55c:	8b 81       	ldd	r24, Y+3	; 0x03
 55e:	9c 81       	ldd	r25, Y+4	; 0x04
 560:	23 e0       	ldi	r18, 0x03	; 3
 562:	88 3e       	cpi	r24, 0xE8	; 232
 564:	92 07       	cpc	r25, r18
 566:	ac f3       	brlt	.-22     	; 0x552 <delay+0x1e>
	PORTD&=~(1<<7);
}
void delay(int x)
{
	int i,j;
	for(i=0;i<x;i++)
 568:	89 81       	ldd	r24, Y+1	; 0x01
 56a:	9a 81       	ldd	r25, Y+2	; 0x02
 56c:	01 96       	adiw	r24, 0x01	; 1
 56e:	9a 83       	std	Y+2, r25	; 0x02
 570:	89 83       	std	Y+1, r24	; 0x01
 572:	29 81       	ldd	r18, Y+1	; 0x01
 574:	3a 81       	ldd	r19, Y+2	; 0x02
 576:	8d 81       	ldd	r24, Y+5	; 0x05
 578:	9e 81       	ldd	r25, Y+6	; 0x06
 57a:	28 17       	cp	r18, r24
 57c:	39 07       	cpc	r19, r25
 57e:	34 f3       	brlt	.-52     	; 0x54c <delay+0x18>
	for(j=0;j<1000;j++);
 580:	26 96       	adiw	r28, 0x06	; 6
 582:	0f b6       	in	r0, 0x3f	; 63
 584:	f8 94       	cli
 586:	de bf       	out	0x3e, r29	; 62
 588:	0f be       	out	0x3f, r0	; 63
 58a:	cd bf       	out	0x3d, r28	; 61
 58c:	cf 91       	pop	r28
 58e:	df 91       	pop	r29
 590:	08 95       	ret

00000592 <__udivmodqi4>:
 592:	99 1b       	sub	r25, r25
 594:	79 e0       	ldi	r23, 0x09	; 9
 596:	04 c0       	rjmp	.+8      	; 0x5a0 <__udivmodqi4_ep>

00000598 <__udivmodqi4_loop>:
 598:	99 1f       	adc	r25, r25
 59a:	96 17       	cp	r25, r22
 59c:	08 f0       	brcs	.+2      	; 0x5a0 <__udivmodqi4_ep>
 59e:	96 1b       	sub	r25, r22

000005a0 <__udivmodqi4_ep>:
 5a0:	88 1f       	adc	r24, r24
 5a2:	7a 95       	dec	r23
 5a4:	c9 f7       	brne	.-14     	; 0x598 <__udivmodqi4_loop>
 5a6:	80 95       	com	r24
 5a8:	08 95       	ret

000005aa <_exit>:
 5aa:	f8 94       	cli

000005ac <__stop_program>:
 5ac:	ff cf       	rjmp	.-2      	; 0x5ac <__stop_program>
