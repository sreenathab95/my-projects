
adc2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005f6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000026  00800060  000005f6  0000068a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  00800086  00800086  000006b0  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000006b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000d7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000020  00000000  00000000  00000e01  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000000bd  00000000  00000000  00000e21  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000002dd  00000000  00000000  00000ede  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000000c8  00000000  00000000  000011bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000004c6  00000000  00000000  00001283  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000090  00000000  00000000  0000174c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000000a3  00000000  00000000  000017dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 0000001e  00000000  00000000  0000187f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ef       	ldi	r30, 0xF6	; 246
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 38       	cpi	r26, 0x86	; 134
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a6 e8       	ldi	r26, 0x86	; 134
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a3 39       	cpi	r26, 0x93	; 147
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 f9 02 	jmp	0x5f2	; 0x5f2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
void adc_1();
void adc_2();
void adc_3();
char b,b1,b2,e1,e2,e3,l,a2=0,a3=0,a4=0,a5=0,a6=0,a7;
int main(void)
{
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
	
	DDRC=0XFF;
  9a:	84 e3       	ldi	r24, 0x34	; 52
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	2f ef       	ldi	r18, 0xFF	; 255
  a0:	fc 01       	movw	r30, r24
  a2:	20 83       	st	Z, r18
	DDRD=0XFF;
  a4:	81 e3       	ldi	r24, 0x31	; 49
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	2f ef       	ldi	r18, 0xFF	; 255
  aa:	fc 01       	movw	r30, r24
  ac:	20 83       	st	Z, r18
	command(0x38);
  ae:	88 e3       	ldi	r24, 0x38	; 56
  b0:	0e 94 62 02 	call	0x4c4	; 0x4c4 <command>
	command(0x06);
  b4:	86 e0       	ldi	r24, 0x06	; 6
  b6:	0e 94 62 02 	call	0x4c4	; 0x4c4 <command>
	command(0x0C);
  ba:	8c e0       	ldi	r24, 0x0C	; 12
  bc:	0e 94 62 02 	call	0x4c4	; 0x4c4 <command>
	command(0x80);
  c0:	80 e8       	ldi	r24, 0x80	; 128
  c2:	0e 94 62 02 	call	0x4c4	; 0x4c4 <command>
	command(0x01);
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	0e 94 62 02 	call	0x4c4	; 0x4c4 <command>
	delay(50);
  cc:	82 e3       	ldi	r24, 0x32	; 50
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	0e 94 be 02 	call	0x57c	; 0x57c <delay>
	ADCSRA=0X87;
  d4:	86 e2       	ldi	r24, 0x26	; 38
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	27 e8       	ldi	r18, 0x87	; 135
  da:	fc 01       	movw	r30, r24
  dc:	20 83       	st	Z, r18
  de:	01 c0       	rjmp	.+2      	; 0xe2 <main+0x50>
		if(b2<200)
		{
			a4=0;
			a5=0;
		}
	}		
  e0:	00 00       	nop
	command(0x01);
	delay(50);
	ADCSRA=0X87;
	while(1)
	{
		 adc_1();
  e2:	0e 94 31 01 	call	0x262	; 0x262 <adc_1>
		 adc_2();
  e6:	0e 94 8b 01 	call	0x316	; 0x316 <adc_2>
		adc_3();
  ea:	0e 94 e5 01 	call	0x3ca	; 0x3ca <adc_3>
		command(0xca);
  ee:	8a ec       	ldi	r24, 0xCA	; 202
  f0:	0e 94 62 02 	call	0x4c4	; 0x4c4 <command>
		data(a2+0x30);
  f4:	80 91 86 00 	lds	r24, 0x0086
  f8:	80 5d       	subi	r24, 0xD0	; 208
  fa:	0e 94 90 02 	call	0x520	; 0x520 <data>
		data(a3+0x30);
  fe:	80 91 87 00 	lds	r24, 0x0087
 102:	80 5d       	subi	r24, 0xD0	; 208
 104:	0e 94 90 02 	call	0x520	; 0x520 <data>
		data(a4+0x30);
 108:	80 91 88 00 	lds	r24, 0x0088
 10c:	80 5d       	subi	r24, 0xD0	; 208
 10e:	0e 94 90 02 	call	0x520	; 0x520 <data>
		data(a5+0x30);
 112:	80 91 89 00 	lds	r24, 0x0089
 116:	80 5d       	subi	r24, 0xD0	; 208
 118:	0e 94 90 02 	call	0x520	; 0x520 <data>
		if(b>200&&a2==0&&a3==0&&a4==0&&a5==0)
 11c:	80 91 8b 00 	lds	r24, 0x008B
 120:	89 3c       	cpi	r24, 0xC9	; 201
 122:	d0 f0       	brcs	.+52     	; 0x158 <main+0xc6>
 124:	80 91 86 00 	lds	r24, 0x0086
 128:	88 23       	and	r24, r24
 12a:	b1 f4       	brne	.+44     	; 0x158 <main+0xc6>
 12c:	80 91 87 00 	lds	r24, 0x0087
 130:	88 23       	and	r24, r24
 132:	91 f4       	brne	.+36     	; 0x158 <main+0xc6>
 134:	80 91 88 00 	lds	r24, 0x0088
 138:	88 23       	and	r24, r24
 13a:	71 f4       	brne	.+28     	; 0x158 <main+0xc6>
 13c:	80 91 89 00 	lds	r24, 0x0089
 140:	88 23       	and	r24, r24
 142:	51 f4       	brne	.+20     	; 0x158 <main+0xc6>
		{
			a2=1;
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	80 93 86 00 	sts	0x0086, r24
			command(0xc0);
 14a:	80 ec       	ldi	r24, 0xC0	; 192
 14c:	0e 94 62 02 	call	0x4c4	; 0x4c4 <command>
			display("first    ");
 150:	80 e6       	ldi	r24, 0x60	; 96
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	0e 94 3f 02 	call	0x47e	; 0x47e <display>
		}
		if(b<200)
 158:	80 91 8b 00 	lds	r24, 0x008B
 15c:	88 3c       	cpi	r24, 0xC8	; 200
 15e:	10 f4       	brcc	.+4      	; 0x164 <main+0xd2>
		{
			a2=0;
 160:	10 92 86 00 	sts	0x0086, r1
		}
		if(b1>200&&a2==1&&a4==0)
 164:	80 91 8d 00 	lds	r24, 0x008D
 168:	89 3c       	cpi	r24, 0xC9	; 201
 16a:	90 f0       	brcs	.+36     	; 0x190 <main+0xfe>
 16c:	80 91 86 00 	lds	r24, 0x0086
 170:	81 30       	cpi	r24, 0x01	; 1
 172:	71 f4       	brne	.+28     	; 0x190 <main+0xfe>
 174:	80 91 88 00 	lds	r24, 0x0088
 178:	88 23       	and	r24, r24
 17a:	51 f4       	brne	.+20     	; 0x190 <main+0xfe>
		{
			a4=1;
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	80 93 88 00 	sts	0x0088, r24
			command(0xc0);
 182:	80 ec       	ldi	r24, 0xC0	; 192
 184:	0e 94 62 02 	call	0x4c4	; 0x4c4 <command>
			display("second");
 188:	8a e6       	ldi	r24, 0x6A	; 106
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	0e 94 3f 02 	call	0x47e	; 0x47e <display>
		}
		if(b1>200&&b2>200&&a2==0&&a5==0)
 190:	80 91 8d 00 	lds	r24, 0x008D
 194:	89 3c       	cpi	r24, 0xC9	; 201
 196:	78 f0       	brcs	.+30     	; 0x1b6 <main+0x124>
 198:	80 91 8c 00 	lds	r24, 0x008C
 19c:	89 3c       	cpi	r24, 0xC9	; 201
 19e:	58 f0       	brcs	.+22     	; 0x1b6 <main+0x124>
 1a0:	80 91 86 00 	lds	r24, 0x0086
 1a4:	88 23       	and	r24, r24
 1a6:	39 f4       	brne	.+14     	; 0x1b6 <main+0x124>
 1a8:	80 91 89 00 	lds	r24, 0x0089
 1ac:	88 23       	and	r24, r24
 1ae:	19 f4       	brne	.+6      	; 0x1b6 <main+0x124>
		{
			a3=1;
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	80 93 87 00 	sts	0x0087, r24

		}		
		if(b1<200)
 1b6:	80 91 8d 00 	lds	r24, 0x008D
 1ba:	88 3c       	cpi	r24, 0xC8	; 200
 1bc:	10 f4       	brcc	.+4      	; 0x1c2 <main+0x130>
		{
			a3=0;
 1be:	10 92 87 00 	sts	0x0087, r1
		}
		if(b2>200&&a2==1&&a4==1)
 1c2:	80 91 8c 00 	lds	r24, 0x008C
 1c6:	89 3c       	cpi	r24, 0xC9	; 201
 1c8:	78 f0       	brcs	.+30     	; 0x1e8 <main+0x156>
 1ca:	80 91 86 00 	lds	r24, 0x0086
 1ce:	81 30       	cpi	r24, 0x01	; 1
 1d0:	59 f4       	brne	.+22     	; 0x1e8 <main+0x156>
 1d2:	80 91 88 00 	lds	r24, 0x0088
 1d6:	81 30       	cpi	r24, 0x01	; 1
 1d8:	39 f4       	brne	.+14     	; 0x1e8 <main+0x156>
		{
			command(0xc0);
 1da:	80 ec       	ldi	r24, 0xC0	; 192
 1dc:	0e 94 62 02 	call	0x4c4	; 0x4c4 <command>
			display("3rd       ");
 1e0:	81 e7       	ldi	r24, 0x71	; 113
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	0e 94 3f 02 	call	0x47e	; 0x47e <display>
		}
		if(b2>200&&b1>200&&a2==0&&a3==0)
 1e8:	80 91 8c 00 	lds	r24, 0x008C
 1ec:	89 3c       	cpi	r24, 0xC9	; 201
 1ee:	c8 f0       	brcs	.+50     	; 0x222 <main+0x190>
 1f0:	80 91 8d 00 	lds	r24, 0x008D
 1f4:	89 3c       	cpi	r24, 0xC9	; 201
 1f6:	a8 f0       	brcs	.+42     	; 0x222 <main+0x190>
 1f8:	80 91 86 00 	lds	r24, 0x0086
 1fc:	88 23       	and	r24, r24
 1fe:	89 f4       	brne	.+34     	; 0x222 <main+0x190>
 200:	80 91 87 00 	lds	r24, 0x0087
 204:	88 23       	and	r24, r24
 206:	69 f4       	brne	.+26     	; 0x222 <main+0x190>
		{
			a5=1;
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	80 93 89 00 	sts	0x0089, r24
			a3=1;
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	80 93 87 00 	sts	0x0087, r24
			command(0xc0);
 214:	80 ec       	ldi	r24, 0xC0	; 192
 216:	0e 94 62 02 	call	0x4c4	; 0x4c4 <command>
			display("         ");
 21a:	8c e7       	ldi	r24, 0x7C	; 124
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	0e 94 3f 02 	call	0x47e	; 0x47e <display>
		}
		if(b>200&&b2>200&&a4==0)
 222:	80 91 8b 00 	lds	r24, 0x008B
 226:	89 3c       	cpi	r24, 0xC9	; 201
 228:	90 f0       	brcs	.+36     	; 0x24e <main+0x1bc>
 22a:	80 91 8c 00 	lds	r24, 0x008C
 22e:	89 3c       	cpi	r24, 0xC9	; 201
 230:	70 f0       	brcs	.+28     	; 0x24e <main+0x1bc>
 232:	80 91 88 00 	lds	r24, 0x0088
 236:	88 23       	and	r24, r24
 238:	51 f4       	brne	.+20     	; 0x24e <main+0x1bc>
		{
			a4=1;
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	80 93 88 00 	sts	0x0088, r24
			
			command(0xc0);
 240:	80 ec       	ldi	r24, 0xC0	; 192
 242:	0e 94 62 02 	call	0x4c4	; 0x4c4 <command>
			display("         ");
 246:	8c e7       	ldi	r24, 0x7C	; 124
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	0e 94 3f 02 	call	0x47e	; 0x47e <display>
		}
		if(b2<200)
 24e:	80 91 8c 00 	lds	r24, 0x008C
 252:	88 3c       	cpi	r24, 0xC8	; 200
 254:	08 f0       	brcs	.+2      	; 0x258 <main+0x1c6>
 256:	44 cf       	rjmp	.-376    	; 0xe0 <main+0x4e>
		{
			a4=0;
 258:	10 92 88 00 	sts	0x0088, r1
			a5=0;
 25c:	10 92 89 00 	sts	0x0089, r1
		}
	}		
 260:	40 cf       	rjmp	.-384    	; 0xe2 <main+0x50>

00000262 <adc_1>:
}	

void adc_1()
{
 262:	df 93       	push	r29
 264:	cf 93       	push	r28
 266:	cd b7       	in	r28, 0x3d	; 61
 268:	de b7       	in	r29, 0x3e	; 62
	ADMUX=0X61;
 26a:	87 e2       	ldi	r24, 0x27	; 39
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	21 e6       	ldi	r18, 0x61	; 97
 270:	fc 01       	movw	r30, r24
 272:	20 83       	st	Z, r18
	command(0X80);
 274:	80 e8       	ldi	r24, 0x80	; 128
 276:	0e 94 62 02 	call	0x4c4	; 0x4c4 <command>
	ADCSRA|=(1<<6);
 27a:	86 e2       	ldi	r24, 0x26	; 38
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	26 e2       	ldi	r18, 0x26	; 38
 280:	30 e0       	ldi	r19, 0x00	; 0
 282:	f9 01       	movw	r30, r18
 284:	20 81       	ld	r18, Z
 286:	20 64       	ori	r18, 0x40	; 64
 288:	fc 01       	movw	r30, r24
 28a:	20 83       	st	Z, r18
	while((ADCSRA&(1<<ADIF))==0);
 28c:	00 00       	nop
 28e:	86 e2       	ldi	r24, 0x26	; 38
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	fc 01       	movw	r30, r24
 294:	80 81       	ld	r24, Z
 296:	88 2f       	mov	r24, r24
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	80 71       	andi	r24, 0x10	; 16
 29c:	90 70       	andi	r25, 0x00	; 0
 29e:	00 97       	sbiw	r24, 0x00	; 0
 2a0:	b1 f3       	breq	.-20     	; 0x28e <adc_1+0x2c>
	b=ADCH;
 2a2:	85 e2       	ldi	r24, 0x25	; 37
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	fc 01       	movw	r30, r24
 2a8:	80 81       	ld	r24, Z
 2aa:	80 93 8b 00 	sts	0x008B, r24
	e1=b%10;
 2ae:	80 91 8b 00 	lds	r24, 0x008B
 2b2:	9a e0       	ldi	r25, 0x0A	; 10
 2b4:	69 2f       	mov	r22, r25
 2b6:	0e 94 ed 02 	call	0x5da	; 0x5da <__udivmodqi4>
 2ba:	89 2f       	mov	r24, r25
 2bc:	80 93 92 00 	sts	0x0092, r24
	e2=b/10;
 2c0:	80 91 8b 00 	lds	r24, 0x008B
 2c4:	9a e0       	ldi	r25, 0x0A	; 10
 2c6:	69 2f       	mov	r22, r25
 2c8:	0e 94 ed 02 	call	0x5da	; 0x5da <__udivmodqi4>
 2cc:	80 93 90 00 	sts	0x0090, r24
	e3=e2%10;
 2d0:	80 91 90 00 	lds	r24, 0x0090
 2d4:	9a e0       	ldi	r25, 0x0A	; 10
 2d6:	69 2f       	mov	r22, r25
 2d8:	0e 94 ed 02 	call	0x5da	; 0x5da <__udivmodqi4>
 2dc:	89 2f       	mov	r24, r25
 2de:	80 93 91 00 	sts	0x0091, r24
	l=e2/10;
 2e2:	80 91 90 00 	lds	r24, 0x0090
 2e6:	9a e0       	ldi	r25, 0x0A	; 10
 2e8:	69 2f       	mov	r22, r25
 2ea:	0e 94 ed 02 	call	0x5da	; 0x5da <__udivmodqi4>
 2ee:	80 93 8e 00 	sts	0x008E, r24
	data(l+0x30);
 2f2:	80 91 8e 00 	lds	r24, 0x008E
 2f6:	80 5d       	subi	r24, 0xD0	; 208
 2f8:	0e 94 90 02 	call	0x520	; 0x520 <data>
	data(e3+0x30);
 2fc:	80 91 91 00 	lds	r24, 0x0091
 300:	80 5d       	subi	r24, 0xD0	; 208
 302:	0e 94 90 02 	call	0x520	; 0x520 <data>
	data(e1+0x30);
 306:	80 91 92 00 	lds	r24, 0x0092
 30a:	80 5d       	subi	r24, 0xD0	; 208
 30c:	0e 94 90 02 	call	0x520	; 0x520 <data>
}	
 310:	cf 91       	pop	r28
 312:	df 91       	pop	r29
 314:	08 95       	ret

00000316 <adc_2>:
void adc_2()
{
 316:	df 93       	push	r29
 318:	cf 93       	push	r28
 31a:	cd b7       	in	r28, 0x3d	; 61
 31c:	de b7       	in	r29, 0x3e	; 62
	ADMUX=0X62;
 31e:	87 e2       	ldi	r24, 0x27	; 39
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	22 e6       	ldi	r18, 0x62	; 98
 324:	fc 01       	movw	r30, r24
 326:	20 83       	st	Z, r18
	command(0X86);
 328:	86 e8       	ldi	r24, 0x86	; 134
 32a:	0e 94 62 02 	call	0x4c4	; 0x4c4 <command>
	ADCSRA|=(1<<6);
 32e:	86 e2       	ldi	r24, 0x26	; 38
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	26 e2       	ldi	r18, 0x26	; 38
 334:	30 e0       	ldi	r19, 0x00	; 0
 336:	f9 01       	movw	r30, r18
 338:	20 81       	ld	r18, Z
 33a:	20 64       	ori	r18, 0x40	; 64
 33c:	fc 01       	movw	r30, r24
 33e:	20 83       	st	Z, r18
	while((ADCSRA&(1<<ADIF))==0);
 340:	00 00       	nop
 342:	86 e2       	ldi	r24, 0x26	; 38
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	fc 01       	movw	r30, r24
 348:	80 81       	ld	r24, Z
 34a:	88 2f       	mov	r24, r24
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	80 71       	andi	r24, 0x10	; 16
 350:	90 70       	andi	r25, 0x00	; 0
 352:	00 97       	sbiw	r24, 0x00	; 0
 354:	b1 f3       	breq	.-20     	; 0x342 <adc_2+0x2c>
	b1=ADCH;
 356:	85 e2       	ldi	r24, 0x25	; 37
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	fc 01       	movw	r30, r24
 35c:	80 81       	ld	r24, Z
 35e:	80 93 8d 00 	sts	0x008D, r24
	e1=b1%10;
 362:	80 91 8d 00 	lds	r24, 0x008D
 366:	9a e0       	ldi	r25, 0x0A	; 10
 368:	69 2f       	mov	r22, r25
 36a:	0e 94 ed 02 	call	0x5da	; 0x5da <__udivmodqi4>
 36e:	89 2f       	mov	r24, r25
 370:	80 93 92 00 	sts	0x0092, r24
	e2=b1/10;
 374:	80 91 8d 00 	lds	r24, 0x008D
 378:	9a e0       	ldi	r25, 0x0A	; 10
 37a:	69 2f       	mov	r22, r25
 37c:	0e 94 ed 02 	call	0x5da	; 0x5da <__udivmodqi4>
 380:	80 93 90 00 	sts	0x0090, r24
	e3=e2%10;
 384:	80 91 90 00 	lds	r24, 0x0090
 388:	9a e0       	ldi	r25, 0x0A	; 10
 38a:	69 2f       	mov	r22, r25
 38c:	0e 94 ed 02 	call	0x5da	; 0x5da <__udivmodqi4>
 390:	89 2f       	mov	r24, r25
 392:	80 93 91 00 	sts	0x0091, r24
	l=e2/10;
 396:	80 91 90 00 	lds	r24, 0x0090
 39a:	9a e0       	ldi	r25, 0x0A	; 10
 39c:	69 2f       	mov	r22, r25
 39e:	0e 94 ed 02 	call	0x5da	; 0x5da <__udivmodqi4>
 3a2:	80 93 8e 00 	sts	0x008E, r24
	data(l+0x30);
 3a6:	80 91 8e 00 	lds	r24, 0x008E
 3aa:	80 5d       	subi	r24, 0xD0	; 208
 3ac:	0e 94 90 02 	call	0x520	; 0x520 <data>
	data(e3+0x30);
 3b0:	80 91 91 00 	lds	r24, 0x0091
 3b4:	80 5d       	subi	r24, 0xD0	; 208
 3b6:	0e 94 90 02 	call	0x520	; 0x520 <data>
	data(e1+0x30);
 3ba:	80 91 92 00 	lds	r24, 0x0092
 3be:	80 5d       	subi	r24, 0xD0	; 208
 3c0:	0e 94 90 02 	call	0x520	; 0x520 <data>
}
 3c4:	cf 91       	pop	r28
 3c6:	df 91       	pop	r29
 3c8:	08 95       	ret

000003ca <adc_3>:
void adc_3()
{
 3ca:	df 93       	push	r29
 3cc:	cf 93       	push	r28
 3ce:	cd b7       	in	r28, 0x3d	; 61
 3d0:	de b7       	in	r29, 0x3e	; 62
	ADMUX=0X67;
 3d2:	87 e2       	ldi	r24, 0x27	; 39
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	27 e6       	ldi	r18, 0x67	; 103
 3d8:	fc 01       	movw	r30, r24
 3da:	20 83       	st	Z, r18
	command(0X8b);
 3dc:	8b e8       	ldi	r24, 0x8B	; 139
 3de:	0e 94 62 02 	call	0x4c4	; 0x4c4 <command>
	ADCSRA|=(1<<6);
 3e2:	86 e2       	ldi	r24, 0x26	; 38
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	26 e2       	ldi	r18, 0x26	; 38
 3e8:	30 e0       	ldi	r19, 0x00	; 0
 3ea:	f9 01       	movw	r30, r18
 3ec:	20 81       	ld	r18, Z
 3ee:	20 64       	ori	r18, 0x40	; 64
 3f0:	fc 01       	movw	r30, r24
 3f2:	20 83       	st	Z, r18
	while((ADCSRA&(1<<ADIF))==0);
 3f4:	00 00       	nop
 3f6:	86 e2       	ldi	r24, 0x26	; 38
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	fc 01       	movw	r30, r24
 3fc:	80 81       	ld	r24, Z
 3fe:	88 2f       	mov	r24, r24
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	80 71       	andi	r24, 0x10	; 16
 404:	90 70       	andi	r25, 0x00	; 0
 406:	00 97       	sbiw	r24, 0x00	; 0
 408:	b1 f3       	breq	.-20     	; 0x3f6 <adc_3+0x2c>
	b2=ADCH;
 40a:	85 e2       	ldi	r24, 0x25	; 37
 40c:	90 e0       	ldi	r25, 0x00	; 0
 40e:	fc 01       	movw	r30, r24
 410:	80 81       	ld	r24, Z
 412:	80 93 8c 00 	sts	0x008C, r24
	e1=b2%10;
 416:	80 91 8c 00 	lds	r24, 0x008C
 41a:	9a e0       	ldi	r25, 0x0A	; 10
 41c:	69 2f       	mov	r22, r25
 41e:	0e 94 ed 02 	call	0x5da	; 0x5da <__udivmodqi4>
 422:	89 2f       	mov	r24, r25
 424:	80 93 92 00 	sts	0x0092, r24
	e2=b2/10;
 428:	80 91 8c 00 	lds	r24, 0x008C
 42c:	9a e0       	ldi	r25, 0x0A	; 10
 42e:	69 2f       	mov	r22, r25
 430:	0e 94 ed 02 	call	0x5da	; 0x5da <__udivmodqi4>
 434:	80 93 90 00 	sts	0x0090, r24
	e3=e2%10;
 438:	80 91 90 00 	lds	r24, 0x0090
 43c:	9a e0       	ldi	r25, 0x0A	; 10
 43e:	69 2f       	mov	r22, r25
 440:	0e 94 ed 02 	call	0x5da	; 0x5da <__udivmodqi4>
 444:	89 2f       	mov	r24, r25
 446:	80 93 91 00 	sts	0x0091, r24
	l=e2/10;
 44a:	80 91 90 00 	lds	r24, 0x0090
 44e:	9a e0       	ldi	r25, 0x0A	; 10
 450:	69 2f       	mov	r22, r25
 452:	0e 94 ed 02 	call	0x5da	; 0x5da <__udivmodqi4>
 456:	80 93 8e 00 	sts	0x008E, r24
	data(l+0x30);
 45a:	80 91 8e 00 	lds	r24, 0x008E
 45e:	80 5d       	subi	r24, 0xD0	; 208
 460:	0e 94 90 02 	call	0x520	; 0x520 <data>
	data(e3+0x30);
 464:	80 91 91 00 	lds	r24, 0x0091
 468:	80 5d       	subi	r24, 0xD0	; 208
 46a:	0e 94 90 02 	call	0x520	; 0x520 <data>
	data(e1+0x30);
 46e:	80 91 92 00 	lds	r24, 0x0092
 472:	80 5d       	subi	r24, 0xD0	; 208
 474:	0e 94 90 02 	call	0x520	; 0x520 <data>
}	
 478:	cf 91       	pop	r28
 47a:	df 91       	pop	r29
 47c:	08 95       	ret

0000047e <display>:
void display (const char *s)
{
 47e:	df 93       	push	r29
 480:	cf 93       	push	r28
 482:	00 d0       	rcall	.+0      	; 0x484 <display+0x6>
 484:	cd b7       	in	r28, 0x3d	; 61
 486:	de b7       	in	r29, 0x3e	; 62
 488:	9a 83       	std	Y+2, r25	; 0x02
 48a:	89 83       	std	Y+1, r24	; 0x01
	while(*s)
 48c:	10 c0       	rjmp	.+32     	; 0x4ae <display+0x30>
	{
		data(*s++);
 48e:	89 81       	ldd	r24, Y+1	; 0x01
 490:	9a 81       	ldd	r25, Y+2	; 0x02
 492:	fc 01       	movw	r30, r24
 494:	20 81       	ld	r18, Z
 496:	89 81       	ldd	r24, Y+1	; 0x01
 498:	9a 81       	ldd	r25, Y+2	; 0x02
 49a:	01 96       	adiw	r24, 0x01	; 1
 49c:	9a 83       	std	Y+2, r25	; 0x02
 49e:	89 83       	std	Y+1, r24	; 0x01
 4a0:	82 2f       	mov	r24, r18
 4a2:	0e 94 90 02 	call	0x520	; 0x520 <data>
		delay(2);
 4a6:	82 e0       	ldi	r24, 0x02	; 2
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	0e 94 be 02 	call	0x57c	; 0x57c <delay>
	data(e3+0x30);
	data(e1+0x30);
}	
void display (const char *s)
{
	while(*s)
 4ae:	89 81       	ldd	r24, Y+1	; 0x01
 4b0:	9a 81       	ldd	r25, Y+2	; 0x02
 4b2:	fc 01       	movw	r30, r24
 4b4:	80 81       	ld	r24, Z
 4b6:	88 23       	and	r24, r24
 4b8:	51 f7       	brne	.-44     	; 0x48e <display+0x10>
	{
		data(*s++);
		delay(2);
	}
}	
 4ba:	0f 90       	pop	r0
 4bc:	0f 90       	pop	r0
 4be:	cf 91       	pop	r28
 4c0:	df 91       	pop	r29
 4c2:	08 95       	ret

000004c4 <command>:
			
void command(char c)
{
 4c4:	df 93       	push	r29
 4c6:	cf 93       	push	r28
 4c8:	0f 92       	push	r0
 4ca:	cd b7       	in	r28, 0x3d	; 61
 4cc:	de b7       	in	r29, 0x3e	; 62
 4ce:	89 83       	std	Y+1, r24	; 0x01
	PORTC=c;
 4d0:	85 e3       	ldi	r24, 0x35	; 53
 4d2:	90 e0       	ldi	r25, 0x00	; 0
 4d4:	29 81       	ldd	r18, Y+1	; 0x01
 4d6:	fc 01       	movw	r30, r24
 4d8:	20 83       	st	Z, r18
	PORTD&=~(1<<6);
 4da:	82 e3       	ldi	r24, 0x32	; 50
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	22 e3       	ldi	r18, 0x32	; 50
 4e0:	30 e0       	ldi	r19, 0x00	; 0
 4e2:	f9 01       	movw	r30, r18
 4e4:	20 81       	ld	r18, Z
 4e6:	2f 7b       	andi	r18, 0xBF	; 191
 4e8:	fc 01       	movw	r30, r24
 4ea:	20 83       	st	Z, r18
	PORTD|=(1<<7);
 4ec:	82 e3       	ldi	r24, 0x32	; 50
 4ee:	90 e0       	ldi	r25, 0x00	; 0
 4f0:	22 e3       	ldi	r18, 0x32	; 50
 4f2:	30 e0       	ldi	r19, 0x00	; 0
 4f4:	f9 01       	movw	r30, r18
 4f6:	20 81       	ld	r18, Z
 4f8:	20 68       	ori	r18, 0x80	; 128
 4fa:	fc 01       	movw	r30, r24
 4fc:	20 83       	st	Z, r18
	delay(2);
 4fe:	82 e0       	ldi	r24, 0x02	; 2
 500:	90 e0       	ldi	r25, 0x00	; 0
 502:	0e 94 be 02 	call	0x57c	; 0x57c <delay>
	PORTD&=~(1<<7);
 506:	82 e3       	ldi	r24, 0x32	; 50
 508:	90 e0       	ldi	r25, 0x00	; 0
 50a:	22 e3       	ldi	r18, 0x32	; 50
 50c:	30 e0       	ldi	r19, 0x00	; 0
 50e:	f9 01       	movw	r30, r18
 510:	20 81       	ld	r18, Z
 512:	2f 77       	andi	r18, 0x7F	; 127
 514:	fc 01       	movw	r30, r24
 516:	20 83       	st	Z, r18
}
 518:	0f 90       	pop	r0
 51a:	cf 91       	pop	r28
 51c:	df 91       	pop	r29
 51e:	08 95       	ret

00000520 <data>:
void data(char d)
{
 520:	df 93       	push	r29
 522:	cf 93       	push	r28
 524:	0f 92       	push	r0
 526:	cd b7       	in	r28, 0x3d	; 61
 528:	de b7       	in	r29, 0x3e	; 62
 52a:	89 83       	std	Y+1, r24	; 0x01
	PORTC=d;
 52c:	85 e3       	ldi	r24, 0x35	; 53
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	29 81       	ldd	r18, Y+1	; 0x01
 532:	fc 01       	movw	r30, r24
 534:	20 83       	st	Z, r18
	PORTD|=(1<<6);
 536:	82 e3       	ldi	r24, 0x32	; 50
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	22 e3       	ldi	r18, 0x32	; 50
 53c:	30 e0       	ldi	r19, 0x00	; 0
 53e:	f9 01       	movw	r30, r18
 540:	20 81       	ld	r18, Z
 542:	20 64       	ori	r18, 0x40	; 64
 544:	fc 01       	movw	r30, r24
 546:	20 83       	st	Z, r18
	PORTD|=(1<<7);
 548:	82 e3       	ldi	r24, 0x32	; 50
 54a:	90 e0       	ldi	r25, 0x00	; 0
 54c:	22 e3       	ldi	r18, 0x32	; 50
 54e:	30 e0       	ldi	r19, 0x00	; 0
 550:	f9 01       	movw	r30, r18
 552:	20 81       	ld	r18, Z
 554:	20 68       	ori	r18, 0x80	; 128
 556:	fc 01       	movw	r30, r24
 558:	20 83       	st	Z, r18
	delay(2);
 55a:	82 e0       	ldi	r24, 0x02	; 2
 55c:	90 e0       	ldi	r25, 0x00	; 0
 55e:	0e 94 be 02 	call	0x57c	; 0x57c <delay>
	PORTD&=~(1<<7);
 562:	82 e3       	ldi	r24, 0x32	; 50
 564:	90 e0       	ldi	r25, 0x00	; 0
 566:	22 e3       	ldi	r18, 0x32	; 50
 568:	30 e0       	ldi	r19, 0x00	; 0
 56a:	f9 01       	movw	r30, r18
 56c:	20 81       	ld	r18, Z
 56e:	2f 77       	andi	r18, 0x7F	; 127
 570:	fc 01       	movw	r30, r24
 572:	20 83       	st	Z, r18
}
 574:	0f 90       	pop	r0
 576:	cf 91       	pop	r28
 578:	df 91       	pop	r29
 57a:	08 95       	ret

0000057c <delay>:
void delay(int x)
{
 57c:	df 93       	push	r29
 57e:	cf 93       	push	r28
 580:	00 d0       	rcall	.+0      	; 0x582 <delay+0x6>
 582:	00 d0       	rcall	.+0      	; 0x584 <delay+0x8>
 584:	00 d0       	rcall	.+0      	; 0x586 <delay+0xa>
 586:	cd b7       	in	r28, 0x3d	; 61
 588:	de b7       	in	r29, 0x3e	; 62
 58a:	9e 83       	std	Y+6, r25	; 0x06
 58c:	8d 83       	std	Y+5, r24	; 0x05
	int i,j;
	for(i=0;i<x;i++)
 58e:	1a 82       	std	Y+2, r1	; 0x02
 590:	19 82       	std	Y+1, r1	; 0x01
 592:	13 c0       	rjmp	.+38     	; 0x5ba <delay+0x3e>
	for(j=0;j<1000;j++);
 594:	1c 82       	std	Y+4, r1	; 0x04
 596:	1b 82       	std	Y+3, r1	; 0x03
 598:	05 c0       	rjmp	.+10     	; 0x5a4 <delay+0x28>
 59a:	8b 81       	ldd	r24, Y+3	; 0x03
 59c:	9c 81       	ldd	r25, Y+4	; 0x04
 59e:	01 96       	adiw	r24, 0x01	; 1
 5a0:	9c 83       	std	Y+4, r25	; 0x04
 5a2:	8b 83       	std	Y+3, r24	; 0x03
 5a4:	8b 81       	ldd	r24, Y+3	; 0x03
 5a6:	9c 81       	ldd	r25, Y+4	; 0x04
 5a8:	23 e0       	ldi	r18, 0x03	; 3
 5aa:	88 3e       	cpi	r24, 0xE8	; 232
 5ac:	92 07       	cpc	r25, r18
 5ae:	ac f3       	brlt	.-22     	; 0x59a <delay+0x1e>
	PORTD&=~(1<<7);
}
void delay(int x)
{
	int i,j;
	for(i=0;i<x;i++)
 5b0:	89 81       	ldd	r24, Y+1	; 0x01
 5b2:	9a 81       	ldd	r25, Y+2	; 0x02
 5b4:	01 96       	adiw	r24, 0x01	; 1
 5b6:	9a 83       	std	Y+2, r25	; 0x02
 5b8:	89 83       	std	Y+1, r24	; 0x01
 5ba:	29 81       	ldd	r18, Y+1	; 0x01
 5bc:	3a 81       	ldd	r19, Y+2	; 0x02
 5be:	8d 81       	ldd	r24, Y+5	; 0x05
 5c0:	9e 81       	ldd	r25, Y+6	; 0x06
 5c2:	28 17       	cp	r18, r24
 5c4:	39 07       	cpc	r19, r25
 5c6:	34 f3       	brlt	.-52     	; 0x594 <delay+0x18>
	for(j=0;j<1000;j++);
 5c8:	26 96       	adiw	r28, 0x06	; 6
 5ca:	0f b6       	in	r0, 0x3f	; 63
 5cc:	f8 94       	cli
 5ce:	de bf       	out	0x3e, r29	; 62
 5d0:	0f be       	out	0x3f, r0	; 63
 5d2:	cd bf       	out	0x3d, r28	; 61
 5d4:	cf 91       	pop	r28
 5d6:	df 91       	pop	r29
 5d8:	08 95       	ret

000005da <__udivmodqi4>:
 5da:	99 1b       	sub	r25, r25
 5dc:	79 e0       	ldi	r23, 0x09	; 9
 5de:	04 c0       	rjmp	.+8      	; 0x5e8 <__udivmodqi4_ep>

000005e0 <__udivmodqi4_loop>:
 5e0:	99 1f       	adc	r25, r25
 5e2:	96 17       	cp	r25, r22
 5e4:	08 f0       	brcs	.+2      	; 0x5e8 <__udivmodqi4_ep>
 5e6:	96 1b       	sub	r25, r22

000005e8 <__udivmodqi4_ep>:
 5e8:	88 1f       	adc	r24, r24
 5ea:	7a 95       	dec	r23
 5ec:	c9 f7       	brne	.-14     	; 0x5e0 <__udivmodqi4_loop>
 5ee:	80 95       	com	r24
 5f0:	08 95       	ret

000005f2 <_exit>:
 5f2:	f8 94       	cli

000005f4 <__stop_program>:
 5f4:	ff cf       	rjmp	.-2      	; 0x5f4 <__stop_program>
