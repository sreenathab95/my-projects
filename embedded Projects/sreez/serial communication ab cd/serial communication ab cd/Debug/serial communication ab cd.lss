
serial communication ab cd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000438  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000001  00800060  00800060  000004ac  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  000004ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000b78  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000020  00000000  00000000  00000bfd  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000073  00000000  00000000  00000c1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000023e  00000000  00000000  00000c90  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000ed  00000000  00000000  00000ece  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003c1  00000000  00000000  00000fbb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000090  00000000  00000000  0000137c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000000ed  00000000  00000000  0000140c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubtypes 0000001e  00000000  00000000  000014f9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 1a 02 	jmp	0x434	; 0x434 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
void display(const char *s);
void delay(char x);
void serialtx(const char*p);
char a1;
int main(void)
{
  7c:	0f 93       	push	r16
  7e:	1f 93       	push	r17
  80:	df 93       	push	r29
  82:	cf 93       	push	r28
  84:	cd b7       	in	r28, 0x3d	; 61
  86:	de b7       	in	r29, 0x3e	; 62
  88:	e5 97       	sbiw	r28, 0x35	; 53
  8a:	0f b6       	in	r0, 0x3f	; 63
  8c:	f8 94       	cli
  8e:	de bf       	out	0x3e, r29	; 62
  90:	0f be       	out	0x3f, r0	; 63
  92:	cd bf       	out	0x3d, r28	; 61
	DDRC=0XFF;
  94:	84 e3       	ldi	r24, 0x34	; 52
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	2f ef       	ldi	r18, 0xFF	; 255
  9a:	fc 01       	movw	r30, r24
  9c:	20 83       	st	Z, r18
	DDRD=0XFF;
  9e:	81 e3       	ldi	r24, 0x31	; 49
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	2f ef       	ldi	r18, 0xFF	; 255
  a4:	fc 01       	movw	r30, r24
  a6:	20 83       	st	Z, r18
	command(0x38);
  a8:	88 e3       	ldi	r24, 0x38	; 56
  aa:	0e 94 9e 01 	call	0x33c	; 0x33c <command>
	command(0x06);
  ae:	86 e0       	ldi	r24, 0x06	; 6
  b0:	0e 94 9e 01 	call	0x33c	; 0x33c <command>
	command(0x0C);
  b4:	8c e0       	ldi	r24, 0x0C	; 12
  b6:	0e 94 9e 01 	call	0x33c	; 0x33c <command>
	command(0x80);
  ba:	80 e8       	ldi	r24, 0x80	; 128
  bc:	0e 94 9e 01 	call	0x33c	; 0x33c <command>
	command(0x01);
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	0e 94 9e 01 	call	0x33c	; 0x33c <command>
	char a,b,c[50],c1;
	UCSRA=0x00;
  c6:	8b e2       	ldi	r24, 0x2B	; 43
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	fc 01       	movw	r30, r24
  cc:	10 82       	st	Z, r1
	UCSRB=0x18;
  ce:	8a e2       	ldi	r24, 0x2A	; 42
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	28 e1       	ldi	r18, 0x18	; 24
  d4:	fc 01       	movw	r30, r24
  d6:	20 83       	st	Z, r18
	UCSRC=0x06;
  d8:	80 e4       	ldi	r24, 0x40	; 64
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	26 e0       	ldi	r18, 0x06	; 6
  de:	fc 01       	movw	r30, r24
  e0:	20 83       	st	Z, r18
	UBRRL=0x19;
  e2:	89 e2       	ldi	r24, 0x29	; 41
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	29 e1       	ldi	r18, 0x19	; 25
  e8:	fc 01       	movw	r30, r24
  ea:	20 83       	st	Z, r18
	UBRRH=0x00;
  ec:	80 e4       	ldi	r24, 0x40	; 64
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	fc 01       	movw	r30, r24
  f2:	10 82       	st	Z, r1
  f4:	03 c0       	rjmp	.+6      	; 0xfc <main+0x80>
						}
					}																
				}									
			else
			{
				goto s2;
  f6:	00 00       	nop
  f8:	01 c0       	rjmp	.+2      	; 0xfc <main+0x80>
			}	
	}	
  fa:	00 00       	nop
	UBRRL=0x19;
	UBRRH=0x00;

    while(1)
    {
		s2: a=receive();
  fc:	0e 94 19 01 	call	0x232	; 0x232 <receive>
 100:	8a 83       	std	Y+2, r24	; 0x02
		if (a=='a')
 102:	8a 81       	ldd	r24, Y+2	; 0x02
 104:	81 36       	cpi	r24, 0x61	; 97
 106:	b9 f7       	brne	.-18     	; 0xf6 <main+0x7a>
 108:	01 c0       	rjmp	.+2      	; 0x10c <main+0x90>
		{
		s0:	 a1=receive();
			if(a1=='a')
			{
			goto s0;
 10a:	00 00       	nop
    while(1)
    {
		s2: a=receive();
		if (a=='a')
		{
		s0:	 a1=receive();
 10c:	0e 94 19 01 	call	0x232	; 0x232 <receive>
 110:	80 93 60 00 	sts	0x0060, r24
			if(a1=='a')
 114:	80 91 60 00 	lds	r24, 0x0060
 118:	81 36       	cpi	r24, 0x61	; 97
 11a:	b9 f3       	breq	.-18     	; 0x10a <main+0x8e>
			{
			goto s0;
			}
			if (a1=='b')
 11c:	80 91 60 00 	lds	r24, 0x0060
 120:	82 36       	cpi	r24, 0x62	; 98
 122:	59 f7       	brne	.-42     	; 0xfa <main+0x7e>
			{
							
				while(1)
				{
					s1:c[b]=receive();
 124:	89 81       	ldd	r24, Y+1	; 0x01
 126:	08 2f       	mov	r16, r24
 128:	10 e0       	ldi	r17, 0x00	; 0
 12a:	0e 94 19 01 	call	0x232	; 0x232 <receive>
 12e:	28 2f       	mov	r18, r24
 130:	ce 01       	movw	r24, r28
 132:	04 96       	adiw	r24, 0x04	; 4
 134:	80 0f       	add	r24, r16
 136:	91 1f       	adc	r25, r17
 138:	fc 01       	movw	r30, r24
 13a:	20 83       	st	Z, r18
 13c:	01 c0       	rjmp	.+2      	; 0x140 <main+0xc4>
							/*b++;*/
							goto s1;
						}
 						else 
 						{
 							goto s4;
 13e:	00 00       	nop
			{
							
				while(1)
				{
					s1:c[b]=receive();
					s4:if(c[b]=='a')
 140:	89 81       	ldd	r24, Y+1	; 0x01
 142:	88 2f       	mov	r24, r24
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	9e 01       	movw	r18, r28
 148:	2c 5f       	subi	r18, 0xFC	; 252
 14a:	3f 4f       	sbci	r19, 0xFF	; 255
 14c:	82 0f       	add	r24, r18
 14e:	93 1f       	adc	r25, r19
 150:	fc 01       	movw	r30, r24
 152:	80 81       	ld	r24, Z
 154:	81 36       	cpi	r24, 0x61	; 97
 156:	e9 f4       	brne	.+58     	; 0x192 <main+0x116>
					{
						b++;
 158:	89 81       	ldd	r24, Y+1	; 0x01
 15a:	8f 5f       	subi	r24, 0xFF	; 255
 15c:	89 83       	std	Y+1, r24	; 0x01
						c[b]=receive();
 15e:	89 81       	ldd	r24, Y+1	; 0x01
 160:	08 2f       	mov	r16, r24
 162:	10 e0       	ldi	r17, 0x00	; 0
 164:	0e 94 19 01 	call	0x232	; 0x232 <receive>
 168:	28 2f       	mov	r18, r24
 16a:	ce 01       	movw	r24, r28
 16c:	04 96       	adiw	r24, 0x04	; 4
 16e:	80 0f       	add	r24, r16
 170:	91 1f       	adc	r25, r17
 172:	fc 01       	movw	r30, r24
 174:	20 83       	st	Z, r18
						if (c[b]=='b')
 176:	89 81       	ldd	r24, Y+1	; 0x01
 178:	88 2f       	mov	r24, r24
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	9e 01       	movw	r18, r28
 17e:	2c 5f       	subi	r18, 0xFC	; 252
 180:	3f 4f       	sbci	r19, 0xFF	; 255
 182:	82 0f       	add	r24, r18
 184:	93 1f       	adc	r25, r19
 186:	fc 01       	movw	r30, r24
 188:	80 81       	ld	r24, Z
 18a:	82 36       	cpi	r24, 0x62	; 98
 18c:	c1 f6       	brne	.-80     	; 0x13e <main+0xc2>
						{
							b=0;
 18e:	19 82       	std	Y+1, r1	; 0x01
							/*b++;*/
							goto s1;
 190:	c9 cf       	rjmp	.-110    	; 0x124 <main+0xa8>
 						else 
 						{
 							goto s4;
 						}
					}
				if(c[b]=='c')					
 192:	89 81       	ldd	r24, Y+1	; 0x01
 194:	88 2f       	mov	r24, r24
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	9e 01       	movw	r18, r28
 19a:	2c 5f       	subi	r18, 0xFC	; 252
 19c:	3f 4f       	sbci	r19, 0xFF	; 255
 19e:	82 0f       	add	r24, r18
 1a0:	93 1f       	adc	r25, r19
 1a2:	fc 01       	movw	r30, r24
 1a4:	80 81       	ld	r24, Z
 1a6:	83 36       	cpi	r24, 0x63	; 99
 1a8:	09 f0       	breq	.+2      	; 0x1ac <main+0x130>
 1aa:	3f c0       	rjmp	.+126    	; 0x22a <main+0x1ae>
					{
						s3:
						c1=receive();
 1ac:	0e 94 19 01 	call	0x232	; 0x232 <receive>
 1b0:	8b 83       	std	Y+3, r24	; 0x03
						if(c1=='d')
 1b2:	8b 81       	ldd	r24, Y+3	; 0x03
 1b4:	84 36       	cpi	r24, 0x64	; 100
 1b6:	99 f4       	brne	.+38     	; 0x1de <main+0x162>
						{		
							c[b]='\0';
 1b8:	89 81       	ldd	r24, Y+1	; 0x01
 1ba:	88 2f       	mov	r24, r24
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	9e 01       	movw	r18, r28
 1c0:	2c 5f       	subi	r18, 0xFC	; 252
 1c2:	3f 4f       	sbci	r19, 0xFF	; 255
 1c4:	82 0f       	add	r24, r18
 1c6:	93 1f       	adc	r25, r19
 1c8:	fc 01       	movw	r30, r24
 1ca:	10 82       	st	Z, r1
							command(0x80);
 1cc:	80 e8       	ldi	r24, 0x80	; 128
 1ce:	0e 94 9e 01 	call	0x33c	; 0x33c <command>
							display(c);
 1d2:	ce 01       	movw	r24, r28
 1d4:	04 96       	adiw	r24, 0x04	; 4
 1d6:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <display>
							break;
 1da:	00 00       	nop
				}									
			else
			{
				goto s2;
			}	
	}	
 1dc:	8f cf       	rjmp	.-226    	; 0xfc <main+0x80>
							c[b]='\0';
							command(0x80);
							display(c);
							break;
						}
						if(c1=='c')
 1de:	8b 81       	ldd	r24, Y+3	; 0x03
 1e0:	83 36       	cpi	r24, 0x63	; 99
 1e2:	79 f4       	brne	.+30     	; 0x202 <main+0x186>
						{
							b++;
 1e4:	89 81       	ldd	r24, Y+1	; 0x01
 1e6:	8f 5f       	subi	r24, 0xFF	; 255
 1e8:	89 83       	std	Y+1, r24	; 0x01
							c[b]=c1;
 1ea:	89 81       	ldd	r24, Y+1	; 0x01
 1ec:	88 2f       	mov	r24, r24
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	9e 01       	movw	r18, r28
 1f2:	2c 5f       	subi	r18, 0xFC	; 252
 1f4:	3f 4f       	sbci	r19, 0xFF	; 255
 1f6:	82 0f       	add	r24, r18
 1f8:	93 1f       	adc	r25, r19
 1fa:	2b 81       	ldd	r18, Y+3	; 0x03
 1fc:	fc 01       	movw	r30, r24
 1fe:	20 83       	st	Z, r18
						//	command(0xc0);
						//	data(c[b]+0x30);
							goto s3;
 200:	d5 cf       	rjmp	.-86     	; 0x1ac <main+0x130>
						}								
						if(c1!='c'&&c1!='d')
 202:	8b 81       	ldd	r24, Y+3	; 0x03
 204:	83 36       	cpi	r24, 0x63	; 99
 206:	89 f0       	breq	.+34     	; 0x22a <main+0x1ae>
 208:	8b 81       	ldd	r24, Y+3	; 0x03
 20a:	84 36       	cpi	r24, 0x64	; 100
 20c:	71 f0       	breq	.+28     	; 0x22a <main+0x1ae>
						{
							b++;
 20e:	89 81       	ldd	r24, Y+1	; 0x01
 210:	8f 5f       	subi	r24, 0xFF	; 255
 212:	89 83       	std	Y+1, r24	; 0x01
							c[b]=c1;
 214:	89 81       	ldd	r24, Y+1	; 0x01
 216:	88 2f       	mov	r24, r24
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	9e 01       	movw	r18, r28
 21c:	2c 5f       	subi	r18, 0xFC	; 252
 21e:	3f 4f       	sbci	r19, 0xFF	; 255
 220:	82 0f       	add	r24, r18
 222:	93 1f       	adc	r25, r19
 224:	2b 81       	ldd	r18, Y+3	; 0x03
 226:	fc 01       	movw	r30, r24
 228:	20 83       	st	Z, r18
							//b++;
						}							
							
					}
	
					b++;
 22a:	89 81       	ldd	r24, Y+1	; 0x01
 22c:	8f 5f       	subi	r24, 0xFF	; 255
 22e:	89 83       	std	Y+1, r24	; 0x01
					goto s1;
 230:	79 cf       	rjmp	.-270    	; 0x124 <main+0xa8>

00000232 <receive>:
				goto s2;
			}	
	}	
}
char receive()
{
 232:	df 93       	push	r29
 234:	cf 93       	push	r28
 236:	cd b7       	in	r28, 0x3d	; 61
 238:	de b7       	in	r29, 0x3e	; 62
	UCSRA&=~(1<<RXC);
 23a:	8b e2       	ldi	r24, 0x2B	; 43
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	2b e2       	ldi	r18, 0x2B	; 43
 240:	30 e0       	ldi	r19, 0x00	; 0
 242:	f9 01       	movw	r30, r18
 244:	20 81       	ld	r18, Z
 246:	2f 77       	andi	r18, 0x7F	; 127
 248:	fc 01       	movw	r30, r24
 24a:	20 83       	st	Z, r18
	while((UCSRA&(1<<RXC))==0);
 24c:	00 00       	nop
 24e:	8b e2       	ldi	r24, 0x2B	; 43
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	fc 01       	movw	r30, r24
 254:	80 81       	ld	r24, Z
 256:	88 23       	and	r24, r24
 258:	d4 f7       	brge	.-12     	; 0x24e <receive+0x1c>
	return(UDR);
 25a:	8c e2       	ldi	r24, 0x2C	; 44
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	fc 01       	movw	r30, r24
 260:	80 81       	ld	r24, Z
}
 262:	cf 91       	pop	r28
 264:	df 91       	pop	r29
 266:	08 95       	ret

00000268 <transmit>:
void transmit(char t)
{
 268:	df 93       	push	r29
 26a:	cf 93       	push	r28
 26c:	0f 92       	push	r0
 26e:	cd b7       	in	r28, 0x3d	; 61
 270:	de b7       	in	r29, 0x3e	; 62
 272:	89 83       	std	Y+1, r24	; 0x01
	UDR=t;
 274:	8c e2       	ldi	r24, 0x2C	; 44
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	29 81       	ldd	r18, Y+1	; 0x01
 27a:	fc 01       	movw	r30, r24
 27c:	20 83       	st	Z, r18
	while((UCSRA&(1<<UDRE))==0x00);
 27e:	00 00       	nop
 280:	8b e2       	ldi	r24, 0x2B	; 43
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	fc 01       	movw	r30, r24
 286:	80 81       	ld	r24, Z
 288:	88 2f       	mov	r24, r24
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	80 72       	andi	r24, 0x20	; 32
 28e:	90 70       	andi	r25, 0x00	; 0
 290:	00 97       	sbiw	r24, 0x00	; 0
 292:	b1 f3       	breq	.-20     	; 0x280 <transmit+0x18>
}
 294:	0f 90       	pop	r0
 296:	cf 91       	pop	r28
 298:	df 91       	pop	r29
 29a:	08 95       	ret

0000029c <serialtx>:
void serialtx(const char*p)
{
 29c:	df 93       	push	r29
 29e:	cf 93       	push	r28
 2a0:	00 d0       	rcall	.+0      	; 0x2a2 <serialtx+0x6>
 2a2:	cd b7       	in	r28, 0x3d	; 61
 2a4:	de b7       	in	r29, 0x3e	; 62
 2a6:	9a 83       	std	Y+2, r25	; 0x02
 2a8:	89 83       	std	Y+1, r24	; 0x01
	while(*p)
 2aa:	0f c0       	rjmp	.+30     	; 0x2ca <serialtx+0x2e>
	{
		transmit(*p++);
 2ac:	89 81       	ldd	r24, Y+1	; 0x01
 2ae:	9a 81       	ldd	r25, Y+2	; 0x02
 2b0:	fc 01       	movw	r30, r24
 2b2:	20 81       	ld	r18, Z
 2b4:	89 81       	ldd	r24, Y+1	; 0x01
 2b6:	9a 81       	ldd	r25, Y+2	; 0x02
 2b8:	01 96       	adiw	r24, 0x01	; 1
 2ba:	9a 83       	std	Y+2, r25	; 0x02
 2bc:	89 83       	std	Y+1, r24	; 0x01
 2be:	82 2f       	mov	r24, r18
 2c0:	0e 94 34 01 	call	0x268	; 0x268 <transmit>
		delay(2);
 2c4:	82 e0       	ldi	r24, 0x02	; 2
 2c6:	0e 94 70 01 	call	0x2e0	; 0x2e0 <delay>
	UDR=t;
	while((UCSRA&(1<<UDRE))==0x00);
}
void serialtx(const char*p)
{
	while(*p)
 2ca:	89 81       	ldd	r24, Y+1	; 0x01
 2cc:	9a 81       	ldd	r25, Y+2	; 0x02
 2ce:	fc 01       	movw	r30, r24
 2d0:	80 81       	ld	r24, Z
 2d2:	88 23       	and	r24, r24
 2d4:	59 f7       	brne	.-42     	; 0x2ac <serialtx+0x10>
	{
		transmit(*p++);
		delay(2);
	}
}
 2d6:	0f 90       	pop	r0
 2d8:	0f 90       	pop	r0
 2da:	cf 91       	pop	r28
 2dc:	df 91       	pop	r29
 2de:	08 95       	ret

000002e0 <delay>:
void delay(char x)
{
 2e0:	df 93       	push	r29
 2e2:	cf 93       	push	r28
 2e4:	00 d0       	rcall	.+0      	; 0x2e6 <delay+0x6>
 2e6:	00 d0       	rcall	.+0      	; 0x2e8 <delay+0x8>
 2e8:	0f 92       	push	r0
 2ea:	cd b7       	in	r28, 0x3d	; 61
 2ec:	de b7       	in	r29, 0x3e	; 62
 2ee:	8d 83       	std	Y+5, r24	; 0x05
	int i,j;
	for(i=0;i<=x;i++)
 2f0:	1a 82       	std	Y+2, r1	; 0x02
 2f2:	19 82       	std	Y+1, r1	; 0x01
 2f4:	13 c0       	rjmp	.+38     	; 0x31c <delay+0x3c>
	for(j=0;j<=1000;j++);
 2f6:	1c 82       	std	Y+4, r1	; 0x04
 2f8:	1b 82       	std	Y+3, r1	; 0x03
 2fa:	05 c0       	rjmp	.+10     	; 0x306 <delay+0x26>
 2fc:	8b 81       	ldd	r24, Y+3	; 0x03
 2fe:	9c 81       	ldd	r25, Y+4	; 0x04
 300:	01 96       	adiw	r24, 0x01	; 1
 302:	9c 83       	std	Y+4, r25	; 0x04
 304:	8b 83       	std	Y+3, r24	; 0x03
 306:	8b 81       	ldd	r24, Y+3	; 0x03
 308:	9c 81       	ldd	r25, Y+4	; 0x04
 30a:	23 e0       	ldi	r18, 0x03	; 3
 30c:	89 3e       	cpi	r24, 0xE9	; 233
 30e:	92 07       	cpc	r25, r18
 310:	ac f3       	brlt	.-22     	; 0x2fc <delay+0x1c>
	}
}
void delay(char x)
{
	int i,j;
	for(i=0;i<=x;i++)
 312:	89 81       	ldd	r24, Y+1	; 0x01
 314:	9a 81       	ldd	r25, Y+2	; 0x02
 316:	01 96       	adiw	r24, 0x01	; 1
 318:	9a 83       	std	Y+2, r25	; 0x02
 31a:	89 83       	std	Y+1, r24	; 0x01
 31c:	8d 81       	ldd	r24, Y+5	; 0x05
 31e:	28 2f       	mov	r18, r24
 320:	30 e0       	ldi	r19, 0x00	; 0
 322:	89 81       	ldd	r24, Y+1	; 0x01
 324:	9a 81       	ldd	r25, Y+2	; 0x02
 326:	28 17       	cp	r18, r24
 328:	39 07       	cpc	r19, r25
 32a:	2c f7       	brge	.-54     	; 0x2f6 <delay+0x16>
	for(j=0;j<=1000;j++);
}
 32c:	0f 90       	pop	r0
 32e:	0f 90       	pop	r0
 330:	0f 90       	pop	r0
 332:	0f 90       	pop	r0
 334:	0f 90       	pop	r0
 336:	cf 91       	pop	r28
 338:	df 91       	pop	r29
 33a:	08 95       	ret

0000033c <command>:
void command(char c)
{
 33c:	df 93       	push	r29
 33e:	cf 93       	push	r28
 340:	0f 92       	push	r0
 342:	cd b7       	in	r28, 0x3d	; 61
 344:	de b7       	in	r29, 0x3e	; 62
 346:	89 83       	std	Y+1, r24	; 0x01
	PORTC=c;
 348:	85 e3       	ldi	r24, 0x35	; 53
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	29 81       	ldd	r18, Y+1	; 0x01
 34e:	fc 01       	movw	r30, r24
 350:	20 83       	st	Z, r18
	PORTD&=~(1<<6);
 352:	82 e3       	ldi	r24, 0x32	; 50
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	22 e3       	ldi	r18, 0x32	; 50
 358:	30 e0       	ldi	r19, 0x00	; 0
 35a:	f9 01       	movw	r30, r18
 35c:	20 81       	ld	r18, Z
 35e:	2f 7b       	andi	r18, 0xBF	; 191
 360:	fc 01       	movw	r30, r24
 362:	20 83       	st	Z, r18
	PORTD|=(1<<7);
 364:	82 e3       	ldi	r24, 0x32	; 50
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	22 e3       	ldi	r18, 0x32	; 50
 36a:	30 e0       	ldi	r19, 0x00	; 0
 36c:	f9 01       	movw	r30, r18
 36e:	20 81       	ld	r18, Z
 370:	20 68       	ori	r18, 0x80	; 128
 372:	fc 01       	movw	r30, r24
 374:	20 83       	st	Z, r18
	delay(2);
 376:	82 e0       	ldi	r24, 0x02	; 2
 378:	0e 94 70 01 	call	0x2e0	; 0x2e0 <delay>
	PORTD&=~(1<<7);
 37c:	82 e3       	ldi	r24, 0x32	; 50
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	22 e3       	ldi	r18, 0x32	; 50
 382:	30 e0       	ldi	r19, 0x00	; 0
 384:	f9 01       	movw	r30, r18
 386:	20 81       	ld	r18, Z
 388:	2f 77       	andi	r18, 0x7F	; 127
 38a:	fc 01       	movw	r30, r24
 38c:	20 83       	st	Z, r18
}
 38e:	0f 90       	pop	r0
 390:	cf 91       	pop	r28
 392:	df 91       	pop	r29
 394:	08 95       	ret

00000396 <data>:
void data(char d)
{
 396:	df 93       	push	r29
 398:	cf 93       	push	r28
 39a:	0f 92       	push	r0
 39c:	cd b7       	in	r28, 0x3d	; 61
 39e:	de b7       	in	r29, 0x3e	; 62
 3a0:	89 83       	std	Y+1, r24	; 0x01
	PORTC=d;
 3a2:	85 e3       	ldi	r24, 0x35	; 53
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	29 81       	ldd	r18, Y+1	; 0x01
 3a8:	fc 01       	movw	r30, r24
 3aa:	20 83       	st	Z, r18
	PORTD|=(1<<6);
 3ac:	82 e3       	ldi	r24, 0x32	; 50
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	22 e3       	ldi	r18, 0x32	; 50
 3b2:	30 e0       	ldi	r19, 0x00	; 0
 3b4:	f9 01       	movw	r30, r18
 3b6:	20 81       	ld	r18, Z
 3b8:	20 64       	ori	r18, 0x40	; 64
 3ba:	fc 01       	movw	r30, r24
 3bc:	20 83       	st	Z, r18
	PORTD|=(1<<7);
 3be:	82 e3       	ldi	r24, 0x32	; 50
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	22 e3       	ldi	r18, 0x32	; 50
 3c4:	30 e0       	ldi	r19, 0x00	; 0
 3c6:	f9 01       	movw	r30, r18
 3c8:	20 81       	ld	r18, Z
 3ca:	20 68       	ori	r18, 0x80	; 128
 3cc:	fc 01       	movw	r30, r24
 3ce:	20 83       	st	Z, r18
	delay(2);
 3d0:	82 e0       	ldi	r24, 0x02	; 2
 3d2:	0e 94 70 01 	call	0x2e0	; 0x2e0 <delay>
	PORTD&=~(1<<7);
 3d6:	82 e3       	ldi	r24, 0x32	; 50
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	22 e3       	ldi	r18, 0x32	; 50
 3dc:	30 e0       	ldi	r19, 0x00	; 0
 3de:	f9 01       	movw	r30, r18
 3e0:	20 81       	ld	r18, Z
 3e2:	2f 77       	andi	r18, 0x7F	; 127
 3e4:	fc 01       	movw	r30, r24
 3e6:	20 83       	st	Z, r18
}
 3e8:	0f 90       	pop	r0
 3ea:	cf 91       	pop	r28
 3ec:	df 91       	pop	r29
 3ee:	08 95       	ret

000003f0 <display>:
void display (const char *s)
{
 3f0:	df 93       	push	r29
 3f2:	cf 93       	push	r28
 3f4:	00 d0       	rcall	.+0      	; 0x3f6 <display+0x6>
 3f6:	cd b7       	in	r28, 0x3d	; 61
 3f8:	de b7       	in	r29, 0x3e	; 62
 3fa:	9a 83       	std	Y+2, r25	; 0x02
 3fc:	89 83       	std	Y+1, r24	; 0x01
	while(*s)
 3fe:	0f c0       	rjmp	.+30     	; 0x41e <display+0x2e>
	{
		data(*s++);
 400:	89 81       	ldd	r24, Y+1	; 0x01
 402:	9a 81       	ldd	r25, Y+2	; 0x02
 404:	fc 01       	movw	r30, r24
 406:	20 81       	ld	r18, Z
 408:	89 81       	ldd	r24, Y+1	; 0x01
 40a:	9a 81       	ldd	r25, Y+2	; 0x02
 40c:	01 96       	adiw	r24, 0x01	; 1
 40e:	9a 83       	std	Y+2, r25	; 0x02
 410:	89 83       	std	Y+1, r24	; 0x01
 412:	82 2f       	mov	r24, r18
 414:	0e 94 cb 01 	call	0x396	; 0x396 <data>
		delay(2);
 418:	82 e0       	ldi	r24, 0x02	; 2
 41a:	0e 94 70 01 	call	0x2e0	; 0x2e0 <delay>
	delay(2);
	PORTD&=~(1<<7);
}
void display (const char *s)
{
	while(*s)
 41e:	89 81       	ldd	r24, Y+1	; 0x01
 420:	9a 81       	ldd	r25, Y+2	; 0x02
 422:	fc 01       	movw	r30, r24
 424:	80 81       	ld	r24, Z
 426:	88 23       	and	r24, r24
 428:	59 f7       	brne	.-42     	; 0x400 <display+0x10>
	{
		data(*s++);
		delay(2);
	}
}	
 42a:	0f 90       	pop	r0
 42c:	0f 90       	pop	r0
 42e:	cf 91       	pop	r28
 430:	df 91       	pop	r29
 432:	08 95       	ret

00000434 <_exit>:
 434:	f8 94       	cli

00000436 <__stop_program>:
 436:	ff cf       	rjmp	.-2      	; 0x436 <__stop_program>
