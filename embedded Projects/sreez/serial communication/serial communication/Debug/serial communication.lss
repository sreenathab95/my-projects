
serial communication.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000362  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  000003b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000085  00000000  00000000  00000a84  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000020  00000000  00000000  00000b09  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000006c  00000000  00000000  00000b29  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000001ed  00000000  00000000  00000b95  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000e7  00000000  00000000  00000d82  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000318  00000000  00000000  00000e69  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000090  00000000  00000000  00001184  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000db  00000000  00000000  00001214  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubtypes 0000001e  00000000  00000000  000012ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  0000130d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 af 01 	jmp	0x35e	; 0x35e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
void data(char d);
void display(const char *s);
void delay(char x);
void serialtx(const char*p);
int main(void)
{
  6c:	0f 93       	push	r16
  6e:	1f 93       	push	r17
  70:	df 93       	push	r29
  72:	cf 93       	push	r28
  74:	cd b7       	in	r28, 0x3d	; 61
  76:	de b7       	in	r29, 0x3e	; 62
  78:	e4 97       	sbiw	r28, 0x34	; 52
  7a:	0f b6       	in	r0, 0x3f	; 63
  7c:	f8 94       	cli
  7e:	de bf       	out	0x3e, r29	; 62
  80:	0f be       	out	0x3f, r0	; 63
  82:	cd bf       	out	0x3d, r28	; 61
	DDRC=0XFF;
  84:	84 e3       	ldi	r24, 0x34	; 52
  86:	90 e0       	ldi	r25, 0x00	; 0
  88:	2f ef       	ldi	r18, 0xFF	; 255
  8a:	fc 01       	movw	r30, r24
  8c:	20 83       	st	Z, r18
	DDRD=0XFF;
  8e:	81 e3       	ldi	r24, 0x31	; 49
  90:	90 e0       	ldi	r25, 0x00	; 0
  92:	2f ef       	ldi	r18, 0xFF	; 255
  94:	fc 01       	movw	r30, r24
  96:	20 83       	st	Z, r18
	command(0x38);
  98:	88 e3       	ldi	r24, 0x38	; 56
  9a:	0e 94 33 01 	call	0x266	; 0x266 <command>
	command(0x06);
  9e:	86 e0       	ldi	r24, 0x06	; 6
  a0:	0e 94 33 01 	call	0x266	; 0x266 <command>
	command(0x0C);
  a4:	8c e0       	ldi	r24, 0x0C	; 12
  a6:	0e 94 33 01 	call	0x266	; 0x266 <command>
	command(0x80);
  aa:	80 e8       	ldi	r24, 0x80	; 128
  ac:	0e 94 33 01 	call	0x266	; 0x266 <command>
	command(0x01);
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	0e 94 33 01 	call	0x266	; 0x266 <command>
	char a,b,c[50];
	UCSRA=0x00;
  b6:	8b e2       	ldi	r24, 0x2B	; 43
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	fc 01       	movw	r30, r24
  bc:	10 82       	st	Z, r1
	UCSRB=0x18;
  be:	8a e2       	ldi	r24, 0x2A	; 42
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	28 e1       	ldi	r18, 0x18	; 24
  c4:	fc 01       	movw	r30, r24
  c6:	20 83       	st	Z, r18
	UCSRC=0x06;
  c8:	80 e4       	ldi	r24, 0x40	; 64
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	26 e0       	ldi	r18, 0x06	; 6
  ce:	fc 01       	movw	r30, r24
  d0:	20 83       	st	Z, r18
	UBRRL=0x19;
  d2:	89 e2       	ldi	r24, 0x29	; 41
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	29 e1       	ldi	r18, 0x19	; 25
  d8:	fc 01       	movw	r30, r24
  da:	20 83       	st	Z, r18
	UBRRH=0x00;
  dc:	80 e4       	ldi	r24, 0x40	; 64
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	fc 01       	movw	r30, r24
  e2:	10 82       	st	Z, r1
  e4:	01 c0       	rjmp	.+2      	; 0xe8 <main+0x7c>
						b++;
				}
			}
		}
		
	}
  e6:	00 00       	nop
	UBRRL=0x19;
	UBRRH=0x00;

    while(1)
    {
		char a=receive();
  e8:	0e 94 ae 00 	call	0x15c	; 0x15c <receive>
  ec:	8a 83       	std	Y+2, r24	; 0x02
// 				display(c);
// 			}
// 			b++;
// 			goto s1;
// 		}
		if (a=='a')
  ee:	8a 81       	ldd	r24, Y+2	; 0x02
  f0:	81 36       	cpi	r24, 0x61	; 97
  f2:	c9 f7       	brne	.-14     	; 0xe6 <main+0x7a>
  f4:	01 c0       	rjmp	.+2      	; 0xf8 <main+0x8c>
							display(c);
							break;
						}
						b++;
				}
			}
  f6:	00 00       	nop
// 		}
		if (a=='a')
		{
			while(1)
			{
				if (a=='a')
  f8:	8a 81       	ldd	r24, Y+2	; 0x02
  fa:	81 36       	cpi	r24, 0x61	; 97
  fc:	e1 f7       	brne	.-8      	; 0xf6 <main+0x8a>
				{
					c[b]=receive();
  fe:	89 81       	ldd	r24, Y+1	; 0x01
 100:	08 2f       	mov	r16, r24
 102:	10 e0       	ldi	r17, 0x00	; 0
 104:	0e 94 ae 00 	call	0x15c	; 0x15c <receive>
 108:	28 2f       	mov	r18, r24
 10a:	ce 01       	movw	r24, r28
 10c:	03 96       	adiw	r24, 0x03	; 3
 10e:	80 0f       	add	r24, r16
 110:	91 1f       	adc	r25, r17
 112:	fc 01       	movw	r30, r24
 114:	20 83       	st	Z, r18
					if (c[b]=='a')
 116:	89 81       	ldd	r24, Y+1	; 0x01
 118:	88 2f       	mov	r24, r24
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	9e 01       	movw	r18, r28
 11e:	2d 5f       	subi	r18, 0xFD	; 253
 120:	3f 4f       	sbci	r19, 0xFF	; 255
 122:	82 0f       	add	r24, r18
 124:	93 1f       	adc	r25, r19
 126:	fc 01       	movw	r30, r24
 128:	80 81       	ld	r24, Z
 12a:	81 36       	cpi	r24, 0x61	; 97
 12c:	99 f4       	brne	.+38     	; 0x154 <main+0xe8>
						{
							c[b]='\0';
 12e:	89 81       	ldd	r24, Y+1	; 0x01
 130:	88 2f       	mov	r24, r24
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	9e 01       	movw	r18, r28
 136:	2d 5f       	subi	r18, 0xFD	; 253
 138:	3f 4f       	sbci	r19, 0xFF	; 255
 13a:	82 0f       	add	r24, r18
 13c:	93 1f       	adc	r25, r19
 13e:	fc 01       	movw	r30, r24
 140:	10 82       	st	Z, r1
							command(0x80);
 142:	80 e8       	ldi	r24, 0x80	; 128
 144:	0e 94 33 01 	call	0x266	; 0x266 <command>
							display(c);
 148:	ce 01       	movw	r24, r28
 14a:	03 96       	adiw	r24, 0x03	; 3
 14c:	0e 94 8d 01 	call	0x31a	; 0x31a <display>
							break;
 150:	00 00       	nop
						b++;
				}
			}
		}
		
	}
 152:	ca cf       	rjmp	.-108    	; 0xe8 <main+0x7c>
							c[b]='\0';
							command(0x80);
							display(c);
							break;
						}
						b++;
 154:	89 81       	ldd	r24, Y+1	; 0x01
 156:	8f 5f       	subi	r24, 0xFF	; 255
 158:	89 83       	std	Y+1, r24	; 0x01
				}
			}
 15a:	ce cf       	rjmp	.-100    	; 0xf8 <main+0x8c>

0000015c <receive>:
		
	}
	
}
char receive()
{
 15c:	df 93       	push	r29
 15e:	cf 93       	push	r28
 160:	cd b7       	in	r28, 0x3d	; 61
 162:	de b7       	in	r29, 0x3e	; 62
	UCSRA&=~(1<<RXC);
 164:	8b e2       	ldi	r24, 0x2B	; 43
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	2b e2       	ldi	r18, 0x2B	; 43
 16a:	30 e0       	ldi	r19, 0x00	; 0
 16c:	f9 01       	movw	r30, r18
 16e:	20 81       	ld	r18, Z
 170:	2f 77       	andi	r18, 0x7F	; 127
 172:	fc 01       	movw	r30, r24
 174:	20 83       	st	Z, r18
	while((UCSRA&(1<<RXC))==0);
 176:	00 00       	nop
 178:	8b e2       	ldi	r24, 0x2B	; 43
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	fc 01       	movw	r30, r24
 17e:	80 81       	ld	r24, Z
 180:	88 23       	and	r24, r24
 182:	d4 f7       	brge	.-12     	; 0x178 <receive+0x1c>
	return(UDR);
 184:	8c e2       	ldi	r24, 0x2C	; 44
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	fc 01       	movw	r30, r24
 18a:	80 81       	ld	r24, Z
}
 18c:	cf 91       	pop	r28
 18e:	df 91       	pop	r29
 190:	08 95       	ret

00000192 <transmit>:
void transmit(char t)
{
 192:	df 93       	push	r29
 194:	cf 93       	push	r28
 196:	0f 92       	push	r0
 198:	cd b7       	in	r28, 0x3d	; 61
 19a:	de b7       	in	r29, 0x3e	; 62
 19c:	89 83       	std	Y+1, r24	; 0x01
	UDR=t;
 19e:	8c e2       	ldi	r24, 0x2C	; 44
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	29 81       	ldd	r18, Y+1	; 0x01
 1a4:	fc 01       	movw	r30, r24
 1a6:	20 83       	st	Z, r18
	while((UCSRA&(1<<UDRE))==0x00);
 1a8:	00 00       	nop
 1aa:	8b e2       	ldi	r24, 0x2B	; 43
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	fc 01       	movw	r30, r24
 1b0:	80 81       	ld	r24, Z
 1b2:	88 2f       	mov	r24, r24
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	80 72       	andi	r24, 0x20	; 32
 1b8:	90 70       	andi	r25, 0x00	; 0
 1ba:	00 97       	sbiw	r24, 0x00	; 0
 1bc:	b1 f3       	breq	.-20     	; 0x1aa <transmit+0x18>
}
 1be:	0f 90       	pop	r0
 1c0:	cf 91       	pop	r28
 1c2:	df 91       	pop	r29
 1c4:	08 95       	ret

000001c6 <serialtx>:
void serialtx(const char*p)
{
 1c6:	df 93       	push	r29
 1c8:	cf 93       	push	r28
 1ca:	00 d0       	rcall	.+0      	; 0x1cc <serialtx+0x6>
 1cc:	cd b7       	in	r28, 0x3d	; 61
 1ce:	de b7       	in	r29, 0x3e	; 62
 1d0:	9a 83       	std	Y+2, r25	; 0x02
 1d2:	89 83       	std	Y+1, r24	; 0x01
	while(*p)
 1d4:	0f c0       	rjmp	.+30     	; 0x1f4 <serialtx+0x2e>
	{
		transmit(*p++);
 1d6:	89 81       	ldd	r24, Y+1	; 0x01
 1d8:	9a 81       	ldd	r25, Y+2	; 0x02
 1da:	fc 01       	movw	r30, r24
 1dc:	20 81       	ld	r18, Z
 1de:	89 81       	ldd	r24, Y+1	; 0x01
 1e0:	9a 81       	ldd	r25, Y+2	; 0x02
 1e2:	01 96       	adiw	r24, 0x01	; 1
 1e4:	9a 83       	std	Y+2, r25	; 0x02
 1e6:	89 83       	std	Y+1, r24	; 0x01
 1e8:	82 2f       	mov	r24, r18
 1ea:	0e 94 c9 00 	call	0x192	; 0x192 <transmit>
		delay(2);
 1ee:	82 e0       	ldi	r24, 0x02	; 2
 1f0:	0e 94 05 01 	call	0x20a	; 0x20a <delay>
	UDR=t;
	while((UCSRA&(1<<UDRE))==0x00);
}
void serialtx(const char*p)
{
	while(*p)
 1f4:	89 81       	ldd	r24, Y+1	; 0x01
 1f6:	9a 81       	ldd	r25, Y+2	; 0x02
 1f8:	fc 01       	movw	r30, r24
 1fa:	80 81       	ld	r24, Z
 1fc:	88 23       	and	r24, r24
 1fe:	59 f7       	brne	.-42     	; 0x1d6 <serialtx+0x10>
	{
		transmit(*p++);
		delay(2);
	}
}
 200:	0f 90       	pop	r0
 202:	0f 90       	pop	r0
 204:	cf 91       	pop	r28
 206:	df 91       	pop	r29
 208:	08 95       	ret

0000020a <delay>:
void delay(char x)
{
 20a:	df 93       	push	r29
 20c:	cf 93       	push	r28
 20e:	00 d0       	rcall	.+0      	; 0x210 <delay+0x6>
 210:	00 d0       	rcall	.+0      	; 0x212 <delay+0x8>
 212:	0f 92       	push	r0
 214:	cd b7       	in	r28, 0x3d	; 61
 216:	de b7       	in	r29, 0x3e	; 62
 218:	8d 83       	std	Y+5, r24	; 0x05
	int i,j;
	for(i=0;i<=x;i++)
 21a:	1a 82       	std	Y+2, r1	; 0x02
 21c:	19 82       	std	Y+1, r1	; 0x01
 21e:	13 c0       	rjmp	.+38     	; 0x246 <delay+0x3c>
	for(j=0;j<=1000;j++);
 220:	1c 82       	std	Y+4, r1	; 0x04
 222:	1b 82       	std	Y+3, r1	; 0x03
 224:	05 c0       	rjmp	.+10     	; 0x230 <delay+0x26>
 226:	8b 81       	ldd	r24, Y+3	; 0x03
 228:	9c 81       	ldd	r25, Y+4	; 0x04
 22a:	01 96       	adiw	r24, 0x01	; 1
 22c:	9c 83       	std	Y+4, r25	; 0x04
 22e:	8b 83       	std	Y+3, r24	; 0x03
 230:	8b 81       	ldd	r24, Y+3	; 0x03
 232:	9c 81       	ldd	r25, Y+4	; 0x04
 234:	23 e0       	ldi	r18, 0x03	; 3
 236:	89 3e       	cpi	r24, 0xE9	; 233
 238:	92 07       	cpc	r25, r18
 23a:	ac f3       	brlt	.-22     	; 0x226 <delay+0x1c>
	}
}
void delay(char x)
{
	int i,j;
	for(i=0;i<=x;i++)
 23c:	89 81       	ldd	r24, Y+1	; 0x01
 23e:	9a 81       	ldd	r25, Y+2	; 0x02
 240:	01 96       	adiw	r24, 0x01	; 1
 242:	9a 83       	std	Y+2, r25	; 0x02
 244:	89 83       	std	Y+1, r24	; 0x01
 246:	8d 81       	ldd	r24, Y+5	; 0x05
 248:	28 2f       	mov	r18, r24
 24a:	30 e0       	ldi	r19, 0x00	; 0
 24c:	89 81       	ldd	r24, Y+1	; 0x01
 24e:	9a 81       	ldd	r25, Y+2	; 0x02
 250:	28 17       	cp	r18, r24
 252:	39 07       	cpc	r19, r25
 254:	2c f7       	brge	.-54     	; 0x220 <delay+0x16>
	for(j=0;j<=1000;j++);
}
 256:	0f 90       	pop	r0
 258:	0f 90       	pop	r0
 25a:	0f 90       	pop	r0
 25c:	0f 90       	pop	r0
 25e:	0f 90       	pop	r0
 260:	cf 91       	pop	r28
 262:	df 91       	pop	r29
 264:	08 95       	ret

00000266 <command>:
void command(char c)
{
 266:	df 93       	push	r29
 268:	cf 93       	push	r28
 26a:	0f 92       	push	r0
 26c:	cd b7       	in	r28, 0x3d	; 61
 26e:	de b7       	in	r29, 0x3e	; 62
 270:	89 83       	std	Y+1, r24	; 0x01
	PORTC=c;
 272:	85 e3       	ldi	r24, 0x35	; 53
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	29 81       	ldd	r18, Y+1	; 0x01
 278:	fc 01       	movw	r30, r24
 27a:	20 83       	st	Z, r18
	PORTD&=~(1<<6);
 27c:	82 e3       	ldi	r24, 0x32	; 50
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	22 e3       	ldi	r18, 0x32	; 50
 282:	30 e0       	ldi	r19, 0x00	; 0
 284:	f9 01       	movw	r30, r18
 286:	20 81       	ld	r18, Z
 288:	2f 7b       	andi	r18, 0xBF	; 191
 28a:	fc 01       	movw	r30, r24
 28c:	20 83       	st	Z, r18
	PORTD|=(1<<7);
 28e:	82 e3       	ldi	r24, 0x32	; 50
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	22 e3       	ldi	r18, 0x32	; 50
 294:	30 e0       	ldi	r19, 0x00	; 0
 296:	f9 01       	movw	r30, r18
 298:	20 81       	ld	r18, Z
 29a:	20 68       	ori	r18, 0x80	; 128
 29c:	fc 01       	movw	r30, r24
 29e:	20 83       	st	Z, r18
	delay(2);
 2a0:	82 e0       	ldi	r24, 0x02	; 2
 2a2:	0e 94 05 01 	call	0x20a	; 0x20a <delay>
	PORTD&=~(1<<7);
 2a6:	82 e3       	ldi	r24, 0x32	; 50
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	22 e3       	ldi	r18, 0x32	; 50
 2ac:	30 e0       	ldi	r19, 0x00	; 0
 2ae:	f9 01       	movw	r30, r18
 2b0:	20 81       	ld	r18, Z
 2b2:	2f 77       	andi	r18, 0x7F	; 127
 2b4:	fc 01       	movw	r30, r24
 2b6:	20 83       	st	Z, r18
}
 2b8:	0f 90       	pop	r0
 2ba:	cf 91       	pop	r28
 2bc:	df 91       	pop	r29
 2be:	08 95       	ret

000002c0 <data>:
void data(char d)
{
 2c0:	df 93       	push	r29
 2c2:	cf 93       	push	r28
 2c4:	0f 92       	push	r0
 2c6:	cd b7       	in	r28, 0x3d	; 61
 2c8:	de b7       	in	r29, 0x3e	; 62
 2ca:	89 83       	std	Y+1, r24	; 0x01
	PORTC=d;
 2cc:	85 e3       	ldi	r24, 0x35	; 53
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	29 81       	ldd	r18, Y+1	; 0x01
 2d2:	fc 01       	movw	r30, r24
 2d4:	20 83       	st	Z, r18
	PORTD|=(1<<6);
 2d6:	82 e3       	ldi	r24, 0x32	; 50
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	22 e3       	ldi	r18, 0x32	; 50
 2dc:	30 e0       	ldi	r19, 0x00	; 0
 2de:	f9 01       	movw	r30, r18
 2e0:	20 81       	ld	r18, Z
 2e2:	20 64       	ori	r18, 0x40	; 64
 2e4:	fc 01       	movw	r30, r24
 2e6:	20 83       	st	Z, r18
	PORTD|=(1<<7);
 2e8:	82 e3       	ldi	r24, 0x32	; 50
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	22 e3       	ldi	r18, 0x32	; 50
 2ee:	30 e0       	ldi	r19, 0x00	; 0
 2f0:	f9 01       	movw	r30, r18
 2f2:	20 81       	ld	r18, Z
 2f4:	20 68       	ori	r18, 0x80	; 128
 2f6:	fc 01       	movw	r30, r24
 2f8:	20 83       	st	Z, r18
	delay(2);
 2fa:	82 e0       	ldi	r24, 0x02	; 2
 2fc:	0e 94 05 01 	call	0x20a	; 0x20a <delay>
	PORTD&=~(1<<7);
 300:	82 e3       	ldi	r24, 0x32	; 50
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	22 e3       	ldi	r18, 0x32	; 50
 306:	30 e0       	ldi	r19, 0x00	; 0
 308:	f9 01       	movw	r30, r18
 30a:	20 81       	ld	r18, Z
 30c:	2f 77       	andi	r18, 0x7F	; 127
 30e:	fc 01       	movw	r30, r24
 310:	20 83       	st	Z, r18
}
 312:	0f 90       	pop	r0
 314:	cf 91       	pop	r28
 316:	df 91       	pop	r29
 318:	08 95       	ret

0000031a <display>:
void display (const char *s)
{
 31a:	df 93       	push	r29
 31c:	cf 93       	push	r28
 31e:	00 d0       	rcall	.+0      	; 0x320 <display+0x6>
 320:	cd b7       	in	r28, 0x3d	; 61
 322:	de b7       	in	r29, 0x3e	; 62
 324:	9a 83       	std	Y+2, r25	; 0x02
 326:	89 83       	std	Y+1, r24	; 0x01
	while(*s)
 328:	0f c0       	rjmp	.+30     	; 0x348 <display+0x2e>
	{
		data(*s++);
 32a:	89 81       	ldd	r24, Y+1	; 0x01
 32c:	9a 81       	ldd	r25, Y+2	; 0x02
 32e:	fc 01       	movw	r30, r24
 330:	20 81       	ld	r18, Z
 332:	89 81       	ldd	r24, Y+1	; 0x01
 334:	9a 81       	ldd	r25, Y+2	; 0x02
 336:	01 96       	adiw	r24, 0x01	; 1
 338:	9a 83       	std	Y+2, r25	; 0x02
 33a:	89 83       	std	Y+1, r24	; 0x01
 33c:	82 2f       	mov	r24, r18
 33e:	0e 94 60 01 	call	0x2c0	; 0x2c0 <data>
		delay(2);
 342:	82 e0       	ldi	r24, 0x02	; 2
 344:	0e 94 05 01 	call	0x20a	; 0x20a <delay>
	delay(2);
	PORTD&=~(1<<7);
}
void display (const char *s)
{
	while(*s)
 348:	89 81       	ldd	r24, Y+1	; 0x01
 34a:	9a 81       	ldd	r25, Y+2	; 0x02
 34c:	fc 01       	movw	r30, r24
 34e:	80 81       	ld	r24, Z
 350:	88 23       	and	r24, r24
 352:	59 f7       	brne	.-42     	; 0x32a <display+0x10>
	{
		data(*s++);
		delay(2);
	}
}	
 354:	0f 90       	pop	r0
 356:	0f 90       	pop	r0
 358:	cf 91       	pop	r28
 35a:	df 91       	pop	r29
 35c:	08 95       	ret

0000035e <_exit>:
 35e:	f8 94       	cli

00000360 <__stop_program>:
 360:	ff cf       	rjmp	.-2      	; 0x360 <__stop_program>
