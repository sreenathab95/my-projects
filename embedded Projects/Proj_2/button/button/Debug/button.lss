
button.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000035a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  000003b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000085  00000000  00000000  00000a7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000020  00000000  00000000  00000b01  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000046  00000000  00000000  00000b21  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000017f  00000000  00000000  00000b67  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000b3  00000000  00000000  00000ce6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000308  00000000  00000000  00000d99  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000060  00000000  00000000  000010a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000092  00000000  00000000  00001104  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubtypes 0000001e  00000000  00000000  00001196  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 ab 01 	jmp	0x356	; 0x356 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
void delay(int x);
void  command (char c);
void data(char d);

int main(void)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
  74:	27 97       	sbiw	r28, 0x07	; 7
  76:	0f b6       	in	r0, 0x3f	; 63
  78:	f8 94       	cli
  7a:	de bf       	out	0x3e, r29	; 62
  7c:	0f be       	out	0x3f, r0	; 63
  7e:	cd bf       	out	0x3d, r28	; 61
	DDRA=0x00;
  80:	8a e3       	ldi	r24, 0x3A	; 58
  82:	90 e0       	ldi	r25, 0x00	; 0
  84:	fc 01       	movw	r30, r24
  86:	10 82       	st	Z, r1
	DDRB=0xff;
  88:	87 e3       	ldi	r24, 0x37	; 55
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	2f ef       	ldi	r18, 0xFF	; 255
  8e:	fc 01       	movw	r30, r24
  90:	20 83       	st	Z, r18
	PORTA=0xff;
  92:	8b e3       	ldi	r24, 0x3B	; 59
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	2f ef       	ldi	r18, 0xFF	; 255
  98:	fc 01       	movw	r30, r24
  9a:	20 83       	st	Z, r18
	DDRC=0xff;
  9c:	84 e3       	ldi	r24, 0x34	; 52
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	2f ef       	ldi	r18, 0xFF	; 255
  a2:	fc 01       	movw	r30, r24
  a4:	20 83       	st	Z, r18
	DDRD=0xff;
  a6:	81 e3       	ldi	r24, 0x31	; 49
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	2f ef       	ldi	r18, 0xFF	; 255
  ac:	fc 01       	movw	r30, r24
  ae:	20 83       	st	Z, r18
	command(0x38);
  b0:	88 e3       	ldi	r24, 0x38	; 56
  b2:	0e 94 fd 00 	call	0x1fa	; 0x1fa <command>
	command(0x80);
  b6:	80 e8       	ldi	r24, 0x80	; 128
  b8:	0e 94 fd 00 	call	0x1fa	; 0x1fa <command>
	command(0x0c);
  bc:	8c e0       	ldi	r24, 0x0C	; 12
  be:	0e 94 fd 00 	call	0x1fa	; 0x1fa <command>
	command(0x06);
  c2:	86 e0       	ldi	r24, 0x06	; 6
  c4:	0e 94 fd 00 	call	0x1fa	; 0x1fa <command>
	command(0x01);
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	0e 94 fd 00 	call	0x1fa	; 0x1fa <command>
	int f=0,c=0,d=0;
  ce:	1a 82       	std	Y+2, r1	; 0x02
  d0:	19 82       	std	Y+1, r1	; 0x01
  d2:	1c 82       	std	Y+4, r1	; 0x04
  d4:	1b 82       	std	Y+3, r1	; 0x03
  d6:	1e 82       	std	Y+6, r1	; 0x06
  d8:	1d 82       	std	Y+5, r1	; 0x05
	command(0x80);
  da:	80 e8       	ldi	r24, 0x80	; 128
  dc:	0e 94 fd 00 	call	0x1fa	; 0x1fa <command>
	data(f+0x30);
  e0:	89 81       	ldd	r24, Y+1	; 0x01
  e2:	80 5d       	subi	r24, 0xD0	; 208
  e4:	0e 94 2b 01 	call	0x256	; 0x256 <data>
	command(0x82);
  e8:	82 e8       	ldi	r24, 0x82	; 130
  ea:	0e 94 fd 00 	call	0x1fa	; 0x1fa <command>
	data(c+0x30);
  ee:	8b 81       	ldd	r24, Y+3	; 0x03
  f0:	80 5d       	subi	r24, 0xD0	; 208
  f2:	0e 94 2b 01 	call	0x256	; 0x256 <data>
	command(0x84);
  f6:	84 e8       	ldi	r24, 0x84	; 132
  f8:	0e 94 fd 00 	call	0x1fa	; 0x1fa <command>
	data(d+0x30);
  fc:	8d 81       	ldd	r24, Y+5	; 0x05
  fe:	80 5d       	subi	r24, 0xD0	; 208
 100:	0e 94 2b 01 	call	0x256	; 0x256 <data>
 104:	05 c0       	rjmp	.+10     	; 0x110 <main+0xa4>
			//data(f+0x30);
			//PORTB=0xff;
			//
		//}				
		
    }
 106:	00 00       	nop
 108:	03 c0       	rjmp	.+6      	; 0x110 <main+0xa4>
 10a:	00 00       	nop
 10c:	01 c0       	rjmp	.+2      	; 0x110 <main+0xa4>
 10e:	00 00       	nop
	data(c+0x30);
	command(0x84);
	data(d+0x30);
    while(1)
    {
        char i=PINA;
 110:	89 e3       	ldi	r24, 0x39	; 57
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	fc 01       	movw	r30, r24
 116:	80 81       	ld	r24, Z
 118:	8f 83       	std	Y+7, r24	; 0x07
		i=i&0xff;
		if (i==0xfe)
 11a:	8f 81       	ldd	r24, Y+7	; 0x07
 11c:	8e 3f       	cpi	r24, 0xFE	; 254
 11e:	81 f4       	brne	.+32     	; 0x140 <main+0xd4>
		{	
			f++;
 120:	89 81       	ldd	r24, Y+1	; 0x01
 122:	9a 81       	ldd	r25, Y+2	; 0x02
 124:	01 96       	adiw	r24, 0x01	; 1
 126:	9a 83       	std	Y+2, r25	; 0x02
 128:	89 83       	std	Y+1, r24	; 0x01
			delay(10);
 12a:	8a e0       	ldi	r24, 0x0A	; 10
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <delay>
			command(0x80);
 132:	80 e8       	ldi	r24, 0x80	; 128
 134:	0e 94 fd 00 	call	0x1fa	; 0x1fa <command>
			data(f+0x30);
 138:	89 81       	ldd	r24, Y+1	; 0x01
 13a:	80 5d       	subi	r24, 0xD0	; 208
 13c:	0e 94 2b 01 	call	0x256	; 0x256 <data>
			
		}
		if (i==0xef)
 140:	8f 81       	ldd	r24, Y+7	; 0x07
 142:	8f 3e       	cpi	r24, 0xEF	; 239
 144:	81 f4       	brne	.+32     	; 0x166 <main+0xfa>
		{
			c++;
 146:	8b 81       	ldd	r24, Y+3	; 0x03
 148:	9c 81       	ldd	r25, Y+4	; 0x04
 14a:	01 96       	adiw	r24, 0x01	; 1
 14c:	9c 83       	std	Y+4, r25	; 0x04
 14e:	8b 83       	std	Y+3, r24	; 0x03
			delay(10);
 150:	8a e0       	ldi	r24, 0x0A	; 10
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <delay>
			command(0x82);
 158:	82 e8       	ldi	r24, 0x82	; 130
 15a:	0e 94 fd 00 	call	0x1fa	; 0x1fa <command>
			data(c+0x30);
 15e:	8b 81       	ldd	r24, Y+3	; 0x03
 160:	80 5d       	subi	r24, 0xD0	; 208
 162:	0e 94 2b 01 	call	0x256	; 0x256 <data>
		}
		if(f==1&&c==0&&d==0)
 166:	89 81       	ldd	r24, Y+1	; 0x01
 168:	9a 81       	ldd	r25, Y+2	; 0x02
 16a:	81 30       	cpi	r24, 0x01	; 1
 16c:	91 05       	cpc	r25, r1
 16e:	99 f4       	brne	.+38     	; 0x196 <main+0x12a>
 170:	8b 81       	ldd	r24, Y+3	; 0x03
 172:	9c 81       	ldd	r25, Y+4	; 0x04
 174:	00 97       	sbiw	r24, 0x00	; 0
 176:	79 f4       	brne	.+30     	; 0x196 <main+0x12a>
 178:	8d 81       	ldd	r24, Y+5	; 0x05
 17a:	9e 81       	ldd	r25, Y+6	; 0x06
 17c:	00 97       	sbiw	r24, 0x00	; 0
 17e:	59 f4       	brne	.+22     	; 0x196 <main+0x12a>
		 {
			  d=1;
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	9e 83       	std	Y+6, r25	; 0x06
 186:	8d 83       	std	Y+5, r24	; 0x05
			 command(0x84);
 188:	84 e8       	ldi	r24, 0x84	; 132
 18a:	0e 94 fd 00 	call	0x1fa	; 0x1fa <command>
			data(d+0x30);
 18e:	8d 81       	ldd	r24, Y+5	; 0x05
 190:	80 5d       	subi	r24, 0xD0	; 208
 192:	0e 94 2b 01 	call	0x256	; 0x256 <data>
			
		 }
	   if(d==1&&c==1&&f==1)
 196:	8d 81       	ldd	r24, Y+5	; 0x05
 198:	9e 81       	ldd	r25, Y+6	; 0x06
 19a:	81 30       	cpi	r24, 0x01	; 1
 19c:	91 05       	cpc	r25, r1
 19e:	a9 f4       	brne	.+42     	; 0x1ca <main+0x15e>
 1a0:	8b 81       	ldd	r24, Y+3	; 0x03
 1a2:	9c 81       	ldd	r25, Y+4	; 0x04
 1a4:	81 30       	cpi	r24, 0x01	; 1
 1a6:	91 05       	cpc	r25, r1
 1a8:	81 f4       	brne	.+32     	; 0x1ca <main+0x15e>
 1aa:	89 81       	ldd	r24, Y+1	; 0x01
 1ac:	9a 81       	ldd	r25, Y+2	; 0x02
 1ae:	81 30       	cpi	r24, 0x01	; 1
 1b0:	91 05       	cpc	r25, r1
 1b2:	59 f4       	brne	.+22     	; 0x1ca <main+0x15e>
		 {
			  d=2;
 1b4:	82 e0       	ldi	r24, 0x02	; 2
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	9e 83       	std	Y+6, r25	; 0x06
 1ba:	8d 83       	std	Y+5, r24	; 0x05
			 command(0x84);
 1bc:	84 e8       	ldi	r24, 0x84	; 132
 1be:	0e 94 fd 00 	call	0x1fa	; 0x1fa <command>
			data(d+0x30);
 1c2:	8d 81       	ldd	r24, Y+5	; 0x05
 1c4:	80 5d       	subi	r24, 0xD0	; 208
 1c6:	0e 94 2b 01 	call	0x256	; 0x256 <data>
		 }
		 
		if (f==2&&d==2&&c==1)
 1ca:	89 81       	ldd	r24, Y+1	; 0x01
 1cc:	9a 81       	ldd	r25, Y+2	; 0x02
 1ce:	82 30       	cpi	r24, 0x02	; 2
 1d0:	91 05       	cpc	r25, r1
 1d2:	09 f0       	breq	.+2      	; 0x1d6 <main+0x16a>
 1d4:	98 cf       	rjmp	.-208    	; 0x106 <main+0x9a>
 1d6:	8d 81       	ldd	r24, Y+5	; 0x05
 1d8:	9e 81       	ldd	r25, Y+6	; 0x06
 1da:	82 30       	cpi	r24, 0x02	; 2
 1dc:	91 05       	cpc	r25, r1
 1de:	09 f0       	breq	.+2      	; 0x1e2 <main+0x176>
 1e0:	94 cf       	rjmp	.-216    	; 0x10a <main+0x9e>
 1e2:	8b 81       	ldd	r24, Y+3	; 0x03
 1e4:	9c 81       	ldd	r25, Y+4	; 0x04
 1e6:	81 30       	cpi	r24, 0x01	; 1
 1e8:	91 05       	cpc	r25, r1
 1ea:	09 f0       	breq	.+2      	; 0x1ee <main+0x182>
 1ec:	90 cf       	rjmp	.-224    	; 0x10e <main+0xa2>
		{
			PORTB=0xff;
 1ee:	88 e3       	ldi	r24, 0x38	; 56
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	2f ef       	ldi	r18, 0xFF	; 255
 1f4:	fc 01       	movw	r30, r24
 1f6:	20 83       	st	Z, r18
			//data(f+0x30);
			//PORTB=0xff;
			//
		//}				
		
    }
 1f8:	8b cf       	rjmp	.-234    	; 0x110 <main+0xa4>

000001fa <command>:
}
void command(char c)
{
 1fa:	df 93       	push	r29
 1fc:	cf 93       	push	r28
 1fe:	0f 92       	push	r0
 200:	cd b7       	in	r28, 0x3d	; 61
 202:	de b7       	in	r29, 0x3e	; 62
 204:	89 83       	std	Y+1, r24	; 0x01
	PORTC=c;
 206:	85 e3       	ldi	r24, 0x35	; 53
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	29 81       	ldd	r18, Y+1	; 0x01
 20c:	fc 01       	movw	r30, r24
 20e:	20 83       	st	Z, r18
	PORTD&=~(1<<6);
 210:	82 e3       	ldi	r24, 0x32	; 50
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	22 e3       	ldi	r18, 0x32	; 50
 216:	30 e0       	ldi	r19, 0x00	; 0
 218:	f9 01       	movw	r30, r18
 21a:	20 81       	ld	r18, Z
 21c:	2f 7b       	andi	r18, 0xBF	; 191
 21e:	fc 01       	movw	r30, r24
 220:	20 83       	st	Z, r18
	PORTD|=(1<<7);
 222:	82 e3       	ldi	r24, 0x32	; 50
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	22 e3       	ldi	r18, 0x32	; 50
 228:	30 e0       	ldi	r19, 0x00	; 0
 22a:	f9 01       	movw	r30, r18
 22c:	20 81       	ld	r18, Z
 22e:	20 68       	ori	r18, 0x80	; 128
 230:	fc 01       	movw	r30, r24
 232:	20 83       	st	Z, r18
	delay(2);
 234:	82 e0       	ldi	r24, 0x02	; 2
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <delay>
	PORTD&=~(1<<7);
 23c:	82 e3       	ldi	r24, 0x32	; 50
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	22 e3       	ldi	r18, 0x32	; 50
 242:	30 e0       	ldi	r19, 0x00	; 0
 244:	f9 01       	movw	r30, r18
 246:	20 81       	ld	r18, Z
 248:	2f 77       	andi	r18, 0x7F	; 127
 24a:	fc 01       	movw	r30, r24
 24c:	20 83       	st	Z, r18
	
}
 24e:	0f 90       	pop	r0
 250:	cf 91       	pop	r28
 252:	df 91       	pop	r29
 254:	08 95       	ret

00000256 <data>:
void data(char d)
{
 256:	df 93       	push	r29
 258:	cf 93       	push	r28
 25a:	0f 92       	push	r0
 25c:	cd b7       	in	r28, 0x3d	; 61
 25e:	de b7       	in	r29, 0x3e	; 62
 260:	89 83       	std	Y+1, r24	; 0x01
	PORTC=d;
 262:	85 e3       	ldi	r24, 0x35	; 53
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	29 81       	ldd	r18, Y+1	; 0x01
 268:	fc 01       	movw	r30, r24
 26a:	20 83       	st	Z, r18
	PORTD|=(1<<6);
 26c:	82 e3       	ldi	r24, 0x32	; 50
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	22 e3       	ldi	r18, 0x32	; 50
 272:	30 e0       	ldi	r19, 0x00	; 0
 274:	f9 01       	movw	r30, r18
 276:	20 81       	ld	r18, Z
 278:	20 64       	ori	r18, 0x40	; 64
 27a:	fc 01       	movw	r30, r24
 27c:	20 83       	st	Z, r18
	PORTD|=(1<<7);
 27e:	82 e3       	ldi	r24, 0x32	; 50
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	22 e3       	ldi	r18, 0x32	; 50
 284:	30 e0       	ldi	r19, 0x00	; 0
 286:	f9 01       	movw	r30, r18
 288:	20 81       	ld	r18, Z
 28a:	20 68       	ori	r18, 0x80	; 128
 28c:	fc 01       	movw	r30, r24
 28e:	20 83       	st	Z, r18
	delay(2);
 290:	82 e0       	ldi	r24, 0x02	; 2
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <delay>
	PORTD&=~(1<<7);
 298:	82 e3       	ldi	r24, 0x32	; 50
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	22 e3       	ldi	r18, 0x32	; 50
 29e:	30 e0       	ldi	r19, 0x00	; 0
 2a0:	f9 01       	movw	r30, r18
 2a2:	20 81       	ld	r18, Z
 2a4:	2f 77       	andi	r18, 0x7F	; 127
 2a6:	fc 01       	movw	r30, r24
 2a8:	20 83       	st	Z, r18
}
 2aa:	0f 90       	pop	r0
 2ac:	cf 91       	pop	r28
 2ae:	df 91       	pop	r29
 2b0:	08 95       	ret

000002b2 <display>:
void display(const char *s)
{
 2b2:	df 93       	push	r29
 2b4:	cf 93       	push	r28
 2b6:	00 d0       	rcall	.+0      	; 0x2b8 <display+0x6>
 2b8:	cd b7       	in	r28, 0x3d	; 61
 2ba:	de b7       	in	r29, 0x3e	; 62
 2bc:	9a 83       	std	Y+2, r25	; 0x02
 2be:	89 83       	std	Y+1, r24	; 0x01
	while (*s)
 2c0:	10 c0       	rjmp	.+32     	; 0x2e2 <display+0x30>
	{
		data(*s++);
 2c2:	89 81       	ldd	r24, Y+1	; 0x01
 2c4:	9a 81       	ldd	r25, Y+2	; 0x02
 2c6:	fc 01       	movw	r30, r24
 2c8:	20 81       	ld	r18, Z
 2ca:	89 81       	ldd	r24, Y+1	; 0x01
 2cc:	9a 81       	ldd	r25, Y+2	; 0x02
 2ce:	01 96       	adiw	r24, 0x01	; 1
 2d0:	9a 83       	std	Y+2, r25	; 0x02
 2d2:	89 83       	std	Y+1, r24	; 0x01
 2d4:	82 2f       	mov	r24, r18
 2d6:	0e 94 2b 01 	call	0x256	; 0x256 <data>
		delay(2);
 2da:	82 e0       	ldi	r24, 0x02	; 2
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <delay>
	delay(2);
	PORTD&=~(1<<7);
}
void display(const char *s)
{
	while (*s)
 2e2:	89 81       	ldd	r24, Y+1	; 0x01
 2e4:	9a 81       	ldd	r25, Y+2	; 0x02
 2e6:	fc 01       	movw	r30, r24
 2e8:	80 81       	ld	r24, Z
 2ea:	88 23       	and	r24, r24
 2ec:	51 f7       	brne	.-44     	; 0x2c2 <display+0x10>
	{
		data(*s++);
		delay(2);
	}
}
 2ee:	0f 90       	pop	r0
 2f0:	0f 90       	pop	r0
 2f2:	cf 91       	pop	r28
 2f4:	df 91       	pop	r29
 2f6:	08 95       	ret

000002f8 <delay>:
void delay(int x)
{
 2f8:	df 93       	push	r29
 2fa:	cf 93       	push	r28
 2fc:	00 d0       	rcall	.+0      	; 0x2fe <delay+0x6>
 2fe:	00 d0       	rcall	.+0      	; 0x300 <delay+0x8>
 300:	00 d0       	rcall	.+0      	; 0x302 <delay+0xa>
 302:	cd b7       	in	r28, 0x3d	; 61
 304:	de b7       	in	r29, 0x3e	; 62
 306:	9e 83       	std	Y+6, r25	; 0x06
 308:	8d 83       	std	Y+5, r24	; 0x05
	int i,j;
	for(i=0;i<=x;i++)
 30a:	1a 82       	std	Y+2, r1	; 0x02
 30c:	19 82       	std	Y+1, r1	; 0x01
 30e:	13 c0       	rjmp	.+38     	; 0x336 <delay+0x3e>
	 for(j=0;j<=1000;j++);
 310:	1c 82       	std	Y+4, r1	; 0x04
 312:	1b 82       	std	Y+3, r1	; 0x03
 314:	05 c0       	rjmp	.+10     	; 0x320 <delay+0x28>
 316:	8b 81       	ldd	r24, Y+3	; 0x03
 318:	9c 81       	ldd	r25, Y+4	; 0x04
 31a:	01 96       	adiw	r24, 0x01	; 1
 31c:	9c 83       	std	Y+4, r25	; 0x04
 31e:	8b 83       	std	Y+3, r24	; 0x03
 320:	8b 81       	ldd	r24, Y+3	; 0x03
 322:	9c 81       	ldd	r25, Y+4	; 0x04
 324:	23 e0       	ldi	r18, 0x03	; 3
 326:	89 3e       	cpi	r24, 0xE9	; 233
 328:	92 07       	cpc	r25, r18
 32a:	ac f3       	brlt	.-22     	; 0x316 <delay+0x1e>
	}
}
void delay(int x)
{
	int i,j;
	for(i=0;i<=x;i++)
 32c:	89 81       	ldd	r24, Y+1	; 0x01
 32e:	9a 81       	ldd	r25, Y+2	; 0x02
 330:	01 96       	adiw	r24, 0x01	; 1
 332:	9a 83       	std	Y+2, r25	; 0x02
 334:	89 83       	std	Y+1, r24	; 0x01
 336:	29 81       	ldd	r18, Y+1	; 0x01
 338:	3a 81       	ldd	r19, Y+2	; 0x02
 33a:	8d 81       	ldd	r24, Y+5	; 0x05
 33c:	9e 81       	ldd	r25, Y+6	; 0x06
 33e:	82 17       	cp	r24, r18
 340:	93 07       	cpc	r25, r19
 342:	34 f7       	brge	.-52     	; 0x310 <delay+0x18>
	 for(j=0;j<=1000;j++);
	 
 344:	26 96       	adiw	r28, 0x06	; 6
 346:	0f b6       	in	r0, 0x3f	; 63
 348:	f8 94       	cli
 34a:	de bf       	out	0x3e, r29	; 62
 34c:	0f be       	out	0x3f, r0	; 63
 34e:	cd bf       	out	0x3d, r28	; 61
 350:	cf 91       	pop	r28
 352:	df 91       	pop	r29
 354:	08 95       	ret

00000356 <_exit>:
 356:	f8 94       	cli

00000358 <__stop_program>:
 358:	ff cf       	rjmp	.-2      	; 0x358 <__stop_program>
