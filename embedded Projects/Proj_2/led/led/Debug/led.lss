
led.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000011c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  00000170  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000085  00000000  00000000  0000083c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000020  00000000  00000000  000008c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000025  00000000  00000000  000008e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000000ea  00000000  00000000  00000906  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000008c  00000000  00000000  000009f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000153  00000000  00000000  00000a7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000030  00000000  00000000  00000bd0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000074  00000000  00000000  00000c00  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubtypes 0000001e  00000000  00000000  00000c74  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 8c 00 	jmp	0x118	; 0x118 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
 */ 

#include <avr/io.h>
void delay(int x);
int main(void)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	00 d0       	rcall	.+0      	; 0x72 <main+0x6>
  72:	0f 92       	push	r0
  74:	cd b7       	in	r28, 0x3d	; 61
  76:	de b7       	in	r29, 0x3e	; 62
	DDRA=0xff;
  78:	8a e3       	ldi	r24, 0x3A	; 58
  7a:	90 e0       	ldi	r25, 0x00	; 0
  7c:	2f ef       	ldi	r18, 0xFF	; 255
  7e:	fc 01       	movw	r30, r24
  80:	20 83       	st	Z, r18
    while(1)
    {  
     int i;    
	 char c=0X01;
  82:	81 e0       	ldi	r24, 0x01	; 1
  84:	8b 83       	std	Y+3, r24	; 0x03
	for(i=0;i<=7;i++)
  86:	1a 82       	std	Y+2, r1	; 0x02
  88:	19 82       	std	Y+1, r1	; 0x01
  8a:	11 c0       	rjmp	.+34     	; 0xae <main+0x42>
	{
      PORTA=c;
  8c:	8b e3       	ldi	r24, 0x3B	; 59
  8e:	90 e0       	ldi	r25, 0x00	; 0
  90:	2b 81       	ldd	r18, Y+3	; 0x03
  92:	fc 01       	movw	r30, r24
  94:	20 83       	st	Z, r18
	  c=c<<1;
  96:	8b 81       	ldd	r24, Y+3	; 0x03
  98:	88 0f       	add	r24, r24
  9a:	8b 83       	std	Y+3, r24	; 0x03
	  delay(20);
  9c:	84 e1       	ldi	r24, 0x14	; 20
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	0e 94 5d 00 	call	0xba	; 0xba <delay>
	DDRA=0xff;
    while(1)
    {  
     int i;    
	 char c=0X01;
	for(i=0;i<=7;i++)
  a4:	89 81       	ldd	r24, Y+1	; 0x01
  a6:	9a 81       	ldd	r25, Y+2	; 0x02
  a8:	01 96       	adiw	r24, 0x01	; 1
  aa:	9a 83       	std	Y+2, r25	; 0x02
  ac:	89 83       	std	Y+1, r24	; 0x01
  ae:	89 81       	ldd	r24, Y+1	; 0x01
  b0:	9a 81       	ldd	r25, Y+2	; 0x02
  b2:	88 30       	cpi	r24, 0x08	; 8
  b4:	91 05       	cpc	r25, r1
  b6:	54 f3       	brlt	.-44     	; 0x8c <main+0x20>
	{
      PORTA=c;
	  c=c<<1;
	  delay(20);
	}
    }
  b8:	e4 cf       	rjmp	.-56     	; 0x82 <main+0x16>

000000ba <delay>:
}
void delay(int x)
{
  ba:	df 93       	push	r29
  bc:	cf 93       	push	r28
  be:	00 d0       	rcall	.+0      	; 0xc0 <delay+0x6>
  c0:	00 d0       	rcall	.+0      	; 0xc2 <delay+0x8>
  c2:	00 d0       	rcall	.+0      	; 0xc4 <delay+0xa>
  c4:	cd b7       	in	r28, 0x3d	; 61
  c6:	de b7       	in	r29, 0x3e	; 62
  c8:	9e 83       	std	Y+6, r25	; 0x06
  ca:	8d 83       	std	Y+5, r24	; 0x05
	int i,j;
	for(i=0;i<=x;i++)
  cc:	1a 82       	std	Y+2, r1	; 0x02
  ce:	19 82       	std	Y+1, r1	; 0x01
  d0:	13 c0       	rjmp	.+38     	; 0xf8 <delay+0x3e>
	  for(j=0;j<=1000;j++);
  d2:	1c 82       	std	Y+4, r1	; 0x04
  d4:	1b 82       	std	Y+3, r1	; 0x03
  d6:	05 c0       	rjmp	.+10     	; 0xe2 <delay+0x28>
  d8:	8b 81       	ldd	r24, Y+3	; 0x03
  da:	9c 81       	ldd	r25, Y+4	; 0x04
  dc:	01 96       	adiw	r24, 0x01	; 1
  de:	9c 83       	std	Y+4, r25	; 0x04
  e0:	8b 83       	std	Y+3, r24	; 0x03
  e2:	8b 81       	ldd	r24, Y+3	; 0x03
  e4:	9c 81       	ldd	r25, Y+4	; 0x04
  e6:	23 e0       	ldi	r18, 0x03	; 3
  e8:	89 3e       	cpi	r24, 0xE9	; 233
  ea:	92 07       	cpc	r25, r18
  ec:	ac f3       	brlt	.-22     	; 0xd8 <delay+0x1e>
    }
}
void delay(int x)
{
	int i,j;
	for(i=0;i<=x;i++)
  ee:	89 81       	ldd	r24, Y+1	; 0x01
  f0:	9a 81       	ldd	r25, Y+2	; 0x02
  f2:	01 96       	adiw	r24, 0x01	; 1
  f4:	9a 83       	std	Y+2, r25	; 0x02
  f6:	89 83       	std	Y+1, r24	; 0x01
  f8:	29 81       	ldd	r18, Y+1	; 0x01
  fa:	3a 81       	ldd	r19, Y+2	; 0x02
  fc:	8d 81       	ldd	r24, Y+5	; 0x05
  fe:	9e 81       	ldd	r25, Y+6	; 0x06
 100:	82 17       	cp	r24, r18
 102:	93 07       	cpc	r25, r19
 104:	34 f7       	brge	.-52     	; 0xd2 <delay+0x18>
	  for(j=0;j<=1000;j++);
	 
 106:	26 96       	adiw	r28, 0x06	; 6
 108:	0f b6       	in	r0, 0x3f	; 63
 10a:	f8 94       	cli
 10c:	de bf       	out	0x3e, r29	; 62
 10e:	0f be       	out	0x3f, r0	; 63
 110:	cd bf       	out	0x3d, r28	; 61
 112:	cf 91       	pop	r28
 114:	df 91       	pop	r29
 116:	08 95       	ret

00000118 <_exit>:
 118:	f8 94       	cli

0000011a <__stop_program>:
 11a:	ff cf       	rjmp	.-2      	; 0x11a <__stop_program>
