
button 1221.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000318  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  0000036c  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000085  00000000  00000000  00000a38  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000020  00000000  00000000  00000abd  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000046  00000000  00000000  00000add  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000018f  00000000  00000000  00000b23  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000009e  00000000  00000000  00000cb2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002d5  00000000  00000000  00000d50  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000060  00000000  00000000  00001028  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000a1  00000000  00000000  00001088  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubtypes 0000001e  00000000  00000000  00001129  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 8a 01 	jmp	0x314	; 0x314 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
void delay(int x);
void command(char c);
void data(char d);
void display (const char *s);
int main(void)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
  74:	29 97       	sbiw	r28, 0x09	; 9
  76:	0f b6       	in	r0, 0x3f	; 63
  78:	f8 94       	cli
  7a:	de bf       	out	0x3e, r29	; 62
  7c:	0f be       	out	0x3f, r0	; 63
  7e:	cd bf       	out	0x3d, r28	; 61
	DDRA=0x00;
  80:	8a e3       	ldi	r24, 0x3A	; 58
  82:	90 e0       	ldi	r25, 0x00	; 0
  84:	fc 01       	movw	r30, r24
  86:	10 82       	st	Z, r1
	DDRB=0xff;
  88:	87 e3       	ldi	r24, 0x37	; 55
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	2f ef       	ldi	r18, 0xFF	; 255
  8e:	fc 01       	movw	r30, r24
  90:	20 83       	st	Z, r18
	PORTA=0xff;
  92:	8b e3       	ldi	r24, 0x3B	; 59
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	2f ef       	ldi	r18, 0xFF	; 255
  98:	fc 01       	movw	r30, r24
  9a:	20 83       	st	Z, r18
	DDRC=0xff;
  9c:	84 e3       	ldi	r24, 0x34	; 52
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	2f ef       	ldi	r18, 0xFF	; 255
  a2:	fc 01       	movw	r30, r24
  a4:	20 83       	st	Z, r18
	DDRD=0xff;
  a6:	81 e3       	ldi	r24, 0x31	; 49
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	2f ef       	ldi	r18, 0xFF	; 255
  ac:	fc 01       	movw	r30, r24
  ae:	20 83       	st	Z, r18
	command(0x38);
  b0:	88 e3       	ldi	r24, 0x38	; 56
  b2:	0e 94 0b 01 	call	0x216	; 0x216 <command>
	command(0x80);
  b6:	80 e8       	ldi	r24, 0x80	; 128
  b8:	0e 94 0b 01 	call	0x216	; 0x216 <command>
	command(0x0c);
  bc:	8c e0       	ldi	r24, 0x0C	; 12
  be:	0e 94 0b 01 	call	0x216	; 0x216 <command>
	command(0x06);
  c2:	86 e0       	ldi	r24, 0x06	; 6
  c4:	0e 94 0b 01 	call	0x216	; 0x216 <command>
	command(0x01);
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	0e 94 0b 01 	call	0x216	; 0x216 <command>
	int f=0,c=0,d=0,e=0;
  ce:	1a 82       	std	Y+2, r1	; 0x02
  d0:	19 82       	std	Y+1, r1	; 0x01
  d2:	1c 82       	std	Y+4, r1	; 0x04
  d4:	1b 82       	std	Y+3, r1	; 0x03
  d6:	18 86       	std	Y+8, r1	; 0x08
  d8:	1f 82       	std	Y+7, r1	; 0x07
  da:	1e 82       	std	Y+6, r1	; 0x06
  dc:	1d 82       	std	Y+5, r1	; 0x05
  de:	05 c0       	rjmp	.+10     	; 0xea <main+0x7e>
		//if (f==2&&c==2&&e==1)
		//{
			//PORTB=0xff;
		//}
		
    }
  e0:	00 00       	nop
  e2:	03 c0       	rjmp	.+6      	; 0xea <main+0x7e>
  e4:	00 00       	nop
  e6:	01 c0       	rjmp	.+2      	; 0xea <main+0x7e>
  e8:	00 00       	nop
	command(0x06);
	command(0x01);
	int f=0,c=0,d=0,e=0;
    while(1)
    {
        char i=PINA;
  ea:	89 e3       	ldi	r24, 0x39	; 57
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	fc 01       	movw	r30, r24
  f0:	80 81       	ld	r24, Z
  f2:	89 87       	std	Y+9, r24	; 0x09
		i=i&0xff;
		if(i==0xfe&&f==0)
  f4:	89 85       	ldd	r24, Y+9	; 0x09
  f6:	8e 3f       	cpi	r24, 0xFE	; 254
  f8:	79 f4       	brne	.+30     	; 0x118 <main+0xac>
  fa:	89 81       	ldd	r24, Y+1	; 0x01
  fc:	9a 81       	ldd	r25, Y+2	; 0x02
  fe:	00 97       	sbiw	r24, 0x00	; 0
 100:	59 f4       	brne	.+22     	; 0x118 <main+0xac>
		{
			f=1;
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	9a 83       	std	Y+2, r25	; 0x02
 108:	89 83       	std	Y+1, r24	; 0x01
			command(0x80);
 10a:	80 e8       	ldi	r24, 0x80	; 128
 10c:	0e 94 0b 01 	call	0x216	; 0x216 <command>
			data(f+0x30);
 110:	89 81       	ldd	r24, Y+1	; 0x01
 112:	80 5d       	subi	r24, 0xD0	; 208
 114:	0e 94 39 01 	call	0x272	; 0x272 <data>
		}
	
		if (i==0xef&&f==1)
 118:	89 85       	ldd	r24, Y+9	; 0x09
 11a:	8f 3e       	cpi	r24, 0xEF	; 239
 11c:	a1 f4       	brne	.+40     	; 0x146 <main+0xda>
 11e:	89 81       	ldd	r24, Y+1	; 0x01
 120:	9a 81       	ldd	r25, Y+2	; 0x02
 122:	81 30       	cpi	r24, 0x01	; 1
 124:	91 05       	cpc	r25, r1
 126:	79 f4       	brne	.+30     	; 0x146 <main+0xda>
		{
			c=1;
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	9c 83       	std	Y+4, r25	; 0x04
 12e:	8b 83       	std	Y+3, r24	; 0x03
			delay(10);
 130:	8a e0       	ldi	r24, 0x0A	; 10
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <delay>
			command(0x82);
 138:	82 e8       	ldi	r24, 0x82	; 130
 13a:	0e 94 0b 01 	call	0x216	; 0x216 <command>
			data(c+0x30);
 13e:	8b 81       	ldd	r24, Y+3	; 0x03
 140:	80 5d       	subi	r24, 0xD0	; 208
 142:	0e 94 39 01 	call	0x272	; 0x272 <data>
			
		}
		if (i==0xef&&c==1&&f==1)
 146:	89 85       	ldd	r24, Y+9	; 0x09
 148:	8f 3e       	cpi	r24, 0xEF	; 239
 14a:	a9 f4       	brne	.+42     	; 0x176 <main+0x10a>
 14c:	8b 81       	ldd	r24, Y+3	; 0x03
 14e:	9c 81       	ldd	r25, Y+4	; 0x04
 150:	81 30       	cpi	r24, 0x01	; 1
 152:	91 05       	cpc	r25, r1
 154:	81 f4       	brne	.+32     	; 0x176 <main+0x10a>
 156:	89 81       	ldd	r24, Y+1	; 0x01
 158:	9a 81       	ldd	r25, Y+2	; 0x02
 15a:	81 30       	cpi	r24, 0x01	; 1
 15c:	91 05       	cpc	r25, r1
 15e:	59 f4       	brne	.+22     	; 0x176 <main+0x10a>
		{
			c=2;
 160:	82 e0       	ldi	r24, 0x02	; 2
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	9c 83       	std	Y+4, r25	; 0x04
 166:	8b 83       	std	Y+3, r24	; 0x03
			command(0x84);
 168:	84 e8       	ldi	r24, 0x84	; 132
 16a:	0e 94 0b 01 	call	0x216	; 0x216 <command>
			data(d+0x30);
 16e:	8f 81       	ldd	r24, Y+7	; 0x07
 170:	80 5d       	subi	r24, 0xD0	; 208
 172:	0e 94 39 01 	call	0x272	; 0x272 <data>
			//PORTB=0xff;
		}
		if (i==0xfe&&c==2&&e==0)
 176:	89 85       	ldd	r24, Y+9	; 0x09
 178:	8e 3f       	cpi	r24, 0xFE	; 254
 17a:	09 f0       	breq	.+2      	; 0x17e <main+0x112>
 17c:	b1 cf       	rjmp	.-158    	; 0xe0 <main+0x74>
 17e:	8b 81       	ldd	r24, Y+3	; 0x03
 180:	9c 81       	ldd	r25, Y+4	; 0x04
 182:	82 30       	cpi	r24, 0x02	; 2
 184:	91 05       	cpc	r25, r1
 186:	09 f0       	breq	.+2      	; 0x18a <main+0x11e>
 188:	ad cf       	rjmp	.-166    	; 0xe4 <main+0x78>
 18a:	8d 81       	ldd	r24, Y+5	; 0x05
 18c:	9e 81       	ldd	r25, Y+6	; 0x06
 18e:	00 97       	sbiw	r24, 0x00	; 0
 190:	09 f0       	breq	.+2      	; 0x194 <main+0x128>
 192:	aa cf       	rjmp	.-172    	; 0xe8 <main+0x7c>
		{
			e++;
 194:	8d 81       	ldd	r24, Y+5	; 0x05
 196:	9e 81       	ldd	r25, Y+6	; 0x06
 198:	01 96       	adiw	r24, 0x01	; 1
 19a:	9e 83       	std	Y+6, r25	; 0x06
 19c:	8d 83       	std	Y+5, r24	; 0x05
			command(0x86);
 19e:	86 e8       	ldi	r24, 0x86	; 134
 1a0:	0e 94 0b 01 	call	0x216	; 0x216 <command>
			data(e+0x30);
 1a4:	8d 81       	ldd	r24, Y+5	; 0x05
 1a6:	80 5d       	subi	r24, 0xD0	; 208
 1a8:	0e 94 39 01 	call	0x272	; 0x272 <data>
			PORTB=0xff;
 1ac:	88 e3       	ldi	r24, 0x38	; 56
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	2f ef       	ldi	r18, 0xFF	; 255
 1b2:	fc 01       	movw	r30, r24
 1b4:	20 83       	st	Z, r18
		//if (f==2&&c==2&&e==1)
		//{
			//PORTB=0xff;
		//}
		
    }
 1b6:	99 cf       	rjmp	.-206    	; 0xea <main+0x7e>

000001b8 <delay>:
}
void delay(int x)
{
 1b8:	df 93       	push	r29
 1ba:	cf 93       	push	r28
 1bc:	00 d0       	rcall	.+0      	; 0x1be <delay+0x6>
 1be:	00 d0       	rcall	.+0      	; 0x1c0 <delay+0x8>
 1c0:	00 d0       	rcall	.+0      	; 0x1c2 <delay+0xa>
 1c2:	cd b7       	in	r28, 0x3d	; 61
 1c4:	de b7       	in	r29, 0x3e	; 62
 1c6:	9e 83       	std	Y+6, r25	; 0x06
 1c8:	8d 83       	std	Y+5, r24	; 0x05
	
	int i,j;
	for(i=0;i<=x;i++)
 1ca:	1a 82       	std	Y+2, r1	; 0x02
 1cc:	19 82       	std	Y+1, r1	; 0x01
 1ce:	13 c0       	rjmp	.+38     	; 0x1f6 <delay+0x3e>
	for(j=0;j<=1000;j++);
 1d0:	1c 82       	std	Y+4, r1	; 0x04
 1d2:	1b 82       	std	Y+3, r1	; 0x03
 1d4:	05 c0       	rjmp	.+10     	; 0x1e0 <delay+0x28>
 1d6:	8b 81       	ldd	r24, Y+3	; 0x03
 1d8:	9c 81       	ldd	r25, Y+4	; 0x04
 1da:	01 96       	adiw	r24, 0x01	; 1
 1dc:	9c 83       	std	Y+4, r25	; 0x04
 1de:	8b 83       	std	Y+3, r24	; 0x03
 1e0:	8b 81       	ldd	r24, Y+3	; 0x03
 1e2:	9c 81       	ldd	r25, Y+4	; 0x04
 1e4:	23 e0       	ldi	r18, 0x03	; 3
 1e6:	89 3e       	cpi	r24, 0xE9	; 233
 1e8:	92 07       	cpc	r25, r18
 1ea:	ac f3       	brlt	.-22     	; 0x1d6 <delay+0x1e>
}
void delay(int x)
{
	
	int i,j;
	for(i=0;i<=x;i++)
 1ec:	89 81       	ldd	r24, Y+1	; 0x01
 1ee:	9a 81       	ldd	r25, Y+2	; 0x02
 1f0:	01 96       	adiw	r24, 0x01	; 1
 1f2:	9a 83       	std	Y+2, r25	; 0x02
 1f4:	89 83       	std	Y+1, r24	; 0x01
 1f6:	29 81       	ldd	r18, Y+1	; 0x01
 1f8:	3a 81       	ldd	r19, Y+2	; 0x02
 1fa:	8d 81       	ldd	r24, Y+5	; 0x05
 1fc:	9e 81       	ldd	r25, Y+6	; 0x06
 1fe:	82 17       	cp	r24, r18
 200:	93 07       	cpc	r25, r19
 202:	34 f7       	brge	.-52     	; 0x1d0 <delay+0x18>
	for(j=0;j<=1000;j++);
}
 204:	26 96       	adiw	r28, 0x06	; 6
 206:	0f b6       	in	r0, 0x3f	; 63
 208:	f8 94       	cli
 20a:	de bf       	out	0x3e, r29	; 62
 20c:	0f be       	out	0x3f, r0	; 63
 20e:	cd bf       	out	0x3d, r28	; 61
 210:	cf 91       	pop	r28
 212:	df 91       	pop	r29
 214:	08 95       	ret

00000216 <command>:
void command(char c)
{
 216:	df 93       	push	r29
 218:	cf 93       	push	r28
 21a:	0f 92       	push	r0
 21c:	cd b7       	in	r28, 0x3d	; 61
 21e:	de b7       	in	r29, 0x3e	; 62
 220:	89 83       	std	Y+1, r24	; 0x01
	PORTC=c;
 222:	85 e3       	ldi	r24, 0x35	; 53
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	29 81       	ldd	r18, Y+1	; 0x01
 228:	fc 01       	movw	r30, r24
 22a:	20 83       	st	Z, r18
	PORTD&=~(1<<6);
 22c:	82 e3       	ldi	r24, 0x32	; 50
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	22 e3       	ldi	r18, 0x32	; 50
 232:	30 e0       	ldi	r19, 0x00	; 0
 234:	f9 01       	movw	r30, r18
 236:	20 81       	ld	r18, Z
 238:	2f 7b       	andi	r18, 0xBF	; 191
 23a:	fc 01       	movw	r30, r24
 23c:	20 83       	st	Z, r18
	PORTD|=(1<<7);
 23e:	82 e3       	ldi	r24, 0x32	; 50
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	22 e3       	ldi	r18, 0x32	; 50
 244:	30 e0       	ldi	r19, 0x00	; 0
 246:	f9 01       	movw	r30, r18
 248:	20 81       	ld	r18, Z
 24a:	20 68       	ori	r18, 0x80	; 128
 24c:	fc 01       	movw	r30, r24
 24e:	20 83       	st	Z, r18
	delay(2);
 250:	82 e0       	ldi	r24, 0x02	; 2
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <delay>
	PORTD&=~(1<<7);
 258:	82 e3       	ldi	r24, 0x32	; 50
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	22 e3       	ldi	r18, 0x32	; 50
 25e:	30 e0       	ldi	r19, 0x00	; 0
 260:	f9 01       	movw	r30, r18
 262:	20 81       	ld	r18, Z
 264:	2f 77       	andi	r18, 0x7F	; 127
 266:	fc 01       	movw	r30, r24
 268:	20 83       	st	Z, r18
}
 26a:	0f 90       	pop	r0
 26c:	cf 91       	pop	r28
 26e:	df 91       	pop	r29
 270:	08 95       	ret

00000272 <data>:
void data(char d)
{
 272:	df 93       	push	r29
 274:	cf 93       	push	r28
 276:	0f 92       	push	r0
 278:	cd b7       	in	r28, 0x3d	; 61
 27a:	de b7       	in	r29, 0x3e	; 62
 27c:	89 83       	std	Y+1, r24	; 0x01
	PORTC=d;
 27e:	85 e3       	ldi	r24, 0x35	; 53
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	29 81       	ldd	r18, Y+1	; 0x01
 284:	fc 01       	movw	r30, r24
 286:	20 83       	st	Z, r18
	PORTD|=(1<<6);
 288:	82 e3       	ldi	r24, 0x32	; 50
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	22 e3       	ldi	r18, 0x32	; 50
 28e:	30 e0       	ldi	r19, 0x00	; 0
 290:	f9 01       	movw	r30, r18
 292:	20 81       	ld	r18, Z
 294:	20 64       	ori	r18, 0x40	; 64
 296:	fc 01       	movw	r30, r24
 298:	20 83       	st	Z, r18
	PORTD|=(1<<7);
 29a:	82 e3       	ldi	r24, 0x32	; 50
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	22 e3       	ldi	r18, 0x32	; 50
 2a0:	30 e0       	ldi	r19, 0x00	; 0
 2a2:	f9 01       	movw	r30, r18
 2a4:	20 81       	ld	r18, Z
 2a6:	20 68       	ori	r18, 0x80	; 128
 2a8:	fc 01       	movw	r30, r24
 2aa:	20 83       	st	Z, r18
	delay(2);
 2ac:	82 e0       	ldi	r24, 0x02	; 2
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <delay>
	PORTD&=~(1<<7);
 2b4:	82 e3       	ldi	r24, 0x32	; 50
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	22 e3       	ldi	r18, 0x32	; 50
 2ba:	30 e0       	ldi	r19, 0x00	; 0
 2bc:	f9 01       	movw	r30, r18
 2be:	20 81       	ld	r18, Z
 2c0:	2f 77       	andi	r18, 0x7F	; 127
 2c2:	fc 01       	movw	r30, r24
 2c4:	20 83       	st	Z, r18
}
 2c6:	0f 90       	pop	r0
 2c8:	cf 91       	pop	r28
 2ca:	df 91       	pop	r29
 2cc:	08 95       	ret

000002ce <display>:
void display(const char *s)
{
 2ce:	df 93       	push	r29
 2d0:	cf 93       	push	r28
 2d2:	00 d0       	rcall	.+0      	; 0x2d4 <display+0x6>
 2d4:	cd b7       	in	r28, 0x3d	; 61
 2d6:	de b7       	in	r29, 0x3e	; 62
 2d8:	9a 83       	std	Y+2, r25	; 0x02
 2da:	89 83       	std	Y+1, r24	; 0x01
	while(*s)
 2dc:	10 c0       	rjmp	.+32     	; 0x2fe <display+0x30>
	{
		data(*s++);
 2de:	89 81       	ldd	r24, Y+1	; 0x01
 2e0:	9a 81       	ldd	r25, Y+2	; 0x02
 2e2:	fc 01       	movw	r30, r24
 2e4:	20 81       	ld	r18, Z
 2e6:	89 81       	ldd	r24, Y+1	; 0x01
 2e8:	9a 81       	ldd	r25, Y+2	; 0x02
 2ea:	01 96       	adiw	r24, 0x01	; 1
 2ec:	9a 83       	std	Y+2, r25	; 0x02
 2ee:	89 83       	std	Y+1, r24	; 0x01
 2f0:	82 2f       	mov	r24, r18
 2f2:	0e 94 39 01 	call	0x272	; 0x272 <data>
		delay(2);
 2f6:	82 e0       	ldi	r24, 0x02	; 2
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <delay>
	delay(2);
	PORTD&=~(1<<7);
}
void display(const char *s)
{
	while(*s)
 2fe:	89 81       	ldd	r24, Y+1	; 0x01
 300:	9a 81       	ldd	r25, Y+2	; 0x02
 302:	fc 01       	movw	r30, r24
 304:	80 81       	ld	r24, Z
 306:	88 23       	and	r24, r24
 308:	51 f7       	brne	.-44     	; 0x2de <display+0x10>
	{
		data(*s++);
		delay(2);
	}
 30a:	0f 90       	pop	r0
 30c:	0f 90       	pop	r0
 30e:	cf 91       	pop	r28
 310:	df 91       	pop	r29
 312:	08 95       	ret

00000314 <_exit>:
 314:	f8 94       	cli

00000316 <__stop_program>:
 316:	ff cf       	rjmp	.-2      	; 0x316 <__stop_program>
