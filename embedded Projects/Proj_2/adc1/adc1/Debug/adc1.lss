
adc1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000062e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  0000062e  000006c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800080  00800080  000006e2  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000006e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000db0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000020  00000000  00000000  00000e35  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000074  00000000  00000000  00000e55  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000002b0  00000000  00000000  00000ec9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000000ec  00000000  00000000  00001179  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000005b9  00000000  00000000  00001265  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000090  00000000  00000000  00001820  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000009c  00000000  00000000  000018b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 0000001e  00000000  00000000  0000194c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e2       	ldi	r30, 0x2E	; 46
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 38       	cpi	r26, 0x80	; 128
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e8       	ldi	r26, 0x80	; 128
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 38       	cpi	r26, 0x84	; 132
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 15 03 	jmp	0x62a	; 0x62a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
void adc2();
char y,z;
int a;

int main(void)
{
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	00 d0       	rcall	.+0      	; 0x98 <main+0x6>
  98:	00 d0       	rcall	.+0      	; 0x9a <main+0x8>
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
	DDRC=0xff;
  9e:	84 e3       	ldi	r24, 0x34	; 52
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	2f ef       	ldi	r18, 0xFF	; 255
  a4:	fc 01       	movw	r30, r24
  a6:	20 83       	st	Z, r18
	DDRD=0xff;
  a8:	81 e3       	ldi	r24, 0x31	; 49
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	2f ef       	ldi	r18, 0xFF	; 255
  ae:	fc 01       	movw	r30, r24
  b0:	20 83       	st	Z, r18
	ADCSRA=0x87;
  b2:	86 e2       	ldi	r24, 0x26	; 38
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	27 e8       	ldi	r18, 0x87	; 135
  b8:	fc 01       	movw	r30, r24
  ba:	20 83       	st	Z, r18
	command(0x38);
  bc:	88 e3       	ldi	r24, 0x38	; 56
  be:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <command>
	command(0x80);
  c2:	80 e8       	ldi	r24, 0x80	; 128
  c4:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <command>
	command(0x0c);
  c8:	8c e0       	ldi	r24, 0x0C	; 12
  ca:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <command>
	command(0x06);
  ce:	86 e0       	ldi	r24, 0x06	; 6
  d0:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <command>
	command(0x01);
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <command>
	int a=0,b=0;
  da:	1a 82       	std	Y+2, r1	; 0x02
  dc:	19 82       	std	Y+1, r1	; 0x01
  de:	1c 82       	std	Y+4, r1	; 0x04
  e0:	1b 82       	std	Y+3, r1	; 0x03
  e2:	03 c0       	rjmp	.+6      	; 0xea <main+0x58>
		{
			command(0xc0);
			display("         ");
		}
				
    }
  e4:	00 00       	nop
  e6:	01 c0       	rjmp	.+2      	; 0xea <main+0x58>
  e8:	00 00       	nop
	command(0x06);
	command(0x01);
	int a=0,b=0;
    while(1)
    {
		adc1();
  ea:	0e 94 53 02 	call	0x4a6	; 0x4a6 <adc1>
		if(y>200&&a==0)
  ee:	80 91 81 00 	lds	r24, 0x0081
  f2:	89 3c       	cpi	r24, 0xC9	; 201
  f4:	40 f0       	brcs	.+16     	; 0x106 <main+0x74>
  f6:	89 81       	ldd	r24, Y+1	; 0x01
  f8:	9a 81       	ldd	r25, Y+2	; 0x02
  fa:	00 97       	sbiw	r24, 0x00	; 0
  fc:	21 f4       	brne	.+8      	; 0x106 <main+0x74>
		{
			a=1;	
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	9a 83       	std	Y+2, r25	; 0x02
 104:	89 83       	std	Y+1, r24	; 0x01
		}
		if (y<=150)
 106:	80 91 81 00 	lds	r24, 0x0081
 10a:	87 39       	cpi	r24, 0x97	; 151
 10c:	48 f4       	brcc	.+18     	; 0x120 <main+0x8e>
		{
			a=0;
 10e:	1a 82       	std	Y+2, r1	; 0x02
 110:	19 82       	std	Y+1, r1	; 0x01
			command(0xc0);
 112:	80 ec       	ldi	r24, 0xC0	; 192
 114:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <command>
			display("            ");	
 118:	80 e6       	ldi	r24, 0x60	; 96
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	0e 94 30 02 	call	0x460	; 0x460 <display>
		}
		adc2();
 120:	0e 94 ae 02 	call	0x55c	; 0x55c <adc2>
		if (z>200&&a==1)
 124:	80 91 80 00 	lds	r24, 0x0080
 128:	89 3c       	cpi	r24, 0xC9	; 201
 12a:	80 f0       	brcs	.+32     	; 0x14c <main+0xba>
 12c:	89 81       	ldd	r24, Y+1	; 0x01
 12e:	9a 81       	ldd	r25, Y+2	; 0x02
 130:	81 30       	cpi	r24, 0x01	; 1
 132:	91 05       	cpc	r25, r1
 134:	59 f4       	brne	.+22     	; 0x14c <main+0xba>
		{
			b=1;
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	9c 83       	std	Y+4, r25	; 0x04
 13c:	8b 83       	std	Y+3, r24	; 0x03
			command(0xc0);
 13e:	80 ec       	ldi	r24, 0xC0	; 192
 140:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <command>
			display("sreenath");	
 144:	8d e6       	ldi	r24, 0x6D	; 109
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	0e 94 30 02 	call	0x460	; 0x460 <display>
		}
		if (z<200&&b==1)
 14c:	80 91 80 00 	lds	r24, 0x0080
 150:	88 3c       	cpi	r24, 0xC8	; 200
 152:	70 f4       	brcc	.+28     	; 0x170 <main+0xde>
 154:	8b 81       	ldd	r24, Y+3	; 0x03
 156:	9c 81       	ldd	r25, Y+4	; 0x04
 158:	81 30       	cpi	r24, 0x01	; 1
 15a:	91 05       	cpc	r25, r1
 15c:	49 f4       	brne	.+18     	; 0x170 <main+0xde>
		{
			a=0;
 15e:	1a 82       	std	Y+2, r1	; 0x02
 160:	19 82       	std	Y+1, r1	; 0x01
			command(0xc0);
 162:	80 ec       	ldi	r24, 0xC0	; 192
 164:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <command>
			display("            ");	
 168:	80 e6       	ldi	r24, 0x60	; 96
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	0e 94 30 02 	call	0x460	; 0x460 <display>
		}
		if (b==1&&z>200)
 170:	8b 81       	ldd	r24, Y+3	; 0x03
 172:	9c 81       	ldd	r25, Y+4	; 0x04
 174:	81 30       	cpi	r24, 0x01	; 1
 176:	91 05       	cpc	r25, r1
 178:	09 f0       	breq	.+2      	; 0x17c <main+0xea>
 17a:	b4 cf       	rjmp	.-152    	; 0xe4 <main+0x52>
 17c:	80 91 80 00 	lds	r24, 0x0080
 180:	89 3c       	cpi	r24, 0xC9	; 201
 182:	08 f4       	brcc	.+2      	; 0x186 <main+0xf4>
 184:	b1 cf       	rjmp	.-158    	; 0xe8 <main+0x56>
		{
			command(0xc0);
 186:	80 ec       	ldi	r24, 0xC0	; 192
 188:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <command>
			display("         ");
 18c:	86 e7       	ldi	r24, 0x76	; 118
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	0e 94 30 02 	call	0x460	; 0x460 <display>
		}
				
    }
 194:	aa cf       	rjmp	.-172    	; 0xea <main+0x58>

00000196 <kepad>:
}
char kepad()
{
 196:	df 93       	push	r29
 198:	cf 93       	push	r28
 19a:	cd b7       	in	r28, 0x3d	; 61
 19c:	de b7       	in	r29, 0x3e	; 62
 19e:	27 97       	sbiw	r28, 0x07	; 7
 1a0:	0f b6       	in	r0, 0x3f	; 63
 1a2:	f8 94       	cli
 1a4:	de bf       	out	0x3e, r29	; 62
 1a6:	0f be       	out	0x3f, r0	; 63
 1a8:	cd bf       	out	0x3d, r28	; 61
	delay(2);
 1aa:	82 e0       	ldi	r24, 0x02	; 2
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	0e 94 a5 01 	call	0x34a	; 0x34a <delay>
	int t=0;
 1b2:	1a 82       	std	Y+2, r1	; 0x02
 1b4:	19 82       	std	Y+1, r1	; 0x01
 1b6:	01 c0       	rjmp	.+2      	; 0x1ba <kepad+0x24>
		}
		if (t==1)
		{
			return(s);
		}
	}		
 1b8:	00 00       	nop
	delay(2);
	int t=0;
	char s;
	while (1)
	{
	    PORTA=0x7f;
 1ba:	8b e3       	ldi	r24, 0x3B	; 59
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	2f e7       	ldi	r18, 0x7F	; 127
 1c0:	fc 01       	movw	r30, r24
 1c2:	20 83       	st	Z, r18
		char i=PINA;
 1c4:	89 e3       	ldi	r24, 0x39	; 57
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	fc 01       	movw	r30, r24
 1ca:	80 81       	ld	r24, Z
 1cc:	8c 83       	std	Y+4, r24	; 0x04
		i=i&0xff;
		if(i==0x7e)
 1ce:	8c 81       	ldd	r24, Y+4	; 0x04
 1d0:	8e 37       	cpi	r24, 0x7E	; 126
 1d2:	31 f4       	brne	.+12     	; 0x1e0 <kepad+0x4a>
		{
			s='7';
 1d4:	87 e3       	ldi	r24, 0x37	; 55
 1d6:	8b 83       	std	Y+3, r24	; 0x03
			t=1;
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	9a 83       	std	Y+2, r25	; 0x02
 1de:	89 83       	std	Y+1, r24	; 0x01
		}
			if(i==0x7d)
 1e0:	8c 81       	ldd	r24, Y+4	; 0x04
 1e2:	8d 37       	cpi	r24, 0x7D	; 125
 1e4:	31 f4       	brne	.+12     	; 0x1f2 <kepad+0x5c>
		{
			s='4';
 1e6:	84 e3       	ldi	r24, 0x34	; 52
 1e8:	8b 83       	std	Y+3, r24	; 0x03
			t=1;
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	9a 83       	std	Y+2, r25	; 0x02
 1f0:	89 83       	std	Y+1, r24	; 0x01
		}
			if(i==0x7b)
 1f2:	8c 81       	ldd	r24, Y+4	; 0x04
 1f4:	8b 37       	cpi	r24, 0x7B	; 123
 1f6:	31 f4       	brne	.+12     	; 0x204 <kepad+0x6e>
		{
			s='1';
 1f8:	81 e3       	ldi	r24, 0x31	; 49
 1fa:	8b 83       	std	Y+3, r24	; 0x03
			t=1;
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	9a 83       	std	Y+2, r25	; 0x02
 202:	89 83       	std	Y+1, r24	; 0x01
		}
			if(i==0x77)
 204:	8c 81       	ldd	r24, Y+4	; 0x04
 206:	87 37       	cpi	r24, 0x77	; 119
 208:	31 f4       	brne	.+12     	; 0x216 <kepad+0x80>
		{
			s='c';
 20a:	83 e6       	ldi	r24, 0x63	; 99
 20c:	8b 83       	std	Y+3, r24	; 0x03
			t=1;
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	9a 83       	std	Y+2, r25	; 0x02
 214:	89 83       	std	Y+1, r24	; 0x01
		}
			
        PORTA=0xbf;
 216:	8b e3       	ldi	r24, 0x3B	; 59
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	2f eb       	ldi	r18, 0xBF	; 191
 21c:	fc 01       	movw	r30, r24
 21e:	20 83       	st	Z, r18
		char j=PINA;
 220:	89 e3       	ldi	r24, 0x39	; 57
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	fc 01       	movw	r30, r24
 226:	80 81       	ld	r24, Z
 228:	8d 83       	std	Y+5, r24	; 0x05
		j=j&0xff;
		if (j==0xbe)
 22a:	8d 81       	ldd	r24, Y+5	; 0x05
 22c:	8e 3b       	cpi	r24, 0xBE	; 190
 22e:	31 f4       	brne	.+12     	; 0x23c <kepad+0xa6>
		{
			s='8';
 230:	88 e3       	ldi	r24, 0x38	; 56
 232:	8b 83       	std	Y+3, r24	; 0x03
			t=1;
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	9a 83       	std	Y+2, r25	; 0x02
 23a:	89 83       	std	Y+1, r24	; 0x01
		}
		if (j==0xbd)
 23c:	8d 81       	ldd	r24, Y+5	; 0x05
 23e:	8d 3b       	cpi	r24, 0xBD	; 189
 240:	31 f4       	brne	.+12     	; 0x24e <kepad+0xb8>
		{
			s='5';
 242:	85 e3       	ldi	r24, 0x35	; 53
 244:	8b 83       	std	Y+3, r24	; 0x03
			t=1;
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	9a 83       	std	Y+2, r25	; 0x02
 24c:	89 83       	std	Y+1, r24	; 0x01
		}
		if(j==0xbb)
 24e:	8d 81       	ldd	r24, Y+5	; 0x05
 250:	8b 3b       	cpi	r24, 0xBB	; 187
 252:	31 f4       	brne	.+12     	; 0x260 <kepad+0xca>
		{
			s='2';
 254:	82 e3       	ldi	r24, 0x32	; 50
 256:	8b 83       	std	Y+3, r24	; 0x03
			t=1;
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	9a 83       	std	Y+2, r25	; 0x02
 25e:	89 83       	std	Y+1, r24	; 0x01
		}
		if (j==0xb7)
 260:	8d 81       	ldd	r24, Y+5	; 0x05
 262:	87 3b       	cpi	r24, 0xB7	; 183
 264:	31 f4       	brne	.+12     	; 0x272 <kepad+0xdc>
		{
			s='0';
 266:	80 e3       	ldi	r24, 0x30	; 48
 268:	8b 83       	std	Y+3, r24	; 0x03
			t=1;
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	9a 83       	std	Y+2, r25	; 0x02
 270:	89 83       	std	Y+1, r24	; 0x01
		}
		
        PORTA=0xef;
 272:	8b e3       	ldi	r24, 0x3B	; 59
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	2f ee       	ldi	r18, 0xEF	; 239
 278:	fc 01       	movw	r30, r24
 27a:	20 83       	st	Z, r18
		char k=PINA;
 27c:	89 e3       	ldi	r24, 0x39	; 57
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	fc 01       	movw	r30, r24
 282:	80 81       	ld	r24, Z
 284:	8e 83       	std	Y+6, r24	; 0x06
		k=k&0xff;
		if (k==0xee)
 286:	8e 81       	ldd	r24, Y+6	; 0x06
 288:	8e 3e       	cpi	r24, 0xEE	; 238
 28a:	31 f4       	brne	.+12     	; 0x298 <kepad+0x102>
		{
			s='9';
 28c:	89 e3       	ldi	r24, 0x39	; 57
 28e:	8b 83       	std	Y+3, r24	; 0x03
			t=1;
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	9a 83       	std	Y+2, r25	; 0x02
 296:	89 83       	std	Y+1, r24	; 0x01
		}
		if (k==0xed)
 298:	8e 81       	ldd	r24, Y+6	; 0x06
 29a:	8d 3e       	cpi	r24, 0xED	; 237
 29c:	31 f4       	brne	.+12     	; 0x2aa <kepad+0x114>
		{
			s='6';
 29e:	86 e3       	ldi	r24, 0x36	; 54
 2a0:	8b 83       	std	Y+3, r24	; 0x03
			t=1;
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	9a 83       	std	Y+2, r25	; 0x02
 2a8:	89 83       	std	Y+1, r24	; 0x01
		}
		if (k==0xeb)
 2aa:	8e 81       	ldd	r24, Y+6	; 0x06
 2ac:	8b 3e       	cpi	r24, 0xEB	; 235
 2ae:	31 f4       	brne	.+12     	; 0x2bc <kepad+0x126>
		{
			s='3';
 2b0:	83 e3       	ldi	r24, 0x33	; 51
 2b2:	8b 83       	std	Y+3, r24	; 0x03
			t=1;
 2b4:	81 e0       	ldi	r24, 0x01	; 1
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	9a 83       	std	Y+2, r25	; 0x02
 2ba:	89 83       	std	Y+1, r24	; 0x01
		}
		if (k==0xe7)
 2bc:	8e 81       	ldd	r24, Y+6	; 0x06
 2be:	87 3e       	cpi	r24, 0xE7	; 231
 2c0:	31 f4       	brne	.+12     	; 0x2ce <kepad+0x138>
		{
			s='=';
 2c2:	8d e3       	ldi	r24, 0x3D	; 61
 2c4:	8b 83       	std	Y+3, r24	; 0x03
			t=1;
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	9a 83       	std	Y+2, r25	; 0x02
 2cc:	89 83       	std	Y+1, r24	; 0x01
		}

		PORTA=0xdf;
 2ce:	8b e3       	ldi	r24, 0x3B	; 59
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	2f ed       	ldi	r18, 0xDF	; 223
 2d4:	fc 01       	movw	r30, r24
 2d6:	20 83       	st	Z, r18
		char l=PINA;
 2d8:	89 e3       	ldi	r24, 0x39	; 57
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	fc 01       	movw	r30, r24
 2de:	80 81       	ld	r24, Z
 2e0:	8f 83       	std	Y+7, r24	; 0x07
		l=l&0xff;
		if (l==0xde)
 2e2:	8f 81       	ldd	r24, Y+7	; 0x07
 2e4:	8e 3d       	cpi	r24, 0xDE	; 222
 2e6:	31 f4       	brne	.+12     	; 0x2f4 <kepad+0x15e>
		{
			s='/';
 2e8:	8f e2       	ldi	r24, 0x2F	; 47
 2ea:	8b 83       	std	Y+3, r24	; 0x03
			t=1;
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	9a 83       	std	Y+2, r25	; 0x02
 2f2:	89 83       	std	Y+1, r24	; 0x01
		}
		if (l==0xdd)
 2f4:	8f 81       	ldd	r24, Y+7	; 0x07
 2f6:	8d 3d       	cpi	r24, 0xDD	; 221
 2f8:	31 f4       	brne	.+12     	; 0x306 <kepad+0x170>
		{
			s='*';
 2fa:	8a e2       	ldi	r24, 0x2A	; 42
 2fc:	8b 83       	std	Y+3, r24	; 0x03
			t=1;
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	9a 83       	std	Y+2, r25	; 0x02
 304:	89 83       	std	Y+1, r24	; 0x01
		}
		if (l==0xdb)
 306:	8f 81       	ldd	r24, Y+7	; 0x07
 308:	8b 3d       	cpi	r24, 0xDB	; 219
 30a:	31 f4       	brne	.+12     	; 0x318 <kepad+0x182>
		{
			s='-';
 30c:	8d e2       	ldi	r24, 0x2D	; 45
 30e:	8b 83       	std	Y+3, r24	; 0x03
			t=1;
 310:	81 e0       	ldi	r24, 0x01	; 1
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	9a 83       	std	Y+2, r25	; 0x02
 316:	89 83       	std	Y+1, r24	; 0x01
		}
		if (l==0xd7)
 318:	8f 81       	ldd	r24, Y+7	; 0x07
 31a:	87 3d       	cpi	r24, 0xD7	; 215
 31c:	31 f4       	brne	.+12     	; 0x32a <kepad+0x194>
		{
			s='+';
 31e:	8b e2       	ldi	r24, 0x2B	; 43
 320:	8b 83       	std	Y+3, r24	; 0x03
			t=1;
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	9a 83       	std	Y+2, r25	; 0x02
 328:	89 83       	std	Y+1, r24	; 0x01
		}
		if (t==1)
 32a:	89 81       	ldd	r24, Y+1	; 0x01
 32c:	9a 81       	ldd	r25, Y+2	; 0x02
 32e:	81 30       	cpi	r24, 0x01	; 1
 330:	91 05       	cpc	r25, r1
 332:	09 f0       	breq	.+2      	; 0x336 <kepad+0x1a0>
 334:	41 cf       	rjmp	.-382    	; 0x1b8 <kepad+0x22>
		{
			return(s);
 336:	8b 81       	ldd	r24, Y+3	; 0x03
		}
	}		
					
	
}
 338:	27 96       	adiw	r28, 0x07	; 7
 33a:	0f b6       	in	r0, 0x3f	; 63
 33c:	f8 94       	cli
 33e:	de bf       	out	0x3e, r29	; 62
 340:	0f be       	out	0x3f, r0	; 63
 342:	cd bf       	out	0x3d, r28	; 61
 344:	cf 91       	pop	r28
 346:	df 91       	pop	r29
 348:	08 95       	ret

0000034a <delay>:
void delay(int x)
{
 34a:	df 93       	push	r29
 34c:	cf 93       	push	r28
 34e:	00 d0       	rcall	.+0      	; 0x350 <delay+0x6>
 350:	00 d0       	rcall	.+0      	; 0x352 <delay+0x8>
 352:	00 d0       	rcall	.+0      	; 0x354 <delay+0xa>
 354:	cd b7       	in	r28, 0x3d	; 61
 356:	de b7       	in	r29, 0x3e	; 62
 358:	9e 83       	std	Y+6, r25	; 0x06
 35a:	8d 83       	std	Y+5, r24	; 0x05
	int i,j;
	for (i=0;i<=x;i++)
 35c:	1a 82       	std	Y+2, r1	; 0x02
 35e:	19 82       	std	Y+1, r1	; 0x01
 360:	13 c0       	rjmp	.+38     	; 0x388 <delay+0x3e>
	for(j=0;j<=1000;j++);
 362:	1c 82       	std	Y+4, r1	; 0x04
 364:	1b 82       	std	Y+3, r1	; 0x03
 366:	05 c0       	rjmp	.+10     	; 0x372 <delay+0x28>
 368:	8b 81       	ldd	r24, Y+3	; 0x03
 36a:	9c 81       	ldd	r25, Y+4	; 0x04
 36c:	01 96       	adiw	r24, 0x01	; 1
 36e:	9c 83       	std	Y+4, r25	; 0x04
 370:	8b 83       	std	Y+3, r24	; 0x03
 372:	8b 81       	ldd	r24, Y+3	; 0x03
 374:	9c 81       	ldd	r25, Y+4	; 0x04
 376:	23 e0       	ldi	r18, 0x03	; 3
 378:	89 3e       	cpi	r24, 0xE9	; 233
 37a:	92 07       	cpc	r25, r18
 37c:	ac f3       	brlt	.-22     	; 0x368 <delay+0x1e>
	
}
void delay(int x)
{
	int i,j;
	for (i=0;i<=x;i++)
 37e:	89 81       	ldd	r24, Y+1	; 0x01
 380:	9a 81       	ldd	r25, Y+2	; 0x02
 382:	01 96       	adiw	r24, 0x01	; 1
 384:	9a 83       	std	Y+2, r25	; 0x02
 386:	89 83       	std	Y+1, r24	; 0x01
 388:	29 81       	ldd	r18, Y+1	; 0x01
 38a:	3a 81       	ldd	r19, Y+2	; 0x02
 38c:	8d 81       	ldd	r24, Y+5	; 0x05
 38e:	9e 81       	ldd	r25, Y+6	; 0x06
 390:	82 17       	cp	r24, r18
 392:	93 07       	cpc	r25, r19
 394:	34 f7       	brge	.-52     	; 0x362 <delay+0x18>
	for(j=0;j<=1000;j++);
	
}
 396:	26 96       	adiw	r28, 0x06	; 6
 398:	0f b6       	in	r0, 0x3f	; 63
 39a:	f8 94       	cli
 39c:	de bf       	out	0x3e, r29	; 62
 39e:	0f be       	out	0x3f, r0	; 63
 3a0:	cd bf       	out	0x3d, r28	; 61
 3a2:	cf 91       	pop	r28
 3a4:	df 91       	pop	r29
 3a6:	08 95       	ret

000003a8 <command>:
void command(char c)
{
 3a8:	df 93       	push	r29
 3aa:	cf 93       	push	r28
 3ac:	0f 92       	push	r0
 3ae:	cd b7       	in	r28, 0x3d	; 61
 3b0:	de b7       	in	r29, 0x3e	; 62
 3b2:	89 83       	std	Y+1, r24	; 0x01
	PORTC=c;
 3b4:	85 e3       	ldi	r24, 0x35	; 53
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	29 81       	ldd	r18, Y+1	; 0x01
 3ba:	fc 01       	movw	r30, r24
 3bc:	20 83       	st	Z, r18
	PORTD&=~(1<<6);
 3be:	82 e3       	ldi	r24, 0x32	; 50
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	22 e3       	ldi	r18, 0x32	; 50
 3c4:	30 e0       	ldi	r19, 0x00	; 0
 3c6:	f9 01       	movw	r30, r18
 3c8:	20 81       	ld	r18, Z
 3ca:	2f 7b       	andi	r18, 0xBF	; 191
 3cc:	fc 01       	movw	r30, r24
 3ce:	20 83       	st	Z, r18
	PORTD|=(1<<7);
 3d0:	82 e3       	ldi	r24, 0x32	; 50
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	22 e3       	ldi	r18, 0x32	; 50
 3d6:	30 e0       	ldi	r19, 0x00	; 0
 3d8:	f9 01       	movw	r30, r18
 3da:	20 81       	ld	r18, Z
 3dc:	20 68       	ori	r18, 0x80	; 128
 3de:	fc 01       	movw	r30, r24
 3e0:	20 83       	st	Z, r18
	delay(2);
 3e2:	82 e0       	ldi	r24, 0x02	; 2
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	0e 94 a5 01 	call	0x34a	; 0x34a <delay>
	PORTD&=~(1<<7);
 3ea:	82 e3       	ldi	r24, 0x32	; 50
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	22 e3       	ldi	r18, 0x32	; 50
 3f0:	30 e0       	ldi	r19, 0x00	; 0
 3f2:	f9 01       	movw	r30, r18
 3f4:	20 81       	ld	r18, Z
 3f6:	2f 77       	andi	r18, 0x7F	; 127
 3f8:	fc 01       	movw	r30, r24
 3fa:	20 83       	st	Z, r18
}
 3fc:	0f 90       	pop	r0
 3fe:	cf 91       	pop	r28
 400:	df 91       	pop	r29
 402:	08 95       	ret

00000404 <data>:
void data(char d)
{
 404:	df 93       	push	r29
 406:	cf 93       	push	r28
 408:	0f 92       	push	r0
 40a:	cd b7       	in	r28, 0x3d	; 61
 40c:	de b7       	in	r29, 0x3e	; 62
 40e:	89 83       	std	Y+1, r24	; 0x01
	PORTC=d;
 410:	85 e3       	ldi	r24, 0x35	; 53
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	29 81       	ldd	r18, Y+1	; 0x01
 416:	fc 01       	movw	r30, r24
 418:	20 83       	st	Z, r18
	PORTD|=(1<<6);
 41a:	82 e3       	ldi	r24, 0x32	; 50
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	22 e3       	ldi	r18, 0x32	; 50
 420:	30 e0       	ldi	r19, 0x00	; 0
 422:	f9 01       	movw	r30, r18
 424:	20 81       	ld	r18, Z
 426:	20 64       	ori	r18, 0x40	; 64
 428:	fc 01       	movw	r30, r24
 42a:	20 83       	st	Z, r18
	PORTD|=(1<<7);
 42c:	82 e3       	ldi	r24, 0x32	; 50
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	22 e3       	ldi	r18, 0x32	; 50
 432:	30 e0       	ldi	r19, 0x00	; 0
 434:	f9 01       	movw	r30, r18
 436:	20 81       	ld	r18, Z
 438:	20 68       	ori	r18, 0x80	; 128
 43a:	fc 01       	movw	r30, r24
 43c:	20 83       	st	Z, r18
	delay(2);
 43e:	82 e0       	ldi	r24, 0x02	; 2
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	0e 94 a5 01 	call	0x34a	; 0x34a <delay>
	PORTD&=~(1<<7);
 446:	82 e3       	ldi	r24, 0x32	; 50
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	22 e3       	ldi	r18, 0x32	; 50
 44c:	30 e0       	ldi	r19, 0x00	; 0
 44e:	f9 01       	movw	r30, r18
 450:	20 81       	ld	r18, Z
 452:	2f 77       	andi	r18, 0x7F	; 127
 454:	fc 01       	movw	r30, r24
 456:	20 83       	st	Z, r18
}
 458:	0f 90       	pop	r0
 45a:	cf 91       	pop	r28
 45c:	df 91       	pop	r29
 45e:	08 95       	ret

00000460 <display>:
void display(const char *s)
{
 460:	df 93       	push	r29
 462:	cf 93       	push	r28
 464:	00 d0       	rcall	.+0      	; 0x466 <display+0x6>
 466:	cd b7       	in	r28, 0x3d	; 61
 468:	de b7       	in	r29, 0x3e	; 62
 46a:	9a 83       	std	Y+2, r25	; 0x02
 46c:	89 83       	std	Y+1, r24	; 0x01
	while(*s)
 46e:	10 c0       	rjmp	.+32     	; 0x490 <display+0x30>
	{
		data(*s++);
 470:	89 81       	ldd	r24, Y+1	; 0x01
 472:	9a 81       	ldd	r25, Y+2	; 0x02
 474:	fc 01       	movw	r30, r24
 476:	20 81       	ld	r18, Z
 478:	89 81       	ldd	r24, Y+1	; 0x01
 47a:	9a 81       	ldd	r25, Y+2	; 0x02
 47c:	01 96       	adiw	r24, 0x01	; 1
 47e:	9a 83       	std	Y+2, r25	; 0x02
 480:	89 83       	std	Y+1, r24	; 0x01
 482:	82 2f       	mov	r24, r18
 484:	0e 94 02 02 	call	0x404	; 0x404 <data>
		delay(2);
 488:	82 e0       	ldi	r24, 0x02	; 2
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	0e 94 a5 01 	call	0x34a	; 0x34a <delay>
	delay(2);
	PORTD&=~(1<<7);
}
void display(const char *s)
{
	while(*s)
 490:	89 81       	ldd	r24, Y+1	; 0x01
 492:	9a 81       	ldd	r25, Y+2	; 0x02
 494:	fc 01       	movw	r30, r24
 496:	80 81       	ld	r24, Z
 498:	88 23       	and	r24, r24
 49a:	51 f7       	brne	.-44     	; 0x470 <display+0x10>
	{
		data(*s++);
		delay(2);
	}
}
 49c:	0f 90       	pop	r0
 49e:	0f 90       	pop	r0
 4a0:	cf 91       	pop	r28
 4a2:	df 91       	pop	r29
 4a4:	08 95       	ret

000004a6 <adc1>:
void adc1()
{
 4a6:	df 93       	push	r29
 4a8:	cf 93       	push	r28
 4aa:	00 d0       	rcall	.+0      	; 0x4ac <adc1+0x6>
 4ac:	00 d0       	rcall	.+0      	; 0x4ae <adc1+0x8>
 4ae:	cd b7       	in	r28, 0x3d	; 61
 4b0:	de b7       	in	r29, 0x3e	; 62
		ADMUX=0x62;
 4b2:	87 e2       	ldi	r24, 0x27	; 39
 4b4:	90 e0       	ldi	r25, 0x00	; 0
 4b6:	22 e6       	ldi	r18, 0x62	; 98
 4b8:	fc 01       	movw	r30, r24
 4ba:	20 83       	st	Z, r18
        ADCSRA|=(1<<ADSC);
 4bc:	86 e2       	ldi	r24, 0x26	; 38
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	26 e2       	ldi	r18, 0x26	; 38
 4c2:	30 e0       	ldi	r19, 0x00	; 0
 4c4:	f9 01       	movw	r30, r18
 4c6:	20 81       	ld	r18, Z
 4c8:	20 64       	ori	r18, 0x40	; 64
 4ca:	fc 01       	movw	r30, r24
 4cc:	20 83       	st	Z, r18
		while((ADCSRA&(1<<ADIF))==0);
 4ce:	00 00       	nop
 4d0:	86 e2       	ldi	r24, 0x26	; 38
 4d2:	90 e0       	ldi	r25, 0x00	; 0
 4d4:	fc 01       	movw	r30, r24
 4d6:	80 81       	ld	r24, Z
 4d8:	88 2f       	mov	r24, r24
 4da:	90 e0       	ldi	r25, 0x00	; 0
 4dc:	80 71       	andi	r24, 0x10	; 16
 4de:	90 70       	andi	r25, 0x00	; 0
 4e0:	00 97       	sbiw	r24, 0x00	; 0
 4e2:	b1 f3       	breq	.-20     	; 0x4d0 <adc1+0x2a>
		 y=ADCH;
 4e4:	85 e2       	ldi	r24, 0x25	; 37
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	fc 01       	movw	r30, r24
 4ea:	80 81       	ld	r24, Z
 4ec:	80 93 81 00 	sts	0x0081, r24
		char b1=y%10;
 4f0:	80 91 81 00 	lds	r24, 0x0081
 4f4:	9a e0       	ldi	r25, 0x0A	; 10
 4f6:	69 2f       	mov	r22, r25
 4f8:	0e 94 09 03 	call	0x612	; 0x612 <__udivmodqi4>
 4fc:	89 2f       	mov	r24, r25
 4fe:	89 83       	std	Y+1, r24	; 0x01
		char b2=y/10;
 500:	80 91 81 00 	lds	r24, 0x0081
 504:	9a e0       	ldi	r25, 0x0A	; 10
 506:	69 2f       	mov	r22, r25
 508:	0e 94 09 03 	call	0x612	; 0x612 <__udivmodqi4>
 50c:	8a 83       	std	Y+2, r24	; 0x02
		char b3=b2%10;
 50e:	8a 81       	ldd	r24, Y+2	; 0x02
 510:	9a e0       	ldi	r25, 0x0A	; 10
 512:	69 2f       	mov	r22, r25
 514:	0e 94 09 03 	call	0x612	; 0x612 <__udivmodqi4>
 518:	89 2f       	mov	r24, r25
 51a:	8b 83       	std	Y+3, r24	; 0x03
		char b4=b2/10;
 51c:	8a 81       	ldd	r24, Y+2	; 0x02
 51e:	9a e0       	ldi	r25, 0x0A	; 10
 520:	69 2f       	mov	r22, r25
 522:	0e 94 09 03 	call	0x612	; 0x612 <__udivmodqi4>
 526:	8c 83       	std	Y+4, r24	; 0x04
		command(0x80);
 528:	80 e8       	ldi	r24, 0x80	; 128
 52a:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <command>
		data(b4+0x30);
 52e:	8c 81       	ldd	r24, Y+4	; 0x04
 530:	80 5d       	subi	r24, 0xD0	; 208
 532:	0e 94 02 02 	call	0x404	; 0x404 <data>
		data(b3+0x30);
 536:	8b 81       	ldd	r24, Y+3	; 0x03
 538:	80 5d       	subi	r24, 0xD0	; 208
 53a:	0e 94 02 02 	call	0x404	; 0x404 <data>
		data(b1+0x30);
 53e:	89 81       	ldd	r24, Y+1	; 0x01
 540:	80 5d       	subi	r24, 0xD0	; 208
 542:	0e 94 02 02 	call	0x404	; 0x404 <data>
		delay(2);
 546:	82 e0       	ldi	r24, 0x02	; 2
 548:	90 e0       	ldi	r25, 0x00	; 0
 54a:	0e 94 a5 01 	call	0x34a	; 0x34a <delay>
		

}	
 54e:	0f 90       	pop	r0
 550:	0f 90       	pop	r0
 552:	0f 90       	pop	r0
 554:	0f 90       	pop	r0
 556:	cf 91       	pop	r28
 558:	df 91       	pop	r29
 55a:	08 95       	ret

0000055c <adc2>:
void adc2()
{
 55c:	df 93       	push	r29
 55e:	cf 93       	push	r28
 560:	00 d0       	rcall	.+0      	; 0x562 <adc2+0x6>
 562:	00 d0       	rcall	.+0      	; 0x564 <adc2+0x8>
 564:	cd b7       	in	r28, 0x3d	; 61
 566:	de b7       	in	r29, 0x3e	; 62
		ADMUX=0x63
 568:	87 e2       	ldi	r24, 0x27	; 39
 56a:	90 e0       	ldi	r25, 0x00	; 0
 56c:	23 e6       	ldi	r18, 0x63	; 99
 56e:	fc 01       	movw	r30, r24
 570:	20 83       	st	Z, r18
		;
        ADCSRA|=(1<<ADSC);
 572:	86 e2       	ldi	r24, 0x26	; 38
 574:	90 e0       	ldi	r25, 0x00	; 0
 576:	26 e2       	ldi	r18, 0x26	; 38
 578:	30 e0       	ldi	r19, 0x00	; 0
 57a:	f9 01       	movw	r30, r18
 57c:	20 81       	ld	r18, Z
 57e:	20 64       	ori	r18, 0x40	; 64
 580:	fc 01       	movw	r30, r24
 582:	20 83       	st	Z, r18
		while((ADCSRA&(1<<ADIF))==0);
 584:	00 00       	nop
 586:	86 e2       	ldi	r24, 0x26	; 38
 588:	90 e0       	ldi	r25, 0x00	; 0
 58a:	fc 01       	movw	r30, r24
 58c:	80 81       	ld	r24, Z
 58e:	88 2f       	mov	r24, r24
 590:	90 e0       	ldi	r25, 0x00	; 0
 592:	80 71       	andi	r24, 0x10	; 16
 594:	90 70       	andi	r25, 0x00	; 0
 596:	00 97       	sbiw	r24, 0x00	; 0
 598:	b1 f3       	breq	.-20     	; 0x586 <adc2+0x2a>
		z=ADCH;
 59a:	85 e2       	ldi	r24, 0x25	; 37
 59c:	90 e0       	ldi	r25, 0x00	; 0
 59e:	fc 01       	movw	r30, r24
 5a0:	80 81       	ld	r24, Z
 5a2:	80 93 80 00 	sts	0x0080, r24
		char b1=z%10;
 5a6:	80 91 80 00 	lds	r24, 0x0080
 5aa:	9a e0       	ldi	r25, 0x0A	; 10
 5ac:	69 2f       	mov	r22, r25
 5ae:	0e 94 09 03 	call	0x612	; 0x612 <__udivmodqi4>
 5b2:	89 2f       	mov	r24, r25
 5b4:	89 83       	std	Y+1, r24	; 0x01
		char b2=z/10;
 5b6:	80 91 80 00 	lds	r24, 0x0080
 5ba:	9a e0       	ldi	r25, 0x0A	; 10
 5bc:	69 2f       	mov	r22, r25
 5be:	0e 94 09 03 	call	0x612	; 0x612 <__udivmodqi4>
 5c2:	8a 83       	std	Y+2, r24	; 0x02
		char b3=b2%10;
 5c4:	8a 81       	ldd	r24, Y+2	; 0x02
 5c6:	9a e0       	ldi	r25, 0x0A	; 10
 5c8:	69 2f       	mov	r22, r25
 5ca:	0e 94 09 03 	call	0x612	; 0x612 <__udivmodqi4>
 5ce:	89 2f       	mov	r24, r25
 5d0:	8b 83       	std	Y+3, r24	; 0x03
		char b4=b2/10;
 5d2:	8a 81       	ldd	r24, Y+2	; 0x02
 5d4:	9a e0       	ldi	r25, 0x0A	; 10
 5d6:	69 2f       	mov	r22, r25
 5d8:	0e 94 09 03 	call	0x612	; 0x612 <__udivmodqi4>
 5dc:	8c 83       	std	Y+4, r24	; 0x04
		command(0x86);
 5de:	86 e8       	ldi	r24, 0x86	; 134
 5e0:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <command>
		data(b4+0x30);
 5e4:	8c 81       	ldd	r24, Y+4	; 0x04
 5e6:	80 5d       	subi	r24, 0xD0	; 208
 5e8:	0e 94 02 02 	call	0x404	; 0x404 <data>
		data(b3+0x30);
 5ec:	8b 81       	ldd	r24, Y+3	; 0x03
 5ee:	80 5d       	subi	r24, 0xD0	; 208
 5f0:	0e 94 02 02 	call	0x404	; 0x404 <data>
		data(b1+0x30);
 5f4:	89 81       	ldd	r24, Y+1	; 0x01
 5f6:	80 5d       	subi	r24, 0xD0	; 208
 5f8:	0e 94 02 02 	call	0x404	; 0x404 <data>
		delay(2);
 5fc:	82 e0       	ldi	r24, 0x02	; 2
 5fe:	90 e0       	ldi	r25, 0x00	; 0
 600:	0e 94 a5 01 	call	0x34a	; 0x34a <delay>

 604:	0f 90       	pop	r0
 606:	0f 90       	pop	r0
 608:	0f 90       	pop	r0
 60a:	0f 90       	pop	r0
 60c:	cf 91       	pop	r28
 60e:	df 91       	pop	r29
 610:	08 95       	ret

00000612 <__udivmodqi4>:
 612:	99 1b       	sub	r25, r25
 614:	79 e0       	ldi	r23, 0x09	; 9
 616:	04 c0       	rjmp	.+8      	; 0x620 <__udivmodqi4_ep>

00000618 <__udivmodqi4_loop>:
 618:	99 1f       	adc	r25, r25
 61a:	96 17       	cp	r25, r22
 61c:	08 f0       	brcs	.+2      	; 0x620 <__udivmodqi4_ep>
 61e:	96 1b       	sub	r25, r22

00000620 <__udivmodqi4_ep>:
 620:	88 1f       	adc	r24, r24
 622:	7a 95       	dec	r23
 624:	c9 f7       	brne	.-14     	; 0x618 <__udivmodqi4_loop>
 626:	80 95       	com	r24
 628:	08 95       	ret

0000062a <_exit>:
 62a:	f8 94       	cli

0000062c <__stop_program>:
 62c:	ff cf       	rjmp	.-2      	; 0x62c <__stop_program>
