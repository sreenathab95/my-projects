
button without grnd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000384  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  00000384  000003f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000410  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000adc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000020  00000000  00000000  00000b61  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000046  00000000  00000000  00000b81  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000183  00000000  00000000  00000bc7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000009e  00000000  00000000  00000d4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000386  00000000  00000000  00000de8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000060  00000000  00000000  00001170  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000000b9  00000000  00000000  000011d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubtypes 0000001e  00000000  00000000  00001289  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e8       	ldi	r30, 0x84	; 132
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 37       	cpi	r26, 0x78	; 120
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 c0 01 	jmp	0x380	; 0x380 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
void command(char c);
void data(char d);
void display(const char *s);

int main(void)
{
  82:	df 93       	push	r29
  84:	cf 93       	push	r28
  86:	00 d0       	rcall	.+0      	; 0x88 <main+0x6>
  88:	00 d0       	rcall	.+0      	; 0x8a <main+0x8>
  8a:	cd b7       	in	r28, 0x3d	; 61
  8c:	de b7       	in	r29, 0x3e	; 62
	 DDRA=0xf0;
  8e:	8a e3       	ldi	r24, 0x3A	; 58
  90:	90 e0       	ldi	r25, 0x00	; 0
  92:	20 ef       	ldi	r18, 0xF0	; 240
  94:	fc 01       	movw	r30, r24
  96:	20 83       	st	Z, r18
		DDRC=0xff;
  98:	84 e3       	ldi	r24, 0x34	; 52
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	2f ef       	ldi	r18, 0xFF	; 255
  9e:	fc 01       	movw	r30, r24
  a0:	20 83       	st	Z, r18
		DDRD=0xff;
  a2:	81 e3       	ldi	r24, 0x31	; 49
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	2f ef       	ldi	r18, 0xFF	; 255
  a8:	fc 01       	movw	r30, r24
  aa:	20 83       	st	Z, r18
		command(0x38);
  ac:	88 e3       	ldi	r24, 0x38	; 56
  ae:	0e 94 41 01 	call	0x282	; 0x282 <command>
		command(0x80);
  b2:	80 e8       	ldi	r24, 0x80	; 128
  b4:	0e 94 41 01 	call	0x282	; 0x282 <command>
		command(0x0c);
  b8:	8c e0       	ldi	r24, 0x0C	; 12
  ba:	0e 94 41 01 	call	0x282	; 0x282 <command>
		command(0x06);
  be:	86 e0       	ldi	r24, 0x06	; 6
  c0:	0e 94 41 01 	call	0x282	; 0x282 <command>
		command(0x01);
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	0e 94 41 01 	call	0x282	; 0x282 <command>
  ca:	01 c0       	rjmp	.+2      	; 0xce <main+0x4c>
		}
		if (l==0xd7)
		{
			display("+");
		}
	}	
  cc:	00 00       	nop
		command(0x0c);
		command(0x06);
		command(0x01);
        while(1)
        {
	    PORTA=0x7f;
  ce:	8b e3       	ldi	r24, 0x3B	; 59
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	2f e7       	ldi	r18, 0x7F	; 127
  d4:	fc 01       	movw	r30, r24
  d6:	20 83       	st	Z, r18
		char i=PINA;
  d8:	89 e3       	ldi	r24, 0x39	; 57
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	fc 01       	movw	r30, r24
  de:	80 81       	ld	r24, Z
  e0:	89 83       	std	Y+1, r24	; 0x01
		i=i&0xff;
		if(i==0x7e)
  e2:	89 81       	ldd	r24, Y+1	; 0x01
  e4:	8e 37       	cpi	r24, 0x7E	; 126
  e6:	31 f4       	brne	.+12     	; 0xf4 <main+0x72>
		{
			command(0x80);
  e8:	80 e8       	ldi	r24, 0x80	; 128
  ea:	0e 94 41 01 	call	0x282	; 0x282 <command>
			data('7');
  ee:	87 e3       	ldi	r24, 0x37	; 55
  f0:	0e 94 6f 01 	call	0x2de	; 0x2de <data>
		}
			if(i==0x7d)
  f4:	89 81       	ldd	r24, Y+1	; 0x01
  f6:	8d 37       	cpi	r24, 0x7D	; 125
  f8:	31 f4       	brne	.+12     	; 0x106 <main+0x84>
		{
			command(0x80);
  fa:	80 e8       	ldi	r24, 0x80	; 128
  fc:	0e 94 41 01 	call	0x282	; 0x282 <command>
			data('4');
 100:	84 e3       	ldi	r24, 0x34	; 52
 102:	0e 94 6f 01 	call	0x2de	; 0x2de <data>
		}
			if(i==0x7b)
 106:	89 81       	ldd	r24, Y+1	; 0x01
 108:	8b 37       	cpi	r24, 0x7B	; 123
 10a:	31 f4       	brne	.+12     	; 0x118 <main+0x96>
		{
			command(0x80);
 10c:	80 e8       	ldi	r24, 0x80	; 128
 10e:	0e 94 41 01 	call	0x282	; 0x282 <command>
			data('1');
 112:	81 e3       	ldi	r24, 0x31	; 49
 114:	0e 94 6f 01 	call	0x2de	; 0x2de <data>
		}
			if(i==0x77)
 118:	89 81       	ldd	r24, Y+1	; 0x01
 11a:	87 37       	cpi	r24, 0x77	; 119
 11c:	31 f4       	brne	.+12     	; 0x12a <main+0xa8>
		{
			command(0x80);
 11e:	80 e8       	ldi	r24, 0x80	; 128
 120:	0e 94 41 01 	call	0x282	; 0x282 <command>
			data('c');
 124:	83 e6       	ldi	r24, 0x63	; 99
 126:	0e 94 6f 01 	call	0x2de	; 0x2de <data>
		}	
		PORTA=0xbf;
 12a:	8b e3       	ldi	r24, 0x3B	; 59
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	2f eb       	ldi	r18, 0xBF	; 191
 130:	fc 01       	movw	r30, r24
 132:	20 83       	st	Z, r18
		char j=PINA;
 134:	89 e3       	ldi	r24, 0x39	; 57
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	fc 01       	movw	r30, r24
 13a:	80 81       	ld	r24, Z
 13c:	8a 83       	std	Y+2, r24	; 0x02
		j=j&0xff;
		command(0x80);
 13e:	80 e8       	ldi	r24, 0x80	; 128
 140:	0e 94 41 01 	call	0x282	; 0x282 <command>
		if (j==0xbe)
 144:	8a 81       	ldd	r24, Y+2	; 0x02
 146:	8e 3b       	cpi	r24, 0xBE	; 190
 148:	21 f4       	brne	.+8      	; 0x152 <main+0xd0>
		{
			display("8");
 14a:	80 e6       	ldi	r24, 0x60	; 96
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	0e 94 9d 01 	call	0x33a	; 0x33a <display>
		}
		if (j==0xbd)
 152:	8a 81       	ldd	r24, Y+2	; 0x02
 154:	8d 3b       	cpi	r24, 0xBD	; 189
 156:	21 f4       	brne	.+8      	; 0x160 <main+0xde>
		{
			display("5");
 158:	82 e6       	ldi	r24, 0x62	; 98
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	0e 94 9d 01 	call	0x33a	; 0x33a <display>
		}
		if(j==0xbb)
 160:	8a 81       	ldd	r24, Y+2	; 0x02
 162:	8b 3b       	cpi	r24, 0xBB	; 187
 164:	21 f4       	brne	.+8      	; 0x16e <main+0xec>
		{
			display("2");
 166:	84 e6       	ldi	r24, 0x64	; 100
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	0e 94 9d 01 	call	0x33a	; 0x33a <display>
		}
		if (j==0xb7)
 16e:	8a 81       	ldd	r24, Y+2	; 0x02
 170:	87 3b       	cpi	r24, 0xB7	; 183
 172:	21 f4       	brne	.+8      	; 0x17c <main+0xfa>
		{
			display("0");
 174:	86 e6       	ldi	r24, 0x66	; 102
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	0e 94 9d 01 	call	0x33a	; 0x33a <display>
		}
		PORTA=0xef;
 17c:	8b e3       	ldi	r24, 0x3B	; 59
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	2f ee       	ldi	r18, 0xEF	; 239
 182:	fc 01       	movw	r30, r24
 184:	20 83       	st	Z, r18
		char k=PINA;
 186:	89 e3       	ldi	r24, 0x39	; 57
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	fc 01       	movw	r30, r24
 18c:	80 81       	ld	r24, Z
 18e:	8b 83       	std	Y+3, r24	; 0x03
		k=k&0xff;
		command(0x80);
 190:	80 e8       	ldi	r24, 0x80	; 128
 192:	0e 94 41 01 	call	0x282	; 0x282 <command>
		if (k==0xee)
 196:	8b 81       	ldd	r24, Y+3	; 0x03
 198:	8e 3e       	cpi	r24, 0xEE	; 238
 19a:	21 f4       	brne	.+8      	; 0x1a4 <main+0x122>
		{
			display("9");
 19c:	88 e6       	ldi	r24, 0x68	; 104
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	0e 94 9d 01 	call	0x33a	; 0x33a <display>
		}
		if (k==0xed)
 1a4:	8b 81       	ldd	r24, Y+3	; 0x03
 1a6:	8d 3e       	cpi	r24, 0xED	; 237
 1a8:	21 f4       	brne	.+8      	; 0x1b2 <main+0x130>
		{
			display("6");
 1aa:	8a e6       	ldi	r24, 0x6A	; 106
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	0e 94 9d 01 	call	0x33a	; 0x33a <display>
		}
		if (k==0xeb)
 1b2:	8b 81       	ldd	r24, Y+3	; 0x03
 1b4:	8b 3e       	cpi	r24, 0xEB	; 235
 1b6:	21 f4       	brne	.+8      	; 0x1c0 <main+0x13e>
		{
			display("3");
 1b8:	8c e6       	ldi	r24, 0x6C	; 108
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	0e 94 9d 01 	call	0x33a	; 0x33a <display>
		}
		if (k==0xe7)
 1c0:	8b 81       	ldd	r24, Y+3	; 0x03
 1c2:	87 3e       	cpi	r24, 0xE7	; 231
 1c4:	21 f4       	brne	.+8      	; 0x1ce <main+0x14c>
		{
			display("=");
 1c6:	8e e6       	ldi	r24, 0x6E	; 110
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	0e 94 9d 01 	call	0x33a	; 0x33a <display>
		}
		PORTA=0xdf;
 1ce:	8b e3       	ldi	r24, 0x3B	; 59
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	2f ed       	ldi	r18, 0xDF	; 223
 1d4:	fc 01       	movw	r30, r24
 1d6:	20 83       	st	Z, r18
		char l=PINA;
 1d8:	89 e3       	ldi	r24, 0x39	; 57
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	fc 01       	movw	r30, r24
 1de:	80 81       	ld	r24, Z
 1e0:	8c 83       	std	Y+4, r24	; 0x04
		l=l&0xff;
		command(0x80);
 1e2:	80 e8       	ldi	r24, 0x80	; 128
 1e4:	0e 94 41 01 	call	0x282	; 0x282 <command>
		if (l==0xde)
 1e8:	8c 81       	ldd	r24, Y+4	; 0x04
 1ea:	8e 3d       	cpi	r24, 0xDE	; 222
 1ec:	21 f4       	brne	.+8      	; 0x1f6 <main+0x174>
		{
			display("/");
 1ee:	80 e7       	ldi	r24, 0x70	; 112
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	0e 94 9d 01 	call	0x33a	; 0x33a <display>
		}
		if (l==0xdd)
 1f6:	8c 81       	ldd	r24, Y+4	; 0x04
 1f8:	8d 3d       	cpi	r24, 0xDD	; 221
 1fa:	21 f4       	brne	.+8      	; 0x204 <main+0x182>
		{
			display("*");
 1fc:	82 e7       	ldi	r24, 0x72	; 114
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	0e 94 9d 01 	call	0x33a	; 0x33a <display>
		}
		if (l==0xdb)
 204:	8c 81       	ldd	r24, Y+4	; 0x04
 206:	8b 3d       	cpi	r24, 0xDB	; 219
 208:	21 f4       	brne	.+8      	; 0x212 <main+0x190>
		{
			display("-");
 20a:	84 e7       	ldi	r24, 0x74	; 116
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	0e 94 9d 01 	call	0x33a	; 0x33a <display>
		}
		if (l==0xd7)
 212:	8c 81       	ldd	r24, Y+4	; 0x04
 214:	87 3d       	cpi	r24, 0xD7	; 215
 216:	09 f0       	breq	.+2      	; 0x21a <main+0x198>
 218:	59 cf       	rjmp	.-334    	; 0xcc <main+0x4a>
		{
			display("+");
 21a:	86 e7       	ldi	r24, 0x76	; 118
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	0e 94 9d 01 	call	0x33a	; 0x33a <display>
		}
	}	
 222:	55 cf       	rjmp	.-342    	; 0xce <main+0x4c>

00000224 <delay>:
}					
					
				
    
void delay(int x)
{
 224:	df 93       	push	r29
 226:	cf 93       	push	r28
 228:	00 d0       	rcall	.+0      	; 0x22a <delay+0x6>
 22a:	00 d0       	rcall	.+0      	; 0x22c <delay+0x8>
 22c:	00 d0       	rcall	.+0      	; 0x22e <delay+0xa>
 22e:	cd b7       	in	r28, 0x3d	; 61
 230:	de b7       	in	r29, 0x3e	; 62
 232:	9e 83       	std	Y+6, r25	; 0x06
 234:	8d 83       	std	Y+5, r24	; 0x05
	int i,j;
	for (i=0;i<=x;i++)
 236:	1a 82       	std	Y+2, r1	; 0x02
 238:	19 82       	std	Y+1, r1	; 0x01
 23a:	13 c0       	rjmp	.+38     	; 0x262 <delay+0x3e>
	for(j=0;j<=1000;j++);
 23c:	1c 82       	std	Y+4, r1	; 0x04
 23e:	1b 82       	std	Y+3, r1	; 0x03
 240:	05 c0       	rjmp	.+10     	; 0x24c <delay+0x28>
 242:	8b 81       	ldd	r24, Y+3	; 0x03
 244:	9c 81       	ldd	r25, Y+4	; 0x04
 246:	01 96       	adiw	r24, 0x01	; 1
 248:	9c 83       	std	Y+4, r25	; 0x04
 24a:	8b 83       	std	Y+3, r24	; 0x03
 24c:	8b 81       	ldd	r24, Y+3	; 0x03
 24e:	9c 81       	ldd	r25, Y+4	; 0x04
 250:	23 e0       	ldi	r18, 0x03	; 3
 252:	89 3e       	cpi	r24, 0xE9	; 233
 254:	92 07       	cpc	r25, r18
 256:	ac f3       	brlt	.-22     	; 0x242 <delay+0x1e>
				
    
void delay(int x)
{
	int i,j;
	for (i=0;i<=x;i++)
 258:	89 81       	ldd	r24, Y+1	; 0x01
 25a:	9a 81       	ldd	r25, Y+2	; 0x02
 25c:	01 96       	adiw	r24, 0x01	; 1
 25e:	9a 83       	std	Y+2, r25	; 0x02
 260:	89 83       	std	Y+1, r24	; 0x01
 262:	29 81       	ldd	r18, Y+1	; 0x01
 264:	3a 81       	ldd	r19, Y+2	; 0x02
 266:	8d 81       	ldd	r24, Y+5	; 0x05
 268:	9e 81       	ldd	r25, Y+6	; 0x06
 26a:	82 17       	cp	r24, r18
 26c:	93 07       	cpc	r25, r19
 26e:	34 f7       	brge	.-52     	; 0x23c <delay+0x18>
	for(j=0;j<=1000;j++);
	
}
 270:	26 96       	adiw	r28, 0x06	; 6
 272:	0f b6       	in	r0, 0x3f	; 63
 274:	f8 94       	cli
 276:	de bf       	out	0x3e, r29	; 62
 278:	0f be       	out	0x3f, r0	; 63
 27a:	cd bf       	out	0x3d, r28	; 61
 27c:	cf 91       	pop	r28
 27e:	df 91       	pop	r29
 280:	08 95       	ret

00000282 <command>:
void command(char c)
{
 282:	df 93       	push	r29
 284:	cf 93       	push	r28
 286:	0f 92       	push	r0
 288:	cd b7       	in	r28, 0x3d	; 61
 28a:	de b7       	in	r29, 0x3e	; 62
 28c:	89 83       	std	Y+1, r24	; 0x01
	PORTC=c;
 28e:	85 e3       	ldi	r24, 0x35	; 53
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	29 81       	ldd	r18, Y+1	; 0x01
 294:	fc 01       	movw	r30, r24
 296:	20 83       	st	Z, r18
	PORTD&=~(1<<6);
 298:	82 e3       	ldi	r24, 0x32	; 50
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	22 e3       	ldi	r18, 0x32	; 50
 29e:	30 e0       	ldi	r19, 0x00	; 0
 2a0:	f9 01       	movw	r30, r18
 2a2:	20 81       	ld	r18, Z
 2a4:	2f 7b       	andi	r18, 0xBF	; 191
 2a6:	fc 01       	movw	r30, r24
 2a8:	20 83       	st	Z, r18
	PORTD|=(1<<7);
 2aa:	82 e3       	ldi	r24, 0x32	; 50
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	22 e3       	ldi	r18, 0x32	; 50
 2b0:	30 e0       	ldi	r19, 0x00	; 0
 2b2:	f9 01       	movw	r30, r18
 2b4:	20 81       	ld	r18, Z
 2b6:	20 68       	ori	r18, 0x80	; 128
 2b8:	fc 01       	movw	r30, r24
 2ba:	20 83       	st	Z, r18
	delay(2);
 2bc:	82 e0       	ldi	r24, 0x02	; 2
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	0e 94 12 01 	call	0x224	; 0x224 <delay>
	PORTD&=~(1<<7);
 2c4:	82 e3       	ldi	r24, 0x32	; 50
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	22 e3       	ldi	r18, 0x32	; 50
 2ca:	30 e0       	ldi	r19, 0x00	; 0
 2cc:	f9 01       	movw	r30, r18
 2ce:	20 81       	ld	r18, Z
 2d0:	2f 77       	andi	r18, 0x7F	; 127
 2d2:	fc 01       	movw	r30, r24
 2d4:	20 83       	st	Z, r18
}
 2d6:	0f 90       	pop	r0
 2d8:	cf 91       	pop	r28
 2da:	df 91       	pop	r29
 2dc:	08 95       	ret

000002de <data>:
void data(char d)
{
 2de:	df 93       	push	r29
 2e0:	cf 93       	push	r28
 2e2:	0f 92       	push	r0
 2e4:	cd b7       	in	r28, 0x3d	; 61
 2e6:	de b7       	in	r29, 0x3e	; 62
 2e8:	89 83       	std	Y+1, r24	; 0x01
	PORTC=d;
 2ea:	85 e3       	ldi	r24, 0x35	; 53
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	29 81       	ldd	r18, Y+1	; 0x01
 2f0:	fc 01       	movw	r30, r24
 2f2:	20 83       	st	Z, r18
	PORTD|=(1<<6);
 2f4:	82 e3       	ldi	r24, 0x32	; 50
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	22 e3       	ldi	r18, 0x32	; 50
 2fa:	30 e0       	ldi	r19, 0x00	; 0
 2fc:	f9 01       	movw	r30, r18
 2fe:	20 81       	ld	r18, Z
 300:	20 64       	ori	r18, 0x40	; 64
 302:	fc 01       	movw	r30, r24
 304:	20 83       	st	Z, r18
	PORTD|=(1<<7);
 306:	82 e3       	ldi	r24, 0x32	; 50
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	22 e3       	ldi	r18, 0x32	; 50
 30c:	30 e0       	ldi	r19, 0x00	; 0
 30e:	f9 01       	movw	r30, r18
 310:	20 81       	ld	r18, Z
 312:	20 68       	ori	r18, 0x80	; 128
 314:	fc 01       	movw	r30, r24
 316:	20 83       	st	Z, r18
	delay(2);
 318:	82 e0       	ldi	r24, 0x02	; 2
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	0e 94 12 01 	call	0x224	; 0x224 <delay>
	PORTD&=~(1<<7);
 320:	82 e3       	ldi	r24, 0x32	; 50
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	22 e3       	ldi	r18, 0x32	; 50
 326:	30 e0       	ldi	r19, 0x00	; 0
 328:	f9 01       	movw	r30, r18
 32a:	20 81       	ld	r18, Z
 32c:	2f 77       	andi	r18, 0x7F	; 127
 32e:	fc 01       	movw	r30, r24
 330:	20 83       	st	Z, r18
}
 332:	0f 90       	pop	r0
 334:	cf 91       	pop	r28
 336:	df 91       	pop	r29
 338:	08 95       	ret

0000033a <display>:
void display(const char *s)
{
 33a:	df 93       	push	r29
 33c:	cf 93       	push	r28
 33e:	00 d0       	rcall	.+0      	; 0x340 <display+0x6>
 340:	cd b7       	in	r28, 0x3d	; 61
 342:	de b7       	in	r29, 0x3e	; 62
 344:	9a 83       	std	Y+2, r25	; 0x02
 346:	89 83       	std	Y+1, r24	; 0x01
	while(*s)
 348:	10 c0       	rjmp	.+32     	; 0x36a <display+0x30>
	{
		data(*s++);
 34a:	89 81       	ldd	r24, Y+1	; 0x01
 34c:	9a 81       	ldd	r25, Y+2	; 0x02
 34e:	fc 01       	movw	r30, r24
 350:	20 81       	ld	r18, Z
 352:	89 81       	ldd	r24, Y+1	; 0x01
 354:	9a 81       	ldd	r25, Y+2	; 0x02
 356:	01 96       	adiw	r24, 0x01	; 1
 358:	9a 83       	std	Y+2, r25	; 0x02
 35a:	89 83       	std	Y+1, r24	; 0x01
 35c:	82 2f       	mov	r24, r18
 35e:	0e 94 6f 01 	call	0x2de	; 0x2de <data>
		delay(2);
 362:	82 e0       	ldi	r24, 0x02	; 2
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	0e 94 12 01 	call	0x224	; 0x224 <delay>
	delay(2);
	PORTD&=~(1<<7);
}
void display(const char *s)
{
	while(*s)
 36a:	89 81       	ldd	r24, Y+1	; 0x01
 36c:	9a 81       	ldd	r25, Y+2	; 0x02
 36e:	fc 01       	movw	r30, r24
 370:	80 81       	ld	r24, Z
 372:	88 23       	and	r24, r24
 374:	51 f7       	brne	.-44     	; 0x34a <display+0x10>
	{
		data(*s++);
		delay(2);
	}
 376:	0f 90       	pop	r0
 378:	0f 90       	pop	r0
 37a:	cf 91       	pop	r28
 37c:	df 91       	pop	r29
 37e:	08 95       	ret

00000380 <_exit>:
 380:	f8 94       	cli

00000382 <__stop_program>:
 382:	ff cf       	rjmp	.-2      	; 0x382 <__stop_program>
