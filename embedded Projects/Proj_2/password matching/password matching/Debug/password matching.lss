
password matching.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004c0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003e  00800060  000004c0  00000534  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00000750  00000000  00000000  00000574  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000000e7  00000000  00000000  00000cc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000020  00000000  00000000  00000dab  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000050  00000000  00000000  00000dcb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000021b  00000000  00000000  00000e1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000dd  00000000  00000000  00001036  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004a4  00000000  00000000  00001113  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000070  00000000  00000000  000015b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000000c0  00000000  00000000  00001628  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubtypes 0000001e  00000000  00000000  000016e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ec       	ldi	r30, 0xC0	; 192
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 39       	cpi	r26, 0x9E	; 158
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 5e 02 	jmp	0x4bc	; 0x4bc <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
void command(char c);
void data(char d);
void display(const char *s);
char kepad();
int main(void)
{
  82:	df 93       	push	r29
  84:	cf 93       	push	r28
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	2c 97       	sbiw	r28, 0x0c	; 12
  8c:	0f b6       	in	r0, 0x3f	; 63
  8e:	f8 94       	cli
  90:	de bf       	out	0x3e, r29	; 62
  92:	0f be       	out	0x3f, r0	; 63
  94:	cd bf       	out	0x3d, r28	; 61
	DDRA=0xf0;
  96:	8a e3       	ldi	r24, 0x3A	; 58
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	20 ef       	ldi	r18, 0xF0	; 240
  9c:	fc 01       	movw	r30, r24
  9e:	20 83       	st	Z, r18
	DDRB=0x00;
  a0:	87 e3       	ldi	r24, 0x37	; 55
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	fc 01       	movw	r30, r24
  a6:	10 82       	st	Z, r1
	DDRC=0xff;
  a8:	84 e3       	ldi	r24, 0x34	; 52
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	2f ef       	ldi	r18, 0xFF	; 255
  ae:	fc 01       	movw	r30, r24
  b0:	20 83       	st	Z, r18
	DDRD=0xff;
  b2:	81 e3       	ldi	r24, 0x31	; 49
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	2f ef       	ldi	r18, 0xFF	; 255
  b8:	fc 01       	movw	r30, r24
  ba:	20 83       	st	Z, r18
	PORTB=0xff;
  bc:	88 e3       	ldi	r24, 0x38	; 56
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	2f ef       	ldi	r18, 0xFF	; 255
  c2:	fc 01       	movw	r30, r24
  c4:	20 83       	st	Z, r18
	command(0x38);
  c6:	88 e3       	ldi	r24, 0x38	; 56
  c8:	0e 94 d6 01 	call	0x3ac	; 0x3ac <command>
	command(0x80);
  cc:	80 e8       	ldi	r24, 0x80	; 128
  ce:	0e 94 d6 01 	call	0x3ac	; 0x3ac <command>
	command(0x0c);
  d2:	8c e0       	ldi	r24, 0x0C	; 12
  d4:	0e 94 d6 01 	call	0x3ac	; 0x3ac <command>
	command(0x06);
  d8:	86 e0       	ldi	r24, 0x06	; 6
  da:	0e 94 d6 01 	call	0x3ac	; 0x3ac <command>
	command(0x01);
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	0e 94 d6 01 	call	0x3ac	; 0x3ac <command>
  e4:	01 c0       	rjmp	.+2      	; 0xe8 <main+0x66>
		{
			command(0x80);
			display("password mismatched");
		}
		
	}
  e6:	00 00       	nop
	char k[4];	
    while(1)
    {
		int i,c;
		char b[4];
		command(0x80);
  e8:	80 e8       	ldi	r24, 0x80	; 128
  ea:	0e 94 d6 01 	call	0x3ac	; 0x3ac <command>
		display("enter the password");
  ee:	80 e6       	ldi	r24, 0x60	; 96
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	0e 94 32 02 	call	0x464	; 0x464 <display>
		command(0xc0);
  f6:	80 ec       	ldi	r24, 0xC0	; 192
  f8:	0e 94 d6 01 	call	0x3ac	; 0x3ac <command>
		for (i=0;i<=3;i++)
  fc:	1a 82       	std	Y+2, r1	; 0x02
  fe:	19 82       	std	Y+1, r1	; 0x01
 100:	20 c0       	rjmp	.+64     	; 0x142 <main+0xc0>
		{
			k[i]=kepad();
 102:	0e 94 cd 00 	call	0x19a	; 0x19a <kepad>
 106:	48 2f       	mov	r20, r24
 108:	9e 01       	movw	r18, r28
 10a:	2b 5f       	subi	r18, 0xFB	; 251
 10c:	3f 4f       	sbci	r19, 0xFF	; 255
 10e:	89 81       	ldd	r24, Y+1	; 0x01
 110:	9a 81       	ldd	r25, Y+2	; 0x02
 112:	82 0f       	add	r24, r18
 114:	93 1f       	adc	r25, r19
 116:	fc 01       	movw	r30, r24
 118:	40 83       	st	Z, r20
			data(k[i]);
 11a:	9e 01       	movw	r18, r28
 11c:	2b 5f       	subi	r18, 0xFB	; 251
 11e:	3f 4f       	sbci	r19, 0xFF	; 255
 120:	89 81       	ldd	r24, Y+1	; 0x01
 122:	9a 81       	ldd	r25, Y+2	; 0x02
 124:	82 0f       	add	r24, r18
 126:	93 1f       	adc	r25, r19
 128:	fc 01       	movw	r30, r24
 12a:	80 81       	ld	r24, Z
 12c:	0e 94 04 02 	call	0x408	; 0x408 <data>
			delay(10);
 130:	8a e0       	ldi	r24, 0x0A	; 10
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	0e 94 a7 01 	call	0x34e	; 0x34e <delay>
		int i,c;
		char b[4];
		command(0x80);
		display("enter the password");
		command(0xc0);
		for (i=0;i<=3;i++)
 138:	89 81       	ldd	r24, Y+1	; 0x01
 13a:	9a 81       	ldd	r25, Y+2	; 0x02
 13c:	01 96       	adiw	r24, 0x01	; 1
 13e:	9a 83       	std	Y+2, r25	; 0x02
 140:	89 83       	std	Y+1, r24	; 0x01
 142:	89 81       	ldd	r24, Y+1	; 0x01
 144:	9a 81       	ldd	r25, Y+2	; 0x02
 146:	84 30       	cpi	r24, 0x04	; 4
 148:	91 05       	cpc	r25, r1
 14a:	dc f2       	brlt	.-74     	; 0x102 <main+0x80>
		{
			k[i]=kepad();
			data(k[i]);
			delay(10);
		}
		k[i]='\0';
 14c:	9e 01       	movw	r18, r28
 14e:	2b 5f       	subi	r18, 0xFB	; 251
 150:	3f 4f       	sbci	r19, 0xFF	; 255
 152:	89 81       	ldd	r24, Y+1	; 0x01
 154:	9a 81       	ldd	r25, Y+2	; 0x02
 156:	82 0f       	add	r24, r18
 158:	93 1f       	adc	r25, r19
 15a:	fc 01       	movw	r30, r24
 15c:	10 82       	st	Z, r1
		//char b[4]={k1,k2,k3,k4};
	    // c=strcmp(k,"9697");
		
		if (strcmp(k,"9697")==0)
 15e:	ce 01       	movw	r24, r28
 160:	05 96       	adiw	r24, 0x05	; 5
 162:	23 e7       	ldi	r18, 0x73	; 115
 164:	30 e0       	ldi	r19, 0x00	; 0
 166:	b9 01       	movw	r22, r18
 168:	0e 94 55 02 	call	0x4aa	; 0x4aa <strcmp>
 16c:	00 97       	sbiw	r24, 0x00	; 0
 16e:	39 f4       	brne	.+14     	; 0x17e <main+0xfc>
		{
			command(0x80);
 170:	80 e8       	ldi	r24, 0x80	; 128
 172:	0e 94 d6 01 	call	0x3ac	; 0x3ac <command>
			display("password matched");
 176:	88 e7       	ldi	r24, 0x78	; 120
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	0e 94 32 02 	call	0x464	; 0x464 <display>
		}
		if(c==1)
 17e:	8b 81       	ldd	r24, Y+3	; 0x03
 180:	9c 81       	ldd	r25, Y+4	; 0x04
 182:	81 30       	cpi	r24, 0x01	; 1
 184:	91 05       	cpc	r25, r1
 186:	09 f0       	breq	.+2      	; 0x18a <main+0x108>
 188:	ae cf       	rjmp	.-164    	; 0xe6 <main+0x64>
		{
			command(0x80);
 18a:	80 e8       	ldi	r24, 0x80	; 128
 18c:	0e 94 d6 01 	call	0x3ac	; 0x3ac <command>
			display("password mismatched");
 190:	89 e8       	ldi	r24, 0x89	; 137
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	0e 94 32 02 	call	0x464	; 0x464 <display>
		}
		
	}
 198:	a7 cf       	rjmp	.-178    	; 0xe8 <main+0x66>

0000019a <kepad>:
}	
char kepad()
{
 19a:	df 93       	push	r29
 19c:	cf 93       	push	r28
 19e:	cd b7       	in	r28, 0x3d	; 61
 1a0:	de b7       	in	r29, 0x3e	; 62
 1a2:	27 97       	sbiw	r28, 0x07	; 7
 1a4:	0f b6       	in	r0, 0x3f	; 63
 1a6:	f8 94       	cli
 1a8:	de bf       	out	0x3e, r29	; 62
 1aa:	0f be       	out	0x3f, r0	; 63
 1ac:	cd bf       	out	0x3d, r28	; 61
	delay(2);
 1ae:	82 e0       	ldi	r24, 0x02	; 2
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	0e 94 a7 01 	call	0x34e	; 0x34e <delay>
	int t=0;
 1b6:	1a 82       	std	Y+2, r1	; 0x02
 1b8:	19 82       	std	Y+1, r1	; 0x01
 1ba:	01 c0       	rjmp	.+2      	; 0x1be <kepad+0x24>
		}
		if (t==1)
		{
			return(s);
		}
	}		
 1bc:	00 00       	nop
	delay(2);
	int t=0;
	char s;
	while (1)
	{
	    PORTA=0x7f;
 1be:	8b e3       	ldi	r24, 0x3B	; 59
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	2f e7       	ldi	r18, 0x7F	; 127
 1c4:	fc 01       	movw	r30, r24
 1c6:	20 83       	st	Z, r18
		char i=PINA;
 1c8:	89 e3       	ldi	r24, 0x39	; 57
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	fc 01       	movw	r30, r24
 1ce:	80 81       	ld	r24, Z
 1d0:	8c 83       	std	Y+4, r24	; 0x04
		i=i&0xff;
		if(i==0x7e)
 1d2:	8c 81       	ldd	r24, Y+4	; 0x04
 1d4:	8e 37       	cpi	r24, 0x7E	; 126
 1d6:	31 f4       	brne	.+12     	; 0x1e4 <kepad+0x4a>
		{
			s='7';
 1d8:	87 e3       	ldi	r24, 0x37	; 55
 1da:	8b 83       	std	Y+3, r24	; 0x03
			t=1;
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	9a 83       	std	Y+2, r25	; 0x02
 1e2:	89 83       	std	Y+1, r24	; 0x01
		}
			if(i==0x7d)
 1e4:	8c 81       	ldd	r24, Y+4	; 0x04
 1e6:	8d 37       	cpi	r24, 0x7D	; 125
 1e8:	31 f4       	brne	.+12     	; 0x1f6 <kepad+0x5c>
		{
			s='4';
 1ea:	84 e3       	ldi	r24, 0x34	; 52
 1ec:	8b 83       	std	Y+3, r24	; 0x03
			t=1;
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	9a 83       	std	Y+2, r25	; 0x02
 1f4:	89 83       	std	Y+1, r24	; 0x01
		}
			if(i==0x7b)
 1f6:	8c 81       	ldd	r24, Y+4	; 0x04
 1f8:	8b 37       	cpi	r24, 0x7B	; 123
 1fa:	31 f4       	brne	.+12     	; 0x208 <kepad+0x6e>
		{
			s='1';
 1fc:	81 e3       	ldi	r24, 0x31	; 49
 1fe:	8b 83       	std	Y+3, r24	; 0x03
			t=1;
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	9a 83       	std	Y+2, r25	; 0x02
 206:	89 83       	std	Y+1, r24	; 0x01
		}
			if(i==0x77)
 208:	8c 81       	ldd	r24, Y+4	; 0x04
 20a:	87 37       	cpi	r24, 0x77	; 119
 20c:	31 f4       	brne	.+12     	; 0x21a <kepad+0x80>
		{
			s='c';
 20e:	83 e6       	ldi	r24, 0x63	; 99
 210:	8b 83       	std	Y+3, r24	; 0x03
			t=1;
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	9a 83       	std	Y+2, r25	; 0x02
 218:	89 83       	std	Y+1, r24	; 0x01
		}
			
        PORTA=0xbf;
 21a:	8b e3       	ldi	r24, 0x3B	; 59
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	2f eb       	ldi	r18, 0xBF	; 191
 220:	fc 01       	movw	r30, r24
 222:	20 83       	st	Z, r18
		char j=PINA;
 224:	89 e3       	ldi	r24, 0x39	; 57
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	fc 01       	movw	r30, r24
 22a:	80 81       	ld	r24, Z
 22c:	8d 83       	std	Y+5, r24	; 0x05
		j=j&0xff;
		if (j==0xbe)
 22e:	8d 81       	ldd	r24, Y+5	; 0x05
 230:	8e 3b       	cpi	r24, 0xBE	; 190
 232:	31 f4       	brne	.+12     	; 0x240 <kepad+0xa6>
		{
			s='8';
 234:	88 e3       	ldi	r24, 0x38	; 56
 236:	8b 83       	std	Y+3, r24	; 0x03
			t=1;
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	9a 83       	std	Y+2, r25	; 0x02
 23e:	89 83       	std	Y+1, r24	; 0x01
		}
		if (j==0xbd)
 240:	8d 81       	ldd	r24, Y+5	; 0x05
 242:	8d 3b       	cpi	r24, 0xBD	; 189
 244:	31 f4       	brne	.+12     	; 0x252 <kepad+0xb8>
		{
			s='5';
 246:	85 e3       	ldi	r24, 0x35	; 53
 248:	8b 83       	std	Y+3, r24	; 0x03
			t=1;
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	9a 83       	std	Y+2, r25	; 0x02
 250:	89 83       	std	Y+1, r24	; 0x01
		}
		if(j==0xbb)
 252:	8d 81       	ldd	r24, Y+5	; 0x05
 254:	8b 3b       	cpi	r24, 0xBB	; 187
 256:	31 f4       	brne	.+12     	; 0x264 <kepad+0xca>
		{
			s='2';
 258:	82 e3       	ldi	r24, 0x32	; 50
 25a:	8b 83       	std	Y+3, r24	; 0x03
			t=1;
 25c:	81 e0       	ldi	r24, 0x01	; 1
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	9a 83       	std	Y+2, r25	; 0x02
 262:	89 83       	std	Y+1, r24	; 0x01
		}
		if (j==0xb7)
 264:	8d 81       	ldd	r24, Y+5	; 0x05
 266:	87 3b       	cpi	r24, 0xB7	; 183
 268:	31 f4       	brne	.+12     	; 0x276 <kepad+0xdc>
		{
			s='0';
 26a:	80 e3       	ldi	r24, 0x30	; 48
 26c:	8b 83       	std	Y+3, r24	; 0x03
			t=1;
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	9a 83       	std	Y+2, r25	; 0x02
 274:	89 83       	std	Y+1, r24	; 0x01
		}
		
        PORTA=0xef;
 276:	8b e3       	ldi	r24, 0x3B	; 59
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	2f ee       	ldi	r18, 0xEF	; 239
 27c:	fc 01       	movw	r30, r24
 27e:	20 83       	st	Z, r18
		char k=PINA;
 280:	89 e3       	ldi	r24, 0x39	; 57
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	fc 01       	movw	r30, r24
 286:	80 81       	ld	r24, Z
 288:	8e 83       	std	Y+6, r24	; 0x06
		k=k&0xff;
		if (k==0xee)
 28a:	8e 81       	ldd	r24, Y+6	; 0x06
 28c:	8e 3e       	cpi	r24, 0xEE	; 238
 28e:	31 f4       	brne	.+12     	; 0x29c <kepad+0x102>
		{
			s='9';
 290:	89 e3       	ldi	r24, 0x39	; 57
 292:	8b 83       	std	Y+3, r24	; 0x03
			t=1;
 294:	81 e0       	ldi	r24, 0x01	; 1
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	9a 83       	std	Y+2, r25	; 0x02
 29a:	89 83       	std	Y+1, r24	; 0x01
		}
		if (k==0xed)
 29c:	8e 81       	ldd	r24, Y+6	; 0x06
 29e:	8d 3e       	cpi	r24, 0xED	; 237
 2a0:	31 f4       	brne	.+12     	; 0x2ae <kepad+0x114>
		{
			s='6';
 2a2:	86 e3       	ldi	r24, 0x36	; 54
 2a4:	8b 83       	std	Y+3, r24	; 0x03
			t=1;
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	9a 83       	std	Y+2, r25	; 0x02
 2ac:	89 83       	std	Y+1, r24	; 0x01
		}
		if (k==0xeb)
 2ae:	8e 81       	ldd	r24, Y+6	; 0x06
 2b0:	8b 3e       	cpi	r24, 0xEB	; 235
 2b2:	31 f4       	brne	.+12     	; 0x2c0 <kepad+0x126>
		{
			s='3';
 2b4:	83 e3       	ldi	r24, 0x33	; 51
 2b6:	8b 83       	std	Y+3, r24	; 0x03
			t=1;
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	9a 83       	std	Y+2, r25	; 0x02
 2be:	89 83       	std	Y+1, r24	; 0x01
		}
		if (k==0xe7)
 2c0:	8e 81       	ldd	r24, Y+6	; 0x06
 2c2:	87 3e       	cpi	r24, 0xE7	; 231
 2c4:	31 f4       	brne	.+12     	; 0x2d2 <kepad+0x138>
		{
			s='=';
 2c6:	8d e3       	ldi	r24, 0x3D	; 61
 2c8:	8b 83       	std	Y+3, r24	; 0x03
			t=1;
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	9a 83       	std	Y+2, r25	; 0x02
 2d0:	89 83       	std	Y+1, r24	; 0x01
		}

		PORTA=0xdf;
 2d2:	8b e3       	ldi	r24, 0x3B	; 59
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	2f ed       	ldi	r18, 0xDF	; 223
 2d8:	fc 01       	movw	r30, r24
 2da:	20 83       	st	Z, r18
		char l=PINA;
 2dc:	89 e3       	ldi	r24, 0x39	; 57
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	fc 01       	movw	r30, r24
 2e2:	80 81       	ld	r24, Z
 2e4:	8f 83       	std	Y+7, r24	; 0x07
		l=l&0xff;
		if (l==0xde)
 2e6:	8f 81       	ldd	r24, Y+7	; 0x07
 2e8:	8e 3d       	cpi	r24, 0xDE	; 222
 2ea:	31 f4       	brne	.+12     	; 0x2f8 <kepad+0x15e>
		{
			s='/';
 2ec:	8f e2       	ldi	r24, 0x2F	; 47
 2ee:	8b 83       	std	Y+3, r24	; 0x03
			t=1;
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	9a 83       	std	Y+2, r25	; 0x02
 2f6:	89 83       	std	Y+1, r24	; 0x01
		}
		if (l==0xdd)
 2f8:	8f 81       	ldd	r24, Y+7	; 0x07
 2fa:	8d 3d       	cpi	r24, 0xDD	; 221
 2fc:	31 f4       	brne	.+12     	; 0x30a <kepad+0x170>
		{
			s='*';
 2fe:	8a e2       	ldi	r24, 0x2A	; 42
 300:	8b 83       	std	Y+3, r24	; 0x03
			t=1;
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	9a 83       	std	Y+2, r25	; 0x02
 308:	89 83       	std	Y+1, r24	; 0x01
		}
		if (l==0xdb)
 30a:	8f 81       	ldd	r24, Y+7	; 0x07
 30c:	8b 3d       	cpi	r24, 0xDB	; 219
 30e:	31 f4       	brne	.+12     	; 0x31c <kepad+0x182>
		{
			s='-';
 310:	8d e2       	ldi	r24, 0x2D	; 45
 312:	8b 83       	std	Y+3, r24	; 0x03
			t=1;
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	9a 83       	std	Y+2, r25	; 0x02
 31a:	89 83       	std	Y+1, r24	; 0x01
		}
		if (l==0xd7)
 31c:	8f 81       	ldd	r24, Y+7	; 0x07
 31e:	87 3d       	cpi	r24, 0xD7	; 215
 320:	31 f4       	brne	.+12     	; 0x32e <kepad+0x194>
		{
			s='+';
 322:	8b e2       	ldi	r24, 0x2B	; 43
 324:	8b 83       	std	Y+3, r24	; 0x03
			t=1;
 326:	81 e0       	ldi	r24, 0x01	; 1
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	9a 83       	std	Y+2, r25	; 0x02
 32c:	89 83       	std	Y+1, r24	; 0x01
		}
		if (t==1)
 32e:	89 81       	ldd	r24, Y+1	; 0x01
 330:	9a 81       	ldd	r25, Y+2	; 0x02
 332:	81 30       	cpi	r24, 0x01	; 1
 334:	91 05       	cpc	r25, r1
 336:	09 f0       	breq	.+2      	; 0x33a <kepad+0x1a0>
 338:	41 cf       	rjmp	.-382    	; 0x1bc <kepad+0x22>
		{
			return(s);
 33a:	8b 81       	ldd	r24, Y+3	; 0x03
		}
	}		
					
	
}
 33c:	27 96       	adiw	r28, 0x07	; 7
 33e:	0f b6       	in	r0, 0x3f	; 63
 340:	f8 94       	cli
 342:	de bf       	out	0x3e, r29	; 62
 344:	0f be       	out	0x3f, r0	; 63
 346:	cd bf       	out	0x3d, r28	; 61
 348:	cf 91       	pop	r28
 34a:	df 91       	pop	r29
 34c:	08 95       	ret

0000034e <delay>:
void delay(int x)
{
 34e:	df 93       	push	r29
 350:	cf 93       	push	r28
 352:	00 d0       	rcall	.+0      	; 0x354 <delay+0x6>
 354:	00 d0       	rcall	.+0      	; 0x356 <delay+0x8>
 356:	00 d0       	rcall	.+0      	; 0x358 <delay+0xa>
 358:	cd b7       	in	r28, 0x3d	; 61
 35a:	de b7       	in	r29, 0x3e	; 62
 35c:	9e 83       	std	Y+6, r25	; 0x06
 35e:	8d 83       	std	Y+5, r24	; 0x05
	int i,j;
	for (i=0;i<=x;i++)
 360:	1a 82       	std	Y+2, r1	; 0x02
 362:	19 82       	std	Y+1, r1	; 0x01
 364:	13 c0       	rjmp	.+38     	; 0x38c <delay+0x3e>
	for(j=0;j<=1000;j++);
 366:	1c 82       	std	Y+4, r1	; 0x04
 368:	1b 82       	std	Y+3, r1	; 0x03
 36a:	05 c0       	rjmp	.+10     	; 0x376 <delay+0x28>
 36c:	8b 81       	ldd	r24, Y+3	; 0x03
 36e:	9c 81       	ldd	r25, Y+4	; 0x04
 370:	01 96       	adiw	r24, 0x01	; 1
 372:	9c 83       	std	Y+4, r25	; 0x04
 374:	8b 83       	std	Y+3, r24	; 0x03
 376:	8b 81       	ldd	r24, Y+3	; 0x03
 378:	9c 81       	ldd	r25, Y+4	; 0x04
 37a:	23 e0       	ldi	r18, 0x03	; 3
 37c:	89 3e       	cpi	r24, 0xE9	; 233
 37e:	92 07       	cpc	r25, r18
 380:	ac f3       	brlt	.-22     	; 0x36c <delay+0x1e>
	
}
void delay(int x)
{
	int i,j;
	for (i=0;i<=x;i++)
 382:	89 81       	ldd	r24, Y+1	; 0x01
 384:	9a 81       	ldd	r25, Y+2	; 0x02
 386:	01 96       	adiw	r24, 0x01	; 1
 388:	9a 83       	std	Y+2, r25	; 0x02
 38a:	89 83       	std	Y+1, r24	; 0x01
 38c:	29 81       	ldd	r18, Y+1	; 0x01
 38e:	3a 81       	ldd	r19, Y+2	; 0x02
 390:	8d 81       	ldd	r24, Y+5	; 0x05
 392:	9e 81       	ldd	r25, Y+6	; 0x06
 394:	82 17       	cp	r24, r18
 396:	93 07       	cpc	r25, r19
 398:	34 f7       	brge	.-52     	; 0x366 <delay+0x18>
	for(j=0;j<=1000;j++);
	
}
 39a:	26 96       	adiw	r28, 0x06	; 6
 39c:	0f b6       	in	r0, 0x3f	; 63
 39e:	f8 94       	cli
 3a0:	de bf       	out	0x3e, r29	; 62
 3a2:	0f be       	out	0x3f, r0	; 63
 3a4:	cd bf       	out	0x3d, r28	; 61
 3a6:	cf 91       	pop	r28
 3a8:	df 91       	pop	r29
 3aa:	08 95       	ret

000003ac <command>:
void command(char c)
{
 3ac:	df 93       	push	r29
 3ae:	cf 93       	push	r28
 3b0:	0f 92       	push	r0
 3b2:	cd b7       	in	r28, 0x3d	; 61
 3b4:	de b7       	in	r29, 0x3e	; 62
 3b6:	89 83       	std	Y+1, r24	; 0x01
	PORTC=c;
 3b8:	85 e3       	ldi	r24, 0x35	; 53
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	29 81       	ldd	r18, Y+1	; 0x01
 3be:	fc 01       	movw	r30, r24
 3c0:	20 83       	st	Z, r18
	PORTD&=~(1<<6);
 3c2:	82 e3       	ldi	r24, 0x32	; 50
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	22 e3       	ldi	r18, 0x32	; 50
 3c8:	30 e0       	ldi	r19, 0x00	; 0
 3ca:	f9 01       	movw	r30, r18
 3cc:	20 81       	ld	r18, Z
 3ce:	2f 7b       	andi	r18, 0xBF	; 191
 3d0:	fc 01       	movw	r30, r24
 3d2:	20 83       	st	Z, r18
	PORTD|=(1<<7);
 3d4:	82 e3       	ldi	r24, 0x32	; 50
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	22 e3       	ldi	r18, 0x32	; 50
 3da:	30 e0       	ldi	r19, 0x00	; 0
 3dc:	f9 01       	movw	r30, r18
 3de:	20 81       	ld	r18, Z
 3e0:	20 68       	ori	r18, 0x80	; 128
 3e2:	fc 01       	movw	r30, r24
 3e4:	20 83       	st	Z, r18
	delay(2);
 3e6:	82 e0       	ldi	r24, 0x02	; 2
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	0e 94 a7 01 	call	0x34e	; 0x34e <delay>
	PORTD&=~(1<<7);
 3ee:	82 e3       	ldi	r24, 0x32	; 50
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	22 e3       	ldi	r18, 0x32	; 50
 3f4:	30 e0       	ldi	r19, 0x00	; 0
 3f6:	f9 01       	movw	r30, r18
 3f8:	20 81       	ld	r18, Z
 3fa:	2f 77       	andi	r18, 0x7F	; 127
 3fc:	fc 01       	movw	r30, r24
 3fe:	20 83       	st	Z, r18
}
 400:	0f 90       	pop	r0
 402:	cf 91       	pop	r28
 404:	df 91       	pop	r29
 406:	08 95       	ret

00000408 <data>:
void data(char d)
{
 408:	df 93       	push	r29
 40a:	cf 93       	push	r28
 40c:	0f 92       	push	r0
 40e:	cd b7       	in	r28, 0x3d	; 61
 410:	de b7       	in	r29, 0x3e	; 62
 412:	89 83       	std	Y+1, r24	; 0x01
	PORTC=d;
 414:	85 e3       	ldi	r24, 0x35	; 53
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	29 81       	ldd	r18, Y+1	; 0x01
 41a:	fc 01       	movw	r30, r24
 41c:	20 83       	st	Z, r18
	PORTD|=(1<<6);
 41e:	82 e3       	ldi	r24, 0x32	; 50
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	22 e3       	ldi	r18, 0x32	; 50
 424:	30 e0       	ldi	r19, 0x00	; 0
 426:	f9 01       	movw	r30, r18
 428:	20 81       	ld	r18, Z
 42a:	20 64       	ori	r18, 0x40	; 64
 42c:	fc 01       	movw	r30, r24
 42e:	20 83       	st	Z, r18
	PORTD|=(1<<7);
 430:	82 e3       	ldi	r24, 0x32	; 50
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	22 e3       	ldi	r18, 0x32	; 50
 436:	30 e0       	ldi	r19, 0x00	; 0
 438:	f9 01       	movw	r30, r18
 43a:	20 81       	ld	r18, Z
 43c:	20 68       	ori	r18, 0x80	; 128
 43e:	fc 01       	movw	r30, r24
 440:	20 83       	st	Z, r18
	delay(2);
 442:	82 e0       	ldi	r24, 0x02	; 2
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	0e 94 a7 01 	call	0x34e	; 0x34e <delay>
	PORTD&=~(1<<7);
 44a:	82 e3       	ldi	r24, 0x32	; 50
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	22 e3       	ldi	r18, 0x32	; 50
 450:	30 e0       	ldi	r19, 0x00	; 0
 452:	f9 01       	movw	r30, r18
 454:	20 81       	ld	r18, Z
 456:	2f 77       	andi	r18, 0x7F	; 127
 458:	fc 01       	movw	r30, r24
 45a:	20 83       	st	Z, r18
}
 45c:	0f 90       	pop	r0
 45e:	cf 91       	pop	r28
 460:	df 91       	pop	r29
 462:	08 95       	ret

00000464 <display>:
void display(const char *s)
{
 464:	df 93       	push	r29
 466:	cf 93       	push	r28
 468:	00 d0       	rcall	.+0      	; 0x46a <display+0x6>
 46a:	cd b7       	in	r28, 0x3d	; 61
 46c:	de b7       	in	r29, 0x3e	; 62
 46e:	9a 83       	std	Y+2, r25	; 0x02
 470:	89 83       	std	Y+1, r24	; 0x01
	while(*s)
 472:	10 c0       	rjmp	.+32     	; 0x494 <display+0x30>
	{
		data(*s++);
 474:	89 81       	ldd	r24, Y+1	; 0x01
 476:	9a 81       	ldd	r25, Y+2	; 0x02
 478:	fc 01       	movw	r30, r24
 47a:	20 81       	ld	r18, Z
 47c:	89 81       	ldd	r24, Y+1	; 0x01
 47e:	9a 81       	ldd	r25, Y+2	; 0x02
 480:	01 96       	adiw	r24, 0x01	; 1
 482:	9a 83       	std	Y+2, r25	; 0x02
 484:	89 83       	std	Y+1, r24	; 0x01
 486:	82 2f       	mov	r24, r18
 488:	0e 94 04 02 	call	0x408	; 0x408 <data>
		delay(2);
 48c:	82 e0       	ldi	r24, 0x02	; 2
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	0e 94 a7 01 	call	0x34e	; 0x34e <delay>
	delay(2);
	PORTD&=~(1<<7);
}
void display(const char *s)
{
	while(*s)
 494:	89 81       	ldd	r24, Y+1	; 0x01
 496:	9a 81       	ldd	r25, Y+2	; 0x02
 498:	fc 01       	movw	r30, r24
 49a:	80 81       	ld	r24, Z
 49c:	88 23       	and	r24, r24
 49e:	51 f7       	brne	.-44     	; 0x474 <display+0x10>
	{
		data(*s++);
		delay(2);
	}
 4a0:	0f 90       	pop	r0
 4a2:	0f 90       	pop	r0
 4a4:	cf 91       	pop	r28
 4a6:	df 91       	pop	r29
 4a8:	08 95       	ret

000004aa <strcmp>:
 4aa:	fb 01       	movw	r30, r22
 4ac:	dc 01       	movw	r26, r24
 4ae:	8d 91       	ld	r24, X+
 4b0:	01 90       	ld	r0, Z+
 4b2:	80 19       	sub	r24, r0
 4b4:	01 10       	cpse	r0, r1
 4b6:	d9 f3       	breq	.-10     	; 0x4ae <strcmp+0x4>
 4b8:	99 0b       	sbc	r25, r25
 4ba:	08 95       	ret

000004bc <_exit>:
 4bc:	f8 94       	cli

000004be <__stop_program>:
 4be:	ff cf       	rjmp	.-2      	; 0x4be <__stop_program>
