
adc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000047a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  000004d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000085  00000000  00000000  00000b9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000020  00000000  00000000  00000c21  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000050  00000000  00000000  00000c41  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000202  00000000  00000000  00000c91  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000b5  00000000  00000000  00000e93  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000045e  00000000  00000000  00000f48  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000070  00000000  00000000  000013a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000008f  00000000  00000000  00001418  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubtypes 0000001e  00000000  00000000  000014a7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 3b 02 	jmp	0x476	; 0x476 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
void data(char d);
void display(const char *s);
char kepad();

int main(void)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	00 d0       	rcall	.+0      	; 0x72 <main+0x6>
  72:	00 d0       	rcall	.+0      	; 0x74 <main+0x8>
  74:	0f 92       	push	r0
  76:	cd b7       	in	r28, 0x3d	; 61
  78:	de b7       	in	r29, 0x3e	; 62
	DDRC=0xff;
  7a:	84 e3       	ldi	r24, 0x34	; 52
  7c:	90 e0       	ldi	r25, 0x00	; 0
  7e:	2f ef       	ldi	r18, 0xFF	; 255
  80:	fc 01       	movw	r30, r24
  82:	20 83       	st	Z, r18
	DDRD=0xff;
  84:	81 e3       	ldi	r24, 0x31	; 49
  86:	90 e0       	ldi	r25, 0x00	; 0
  88:	2f ef       	ldi	r18, 0xFF	; 255
  8a:	fc 01       	movw	r30, r24
  8c:	20 83       	st	Z, r18
	ADMUX=0x62;
  8e:	87 e2       	ldi	r24, 0x27	; 39
  90:	90 e0       	ldi	r25, 0x00	; 0
  92:	22 e6       	ldi	r18, 0x62	; 98
  94:	fc 01       	movw	r30, r24
  96:	20 83       	st	Z, r18
	ADCSRA=0x87;
  98:	86 e2       	ldi	r24, 0x26	; 38
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	27 e8       	ldi	r18, 0x87	; 135
  9e:	fc 01       	movw	r30, r24
  a0:	20 83       	st	Z, r18
	command(0x38);
  a2:	88 e3       	ldi	r24, 0x38	; 56
  a4:	0e 94 b0 01 	call	0x360	; 0x360 <command>
	command(0x80);
  a8:	80 e8       	ldi	r24, 0x80	; 128
  aa:	0e 94 b0 01 	call	0x360	; 0x360 <command>
	command(0x0c);
  ae:	8c e0       	ldi	r24, 0x0C	; 12
  b0:	0e 94 b0 01 	call	0x360	; 0x360 <command>
	command(0x06);
  b4:	86 e0       	ldi	r24, 0x06	; 6
  b6:	0e 94 b0 01 	call	0x360	; 0x360 <command>
	command(0x01);
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	0e 94 b0 01 	call	0x360	; 0x360 <command>
	//data('a');
    while(1)
    {
        ADCSRA|=(1<<ADSC);
  c0:	86 e2       	ldi	r24, 0x26	; 38
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	26 e2       	ldi	r18, 0x26	; 38
  c6:	30 e0       	ldi	r19, 0x00	; 0
  c8:	f9 01       	movw	r30, r18
  ca:	20 81       	ld	r18, Z
  cc:	20 64       	ori	r18, 0x40	; 64
  ce:	fc 01       	movw	r30, r24
  d0:	20 83       	st	Z, r18
		while((ADCSRA&(1<<ADIF))==0);
  d2:	00 00       	nop
  d4:	86 e2       	ldi	r24, 0x26	; 38
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	fc 01       	movw	r30, r24
  da:	80 81       	ld	r24, Z
  dc:	88 2f       	mov	r24, r24
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	80 71       	andi	r24, 0x10	; 16
  e2:	90 70       	andi	r25, 0x00	; 0
  e4:	00 97       	sbiw	r24, 0x00	; 0
  e6:	b1 f3       	breq	.-20     	; 0xd4 <main+0x68>
		char i=ADCH;
  e8:	85 e2       	ldi	r24, 0x25	; 37
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	fc 01       	movw	r30, r24
  ee:	80 81       	ld	r24, Z
  f0:	89 83       	std	Y+1, r24	; 0x01
		char b1=i%10;
  f2:	89 81       	ldd	r24, Y+1	; 0x01
  f4:	9a e0       	ldi	r25, 0x0A	; 10
  f6:	69 2f       	mov	r22, r25
  f8:	0e 94 2f 02 	call	0x45e	; 0x45e <__udivmodqi4>
  fc:	89 2f       	mov	r24, r25
  fe:	8a 83       	std	Y+2, r24	; 0x02
		char b2=i/10;
 100:	89 81       	ldd	r24, Y+1	; 0x01
 102:	9a e0       	ldi	r25, 0x0A	; 10
 104:	69 2f       	mov	r22, r25
 106:	0e 94 2f 02 	call	0x45e	; 0x45e <__udivmodqi4>
 10a:	8b 83       	std	Y+3, r24	; 0x03
		char b3=b2%10;
 10c:	8b 81       	ldd	r24, Y+3	; 0x03
 10e:	9a e0       	ldi	r25, 0x0A	; 10
 110:	69 2f       	mov	r22, r25
 112:	0e 94 2f 02 	call	0x45e	; 0x45e <__udivmodqi4>
 116:	89 2f       	mov	r24, r25
 118:	8c 83       	std	Y+4, r24	; 0x04
		char b4=b2/10;
 11a:	8b 81       	ldd	r24, Y+3	; 0x03
 11c:	9a e0       	ldi	r25, 0x0A	; 10
 11e:	69 2f       	mov	r22, r25
 120:	0e 94 2f 02 	call	0x45e	; 0x45e <__udivmodqi4>
 124:	8d 83       	std	Y+5, r24	; 0x05
		command(0x80);
 126:	80 e8       	ldi	r24, 0x80	; 128
 128:	0e 94 b0 01 	call	0x360	; 0x360 <command>
		data(b4+0x30);
 12c:	8d 81       	ldd	r24, Y+5	; 0x05
 12e:	80 5d       	subi	r24, 0xD0	; 208
 130:	0e 94 de 01 	call	0x3bc	; 0x3bc <data>
		data(b3+0x30);
 134:	8c 81       	ldd	r24, Y+4	; 0x04
 136:	80 5d       	subi	r24, 0xD0	; 208
 138:	0e 94 de 01 	call	0x3bc	; 0x3bc <data>
		data(b1+0x30);
 13c:	8a 81       	ldd	r24, Y+2	; 0x02
 13e:	80 5d       	subi	r24, 0xD0	; 208
 140:	0e 94 de 01 	call	0x3bc	; 0x3bc <data>
		delay(10);
 144:	8a e0       	ldi	r24, 0x0A	; 10
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	0e 94 81 01 	call	0x302	; 0x302 <delay>
    }
 14c:	b9 cf       	rjmp	.-142    	; 0xc0 <main+0x54>

0000014e <kepad>:
}
char kepad()
{
 14e:	df 93       	push	r29
 150:	cf 93       	push	r28
 152:	cd b7       	in	r28, 0x3d	; 61
 154:	de b7       	in	r29, 0x3e	; 62
 156:	27 97       	sbiw	r28, 0x07	; 7
 158:	0f b6       	in	r0, 0x3f	; 63
 15a:	f8 94       	cli
 15c:	de bf       	out	0x3e, r29	; 62
 15e:	0f be       	out	0x3f, r0	; 63
 160:	cd bf       	out	0x3d, r28	; 61
	delay(2);
 162:	82 e0       	ldi	r24, 0x02	; 2
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	0e 94 81 01 	call	0x302	; 0x302 <delay>
	int t=0;
 16a:	1a 82       	std	Y+2, r1	; 0x02
 16c:	19 82       	std	Y+1, r1	; 0x01
 16e:	01 c0       	rjmp	.+2      	; 0x172 <kepad+0x24>
		}
		if (t==1)
		{
			return(s);
		}
	}		
 170:	00 00       	nop
	delay(2);
	int t=0;
	char s;
	while (1)
	{
	    PORTA=0x7f;
 172:	8b e3       	ldi	r24, 0x3B	; 59
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	2f e7       	ldi	r18, 0x7F	; 127
 178:	fc 01       	movw	r30, r24
 17a:	20 83       	st	Z, r18
		char i=PINA;
 17c:	89 e3       	ldi	r24, 0x39	; 57
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	fc 01       	movw	r30, r24
 182:	80 81       	ld	r24, Z
 184:	8c 83       	std	Y+4, r24	; 0x04
		i=i&0xff;
		if(i==0x7e)
 186:	8c 81       	ldd	r24, Y+4	; 0x04
 188:	8e 37       	cpi	r24, 0x7E	; 126
 18a:	31 f4       	brne	.+12     	; 0x198 <kepad+0x4a>
		{
			s='7';
 18c:	87 e3       	ldi	r24, 0x37	; 55
 18e:	8b 83       	std	Y+3, r24	; 0x03
			t=1;
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	9a 83       	std	Y+2, r25	; 0x02
 196:	89 83       	std	Y+1, r24	; 0x01
		}
			if(i==0x7d)
 198:	8c 81       	ldd	r24, Y+4	; 0x04
 19a:	8d 37       	cpi	r24, 0x7D	; 125
 19c:	31 f4       	brne	.+12     	; 0x1aa <kepad+0x5c>
		{
			s='4';
 19e:	84 e3       	ldi	r24, 0x34	; 52
 1a0:	8b 83       	std	Y+3, r24	; 0x03
			t=1;
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	9a 83       	std	Y+2, r25	; 0x02
 1a8:	89 83       	std	Y+1, r24	; 0x01
		}
			if(i==0x7b)
 1aa:	8c 81       	ldd	r24, Y+4	; 0x04
 1ac:	8b 37       	cpi	r24, 0x7B	; 123
 1ae:	31 f4       	brne	.+12     	; 0x1bc <kepad+0x6e>
		{
			s='1';
 1b0:	81 e3       	ldi	r24, 0x31	; 49
 1b2:	8b 83       	std	Y+3, r24	; 0x03
			t=1;
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	9a 83       	std	Y+2, r25	; 0x02
 1ba:	89 83       	std	Y+1, r24	; 0x01
		}
			if(i==0x77)
 1bc:	8c 81       	ldd	r24, Y+4	; 0x04
 1be:	87 37       	cpi	r24, 0x77	; 119
 1c0:	31 f4       	brne	.+12     	; 0x1ce <kepad+0x80>
		{
			s='c';
 1c2:	83 e6       	ldi	r24, 0x63	; 99
 1c4:	8b 83       	std	Y+3, r24	; 0x03
			t=1;
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	9a 83       	std	Y+2, r25	; 0x02
 1cc:	89 83       	std	Y+1, r24	; 0x01
		}
			
        PORTA=0xbf;
 1ce:	8b e3       	ldi	r24, 0x3B	; 59
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	2f eb       	ldi	r18, 0xBF	; 191
 1d4:	fc 01       	movw	r30, r24
 1d6:	20 83       	st	Z, r18
		char j=PINA;
 1d8:	89 e3       	ldi	r24, 0x39	; 57
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	fc 01       	movw	r30, r24
 1de:	80 81       	ld	r24, Z
 1e0:	8d 83       	std	Y+5, r24	; 0x05
		j=j&0xff;
		if (j==0xbe)
 1e2:	8d 81       	ldd	r24, Y+5	; 0x05
 1e4:	8e 3b       	cpi	r24, 0xBE	; 190
 1e6:	31 f4       	brne	.+12     	; 0x1f4 <kepad+0xa6>
		{
			s='8';
 1e8:	88 e3       	ldi	r24, 0x38	; 56
 1ea:	8b 83       	std	Y+3, r24	; 0x03
			t=1;
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	9a 83       	std	Y+2, r25	; 0x02
 1f2:	89 83       	std	Y+1, r24	; 0x01
		}
		if (j==0xbd)
 1f4:	8d 81       	ldd	r24, Y+5	; 0x05
 1f6:	8d 3b       	cpi	r24, 0xBD	; 189
 1f8:	31 f4       	brne	.+12     	; 0x206 <kepad+0xb8>
		{
			s='5';
 1fa:	85 e3       	ldi	r24, 0x35	; 53
 1fc:	8b 83       	std	Y+3, r24	; 0x03
			t=1;
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	9a 83       	std	Y+2, r25	; 0x02
 204:	89 83       	std	Y+1, r24	; 0x01
		}
		if(j==0xbb)
 206:	8d 81       	ldd	r24, Y+5	; 0x05
 208:	8b 3b       	cpi	r24, 0xBB	; 187
 20a:	31 f4       	brne	.+12     	; 0x218 <kepad+0xca>
		{
			s='2';
 20c:	82 e3       	ldi	r24, 0x32	; 50
 20e:	8b 83       	std	Y+3, r24	; 0x03
			t=1;
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	9a 83       	std	Y+2, r25	; 0x02
 216:	89 83       	std	Y+1, r24	; 0x01
		}
		if (j==0xb7)
 218:	8d 81       	ldd	r24, Y+5	; 0x05
 21a:	87 3b       	cpi	r24, 0xB7	; 183
 21c:	31 f4       	brne	.+12     	; 0x22a <kepad+0xdc>
		{
			s='0';
 21e:	80 e3       	ldi	r24, 0x30	; 48
 220:	8b 83       	std	Y+3, r24	; 0x03
			t=1;
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	9a 83       	std	Y+2, r25	; 0x02
 228:	89 83       	std	Y+1, r24	; 0x01
		}
		
        PORTA=0xef;
 22a:	8b e3       	ldi	r24, 0x3B	; 59
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	2f ee       	ldi	r18, 0xEF	; 239
 230:	fc 01       	movw	r30, r24
 232:	20 83       	st	Z, r18
		char k=PINA;
 234:	89 e3       	ldi	r24, 0x39	; 57
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	fc 01       	movw	r30, r24
 23a:	80 81       	ld	r24, Z
 23c:	8e 83       	std	Y+6, r24	; 0x06
		k=k&0xff;
		if (k==0xee)
 23e:	8e 81       	ldd	r24, Y+6	; 0x06
 240:	8e 3e       	cpi	r24, 0xEE	; 238
 242:	31 f4       	brne	.+12     	; 0x250 <kepad+0x102>
		{
			s='9';
 244:	89 e3       	ldi	r24, 0x39	; 57
 246:	8b 83       	std	Y+3, r24	; 0x03
			t=1;
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	9a 83       	std	Y+2, r25	; 0x02
 24e:	89 83       	std	Y+1, r24	; 0x01
		}
		if (k==0xed)
 250:	8e 81       	ldd	r24, Y+6	; 0x06
 252:	8d 3e       	cpi	r24, 0xED	; 237
 254:	31 f4       	brne	.+12     	; 0x262 <kepad+0x114>
		{
			s='6';
 256:	86 e3       	ldi	r24, 0x36	; 54
 258:	8b 83       	std	Y+3, r24	; 0x03
			t=1;
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	9a 83       	std	Y+2, r25	; 0x02
 260:	89 83       	std	Y+1, r24	; 0x01
		}
		if (k==0xeb)
 262:	8e 81       	ldd	r24, Y+6	; 0x06
 264:	8b 3e       	cpi	r24, 0xEB	; 235
 266:	31 f4       	brne	.+12     	; 0x274 <kepad+0x126>
		{
			s='3';
 268:	83 e3       	ldi	r24, 0x33	; 51
 26a:	8b 83       	std	Y+3, r24	; 0x03
			t=1;
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	9a 83       	std	Y+2, r25	; 0x02
 272:	89 83       	std	Y+1, r24	; 0x01
		}
		if (k==0xe7)
 274:	8e 81       	ldd	r24, Y+6	; 0x06
 276:	87 3e       	cpi	r24, 0xE7	; 231
 278:	31 f4       	brne	.+12     	; 0x286 <kepad+0x138>
		{
			s='=';
 27a:	8d e3       	ldi	r24, 0x3D	; 61
 27c:	8b 83       	std	Y+3, r24	; 0x03
			t=1;
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	9a 83       	std	Y+2, r25	; 0x02
 284:	89 83       	std	Y+1, r24	; 0x01
		}

		PORTA=0xdf;
 286:	8b e3       	ldi	r24, 0x3B	; 59
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	2f ed       	ldi	r18, 0xDF	; 223
 28c:	fc 01       	movw	r30, r24
 28e:	20 83       	st	Z, r18
		char l=PINA;
 290:	89 e3       	ldi	r24, 0x39	; 57
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	fc 01       	movw	r30, r24
 296:	80 81       	ld	r24, Z
 298:	8f 83       	std	Y+7, r24	; 0x07
		l=l&0xff;
		if (l==0xde)
 29a:	8f 81       	ldd	r24, Y+7	; 0x07
 29c:	8e 3d       	cpi	r24, 0xDE	; 222
 29e:	31 f4       	brne	.+12     	; 0x2ac <kepad+0x15e>
		{
			s='/';
 2a0:	8f e2       	ldi	r24, 0x2F	; 47
 2a2:	8b 83       	std	Y+3, r24	; 0x03
			t=1;
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	9a 83       	std	Y+2, r25	; 0x02
 2aa:	89 83       	std	Y+1, r24	; 0x01
		}
		if (l==0xdd)
 2ac:	8f 81       	ldd	r24, Y+7	; 0x07
 2ae:	8d 3d       	cpi	r24, 0xDD	; 221
 2b0:	31 f4       	brne	.+12     	; 0x2be <kepad+0x170>
		{
			s='*';
 2b2:	8a e2       	ldi	r24, 0x2A	; 42
 2b4:	8b 83       	std	Y+3, r24	; 0x03
			t=1;
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	9a 83       	std	Y+2, r25	; 0x02
 2bc:	89 83       	std	Y+1, r24	; 0x01
		}
		if (l==0xdb)
 2be:	8f 81       	ldd	r24, Y+7	; 0x07
 2c0:	8b 3d       	cpi	r24, 0xDB	; 219
 2c2:	31 f4       	brne	.+12     	; 0x2d0 <kepad+0x182>
		{
			s='-';
 2c4:	8d e2       	ldi	r24, 0x2D	; 45
 2c6:	8b 83       	std	Y+3, r24	; 0x03
			t=1;
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	9a 83       	std	Y+2, r25	; 0x02
 2ce:	89 83       	std	Y+1, r24	; 0x01
		}
		if (l==0xd7)
 2d0:	8f 81       	ldd	r24, Y+7	; 0x07
 2d2:	87 3d       	cpi	r24, 0xD7	; 215
 2d4:	31 f4       	brne	.+12     	; 0x2e2 <kepad+0x194>
		{
			s='+';
 2d6:	8b e2       	ldi	r24, 0x2B	; 43
 2d8:	8b 83       	std	Y+3, r24	; 0x03
			t=1;
 2da:	81 e0       	ldi	r24, 0x01	; 1
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	9a 83       	std	Y+2, r25	; 0x02
 2e0:	89 83       	std	Y+1, r24	; 0x01
		}
		if (t==1)
 2e2:	89 81       	ldd	r24, Y+1	; 0x01
 2e4:	9a 81       	ldd	r25, Y+2	; 0x02
 2e6:	81 30       	cpi	r24, 0x01	; 1
 2e8:	91 05       	cpc	r25, r1
 2ea:	09 f0       	breq	.+2      	; 0x2ee <kepad+0x1a0>
 2ec:	41 cf       	rjmp	.-382    	; 0x170 <kepad+0x22>
		{
			return(s);
 2ee:	8b 81       	ldd	r24, Y+3	; 0x03
		}
	}		
					
	
}
 2f0:	27 96       	adiw	r28, 0x07	; 7
 2f2:	0f b6       	in	r0, 0x3f	; 63
 2f4:	f8 94       	cli
 2f6:	de bf       	out	0x3e, r29	; 62
 2f8:	0f be       	out	0x3f, r0	; 63
 2fa:	cd bf       	out	0x3d, r28	; 61
 2fc:	cf 91       	pop	r28
 2fe:	df 91       	pop	r29
 300:	08 95       	ret

00000302 <delay>:
void delay(int x)
{
 302:	df 93       	push	r29
 304:	cf 93       	push	r28
 306:	00 d0       	rcall	.+0      	; 0x308 <delay+0x6>
 308:	00 d0       	rcall	.+0      	; 0x30a <delay+0x8>
 30a:	00 d0       	rcall	.+0      	; 0x30c <delay+0xa>
 30c:	cd b7       	in	r28, 0x3d	; 61
 30e:	de b7       	in	r29, 0x3e	; 62
 310:	9e 83       	std	Y+6, r25	; 0x06
 312:	8d 83       	std	Y+5, r24	; 0x05
	int i,j;
	for (i=0;i<=x;i++)
 314:	1a 82       	std	Y+2, r1	; 0x02
 316:	19 82       	std	Y+1, r1	; 0x01
 318:	13 c0       	rjmp	.+38     	; 0x340 <delay+0x3e>
	for(j=0;j<=1000;j++);
 31a:	1c 82       	std	Y+4, r1	; 0x04
 31c:	1b 82       	std	Y+3, r1	; 0x03
 31e:	05 c0       	rjmp	.+10     	; 0x32a <delay+0x28>
 320:	8b 81       	ldd	r24, Y+3	; 0x03
 322:	9c 81       	ldd	r25, Y+4	; 0x04
 324:	01 96       	adiw	r24, 0x01	; 1
 326:	9c 83       	std	Y+4, r25	; 0x04
 328:	8b 83       	std	Y+3, r24	; 0x03
 32a:	8b 81       	ldd	r24, Y+3	; 0x03
 32c:	9c 81       	ldd	r25, Y+4	; 0x04
 32e:	23 e0       	ldi	r18, 0x03	; 3
 330:	89 3e       	cpi	r24, 0xE9	; 233
 332:	92 07       	cpc	r25, r18
 334:	ac f3       	brlt	.-22     	; 0x320 <delay+0x1e>
	
}
void delay(int x)
{
	int i,j;
	for (i=0;i<=x;i++)
 336:	89 81       	ldd	r24, Y+1	; 0x01
 338:	9a 81       	ldd	r25, Y+2	; 0x02
 33a:	01 96       	adiw	r24, 0x01	; 1
 33c:	9a 83       	std	Y+2, r25	; 0x02
 33e:	89 83       	std	Y+1, r24	; 0x01
 340:	29 81       	ldd	r18, Y+1	; 0x01
 342:	3a 81       	ldd	r19, Y+2	; 0x02
 344:	8d 81       	ldd	r24, Y+5	; 0x05
 346:	9e 81       	ldd	r25, Y+6	; 0x06
 348:	82 17       	cp	r24, r18
 34a:	93 07       	cpc	r25, r19
 34c:	34 f7       	brge	.-52     	; 0x31a <delay+0x18>
	for(j=0;j<=1000;j++);
	
}
 34e:	26 96       	adiw	r28, 0x06	; 6
 350:	0f b6       	in	r0, 0x3f	; 63
 352:	f8 94       	cli
 354:	de bf       	out	0x3e, r29	; 62
 356:	0f be       	out	0x3f, r0	; 63
 358:	cd bf       	out	0x3d, r28	; 61
 35a:	cf 91       	pop	r28
 35c:	df 91       	pop	r29
 35e:	08 95       	ret

00000360 <command>:
void command(char c)
{
 360:	df 93       	push	r29
 362:	cf 93       	push	r28
 364:	0f 92       	push	r0
 366:	cd b7       	in	r28, 0x3d	; 61
 368:	de b7       	in	r29, 0x3e	; 62
 36a:	89 83       	std	Y+1, r24	; 0x01
	PORTC=c;
 36c:	85 e3       	ldi	r24, 0x35	; 53
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	29 81       	ldd	r18, Y+1	; 0x01
 372:	fc 01       	movw	r30, r24
 374:	20 83       	st	Z, r18
	PORTD&=~(1<<6);
 376:	82 e3       	ldi	r24, 0x32	; 50
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	22 e3       	ldi	r18, 0x32	; 50
 37c:	30 e0       	ldi	r19, 0x00	; 0
 37e:	f9 01       	movw	r30, r18
 380:	20 81       	ld	r18, Z
 382:	2f 7b       	andi	r18, 0xBF	; 191
 384:	fc 01       	movw	r30, r24
 386:	20 83       	st	Z, r18
	PORTD|=(1<<7);
 388:	82 e3       	ldi	r24, 0x32	; 50
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	22 e3       	ldi	r18, 0x32	; 50
 38e:	30 e0       	ldi	r19, 0x00	; 0
 390:	f9 01       	movw	r30, r18
 392:	20 81       	ld	r18, Z
 394:	20 68       	ori	r18, 0x80	; 128
 396:	fc 01       	movw	r30, r24
 398:	20 83       	st	Z, r18
	delay(2);
 39a:	82 e0       	ldi	r24, 0x02	; 2
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	0e 94 81 01 	call	0x302	; 0x302 <delay>
	PORTD&=~(1<<7);
 3a2:	82 e3       	ldi	r24, 0x32	; 50
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	22 e3       	ldi	r18, 0x32	; 50
 3a8:	30 e0       	ldi	r19, 0x00	; 0
 3aa:	f9 01       	movw	r30, r18
 3ac:	20 81       	ld	r18, Z
 3ae:	2f 77       	andi	r18, 0x7F	; 127
 3b0:	fc 01       	movw	r30, r24
 3b2:	20 83       	st	Z, r18
}
 3b4:	0f 90       	pop	r0
 3b6:	cf 91       	pop	r28
 3b8:	df 91       	pop	r29
 3ba:	08 95       	ret

000003bc <data>:
void data(char d)
{
 3bc:	df 93       	push	r29
 3be:	cf 93       	push	r28
 3c0:	0f 92       	push	r0
 3c2:	cd b7       	in	r28, 0x3d	; 61
 3c4:	de b7       	in	r29, 0x3e	; 62
 3c6:	89 83       	std	Y+1, r24	; 0x01
	PORTC=d;
 3c8:	85 e3       	ldi	r24, 0x35	; 53
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	29 81       	ldd	r18, Y+1	; 0x01
 3ce:	fc 01       	movw	r30, r24
 3d0:	20 83       	st	Z, r18
	PORTD|=(1<<6);
 3d2:	82 e3       	ldi	r24, 0x32	; 50
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	22 e3       	ldi	r18, 0x32	; 50
 3d8:	30 e0       	ldi	r19, 0x00	; 0
 3da:	f9 01       	movw	r30, r18
 3dc:	20 81       	ld	r18, Z
 3de:	20 64       	ori	r18, 0x40	; 64
 3e0:	fc 01       	movw	r30, r24
 3e2:	20 83       	st	Z, r18
	PORTD|=(1<<7);
 3e4:	82 e3       	ldi	r24, 0x32	; 50
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	22 e3       	ldi	r18, 0x32	; 50
 3ea:	30 e0       	ldi	r19, 0x00	; 0
 3ec:	f9 01       	movw	r30, r18
 3ee:	20 81       	ld	r18, Z
 3f0:	20 68       	ori	r18, 0x80	; 128
 3f2:	fc 01       	movw	r30, r24
 3f4:	20 83       	st	Z, r18
	delay(2);
 3f6:	82 e0       	ldi	r24, 0x02	; 2
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	0e 94 81 01 	call	0x302	; 0x302 <delay>
	PORTD&=~(1<<7);
 3fe:	82 e3       	ldi	r24, 0x32	; 50
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	22 e3       	ldi	r18, 0x32	; 50
 404:	30 e0       	ldi	r19, 0x00	; 0
 406:	f9 01       	movw	r30, r18
 408:	20 81       	ld	r18, Z
 40a:	2f 77       	andi	r18, 0x7F	; 127
 40c:	fc 01       	movw	r30, r24
 40e:	20 83       	st	Z, r18
}
 410:	0f 90       	pop	r0
 412:	cf 91       	pop	r28
 414:	df 91       	pop	r29
 416:	08 95       	ret

00000418 <display>:
void display(const char *s)
{
 418:	df 93       	push	r29
 41a:	cf 93       	push	r28
 41c:	00 d0       	rcall	.+0      	; 0x41e <display+0x6>
 41e:	cd b7       	in	r28, 0x3d	; 61
 420:	de b7       	in	r29, 0x3e	; 62
 422:	9a 83       	std	Y+2, r25	; 0x02
 424:	89 83       	std	Y+1, r24	; 0x01
	while(*s)
 426:	10 c0       	rjmp	.+32     	; 0x448 <display+0x30>
	{
		data(*s++);
 428:	89 81       	ldd	r24, Y+1	; 0x01
 42a:	9a 81       	ldd	r25, Y+2	; 0x02
 42c:	fc 01       	movw	r30, r24
 42e:	20 81       	ld	r18, Z
 430:	89 81       	ldd	r24, Y+1	; 0x01
 432:	9a 81       	ldd	r25, Y+2	; 0x02
 434:	01 96       	adiw	r24, 0x01	; 1
 436:	9a 83       	std	Y+2, r25	; 0x02
 438:	89 83       	std	Y+1, r24	; 0x01
 43a:	82 2f       	mov	r24, r18
 43c:	0e 94 de 01 	call	0x3bc	; 0x3bc <data>
		delay(2);
 440:	82 e0       	ldi	r24, 0x02	; 2
 442:	90 e0       	ldi	r25, 0x00	; 0
 444:	0e 94 81 01 	call	0x302	; 0x302 <delay>
	delay(2);
	PORTD&=~(1<<7);
}
void display(const char *s)
{
	while(*s)
 448:	89 81       	ldd	r24, Y+1	; 0x01
 44a:	9a 81       	ldd	r25, Y+2	; 0x02
 44c:	fc 01       	movw	r30, r24
 44e:	80 81       	ld	r24, Z
 450:	88 23       	and	r24, r24
 452:	51 f7       	brne	.-44     	; 0x428 <display+0x10>
	{
		data(*s++);
		delay(2);
	}
 454:	0f 90       	pop	r0
 456:	0f 90       	pop	r0
 458:	cf 91       	pop	r28
 45a:	df 91       	pop	r29
 45c:	08 95       	ret

0000045e <__udivmodqi4>:
 45e:	99 1b       	sub	r25, r25
 460:	79 e0       	ldi	r23, 0x09	; 9
 462:	04 c0       	rjmp	.+8      	; 0x46c <__udivmodqi4_ep>

00000464 <__udivmodqi4_loop>:
 464:	99 1f       	adc	r25, r25
 466:	96 17       	cp	r25, r22
 468:	08 f0       	brcs	.+2      	; 0x46c <__udivmodqi4_ep>
 46a:	96 1b       	sub	r25, r22

0000046c <__udivmodqi4_ep>:
 46c:	88 1f       	adc	r24, r24
 46e:	7a 95       	dec	r23
 470:	c9 f7       	brne	.-14     	; 0x464 <__udivmodqi4_loop>
 472:	80 95       	com	r24
 474:	08 95       	ret

00000476 <_exit>:
 476:	f8 94       	cli

00000478 <__stop_program>:
 478:	ff cf       	rjmp	.-2      	; 0x478 <__stop_program>
