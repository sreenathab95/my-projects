
lcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000244  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000244  000002b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  000002c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000990  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000020  00000000  00000000  00000a15  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000046  00000000  00000000  00000a35  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000151  00000000  00000000  00000a7b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000aa  00000000  00000000  00000bcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000213  00000000  00000000  00000c76  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000060  00000000  00000000  00000e8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000089  00000000  00000000  00000eec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubtypes 0000001e  00000000  00000000  00000f75  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e4       	ldi	r30, 0x44	; 68
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 20 01 	jmp	0x240	; 0x240 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
void display(const char *s);
void delay(int x);
void  command (char c);
void data(char d);
int main(void)
{
  82:	df 93       	push	r29
  84:	cf 93       	push	r28
  86:	00 d0       	rcall	.+0      	; 0x88 <main+0x6>
  88:	cd b7       	in	r28, 0x3d	; 61
  8a:	de b7       	in	r29, 0x3e	; 62
    DDRC=0xff;
  8c:	84 e3       	ldi	r24, 0x34	; 52
  8e:	90 e0       	ldi	r25, 0x00	; 0
  90:	2f ef       	ldi	r18, 0xFF	; 255
  92:	fc 01       	movw	r30, r24
  94:	20 83       	st	Z, r18
	DDRD=0xff;
  96:	81 e3       	ldi	r24, 0x31	; 49
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	2f ef       	ldi	r18, 0xFF	; 255
  9c:	fc 01       	movw	r30, r24
  9e:	20 83       	st	Z, r18
	int f=1;
  a0:	81 e0       	ldi	r24, 0x01	; 1
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	9a 83       	std	Y+2, r25	; 0x02
  a6:	89 83       	std	Y+1, r24	; 0x01
	command(0x38);
  a8:	88 e3       	ldi	r24, 0x38	; 56
  aa:	0e 94 72 00 	call	0xe4	; 0xe4 <command>
	command(0x80);
  ae:	80 e8       	ldi	r24, 0x80	; 128
  b0:	0e 94 72 00 	call	0xe4	; 0xe4 <command>
	command(0x0c);
  b4:	8c e0       	ldi	r24, 0x0C	; 12
  b6:	0e 94 72 00 	call	0xe4	; 0xe4 <command>
	command(0x06);
  ba:	86 e0       	ldi	r24, 0x06	; 6
  bc:	0e 94 72 00 	call	0xe4	; 0xe4 <command>
	command(0x01);
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	0e 94 72 00 	call	0xe4	; 0xe4 <command>
	while (1)
	{
		command(0x80);
  c6:	80 e8       	ldi	r24, 0x80	; 128
  c8:	0e 94 72 00 	call	0xe4	; 0xe4 <command>
		data(f+0x30);
  cc:	89 81       	ldd	r24, Y+1	; 0x01
  ce:	80 5d       	subi	r24, 0xD0	; 208
  d0:	0e 94 a0 00 	call	0x140	; 0x140 <data>
		command(0xc0);
  d4:	80 ec       	ldi	r24, 0xC0	; 192
  d6:	0e 94 72 00 	call	0xe4	; 0xe4 <command>
		display("sreenath");
  da:	80 e6       	ldi	r24, 0x60	; 96
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	0e 94 ce 00 	call	0x19c	; 0x19c <display>
	}
  e2:	f1 cf       	rjmp	.-30     	; 0xc6 <main+0x44>

000000e4 <command>:
	   
}
void command(char c)
{
  e4:	df 93       	push	r29
  e6:	cf 93       	push	r28
  e8:	0f 92       	push	r0
  ea:	cd b7       	in	r28, 0x3d	; 61
  ec:	de b7       	in	r29, 0x3e	; 62
  ee:	89 83       	std	Y+1, r24	; 0x01
	PORTC=c;
  f0:	85 e3       	ldi	r24, 0x35	; 53
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	29 81       	ldd	r18, Y+1	; 0x01
  f6:	fc 01       	movw	r30, r24
  f8:	20 83       	st	Z, r18
	PORTD&=~(1<<6);
  fa:	82 e3       	ldi	r24, 0x32	; 50
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	22 e3       	ldi	r18, 0x32	; 50
 100:	30 e0       	ldi	r19, 0x00	; 0
 102:	f9 01       	movw	r30, r18
 104:	20 81       	ld	r18, Z
 106:	2f 7b       	andi	r18, 0xBF	; 191
 108:	fc 01       	movw	r30, r24
 10a:	20 83       	st	Z, r18
	PORTD|=(1<<7);
 10c:	82 e3       	ldi	r24, 0x32	; 50
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	22 e3       	ldi	r18, 0x32	; 50
 112:	30 e0       	ldi	r19, 0x00	; 0
 114:	f9 01       	movw	r30, r18
 116:	20 81       	ld	r18, Z
 118:	20 68       	ori	r18, 0x80	; 128
 11a:	fc 01       	movw	r30, r24
 11c:	20 83       	st	Z, r18
	delay(2);
 11e:	82 e0       	ldi	r24, 0x02	; 2
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <delay>
	PORTD&=~(1<<7);
 126:	82 e3       	ldi	r24, 0x32	; 50
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	22 e3       	ldi	r18, 0x32	; 50
 12c:	30 e0       	ldi	r19, 0x00	; 0
 12e:	f9 01       	movw	r30, r18
 130:	20 81       	ld	r18, Z
 132:	2f 77       	andi	r18, 0x7F	; 127
 134:	fc 01       	movw	r30, r24
 136:	20 83       	st	Z, r18
	
}
 138:	0f 90       	pop	r0
 13a:	cf 91       	pop	r28
 13c:	df 91       	pop	r29
 13e:	08 95       	ret

00000140 <data>:
void data(char d)
{
 140:	df 93       	push	r29
 142:	cf 93       	push	r28
 144:	0f 92       	push	r0
 146:	cd b7       	in	r28, 0x3d	; 61
 148:	de b7       	in	r29, 0x3e	; 62
 14a:	89 83       	std	Y+1, r24	; 0x01
	PORTC=d;
 14c:	85 e3       	ldi	r24, 0x35	; 53
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	29 81       	ldd	r18, Y+1	; 0x01
 152:	fc 01       	movw	r30, r24
 154:	20 83       	st	Z, r18
	PORTD|=(1<<6);
 156:	82 e3       	ldi	r24, 0x32	; 50
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	22 e3       	ldi	r18, 0x32	; 50
 15c:	30 e0       	ldi	r19, 0x00	; 0
 15e:	f9 01       	movw	r30, r18
 160:	20 81       	ld	r18, Z
 162:	20 64       	ori	r18, 0x40	; 64
 164:	fc 01       	movw	r30, r24
 166:	20 83       	st	Z, r18
	PORTD|=(1<<7);
 168:	82 e3       	ldi	r24, 0x32	; 50
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	22 e3       	ldi	r18, 0x32	; 50
 16e:	30 e0       	ldi	r19, 0x00	; 0
 170:	f9 01       	movw	r30, r18
 172:	20 81       	ld	r18, Z
 174:	20 68       	ori	r18, 0x80	; 128
 176:	fc 01       	movw	r30, r24
 178:	20 83       	st	Z, r18
	delay(2);
 17a:	82 e0       	ldi	r24, 0x02	; 2
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <delay>
	PORTD&=~(1<<7);
 182:	82 e3       	ldi	r24, 0x32	; 50
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	22 e3       	ldi	r18, 0x32	; 50
 188:	30 e0       	ldi	r19, 0x00	; 0
 18a:	f9 01       	movw	r30, r18
 18c:	20 81       	ld	r18, Z
 18e:	2f 77       	andi	r18, 0x7F	; 127
 190:	fc 01       	movw	r30, r24
 192:	20 83       	st	Z, r18
}
 194:	0f 90       	pop	r0
 196:	cf 91       	pop	r28
 198:	df 91       	pop	r29
 19a:	08 95       	ret

0000019c <display>:
void display(const char *s)
{
 19c:	df 93       	push	r29
 19e:	cf 93       	push	r28
 1a0:	00 d0       	rcall	.+0      	; 0x1a2 <display+0x6>
 1a2:	cd b7       	in	r28, 0x3d	; 61
 1a4:	de b7       	in	r29, 0x3e	; 62
 1a6:	9a 83       	std	Y+2, r25	; 0x02
 1a8:	89 83       	std	Y+1, r24	; 0x01
	while (*s)
 1aa:	10 c0       	rjmp	.+32     	; 0x1cc <display+0x30>
	{
		data(*s++);
 1ac:	89 81       	ldd	r24, Y+1	; 0x01
 1ae:	9a 81       	ldd	r25, Y+2	; 0x02
 1b0:	fc 01       	movw	r30, r24
 1b2:	20 81       	ld	r18, Z
 1b4:	89 81       	ldd	r24, Y+1	; 0x01
 1b6:	9a 81       	ldd	r25, Y+2	; 0x02
 1b8:	01 96       	adiw	r24, 0x01	; 1
 1ba:	9a 83       	std	Y+2, r25	; 0x02
 1bc:	89 83       	std	Y+1, r24	; 0x01
 1be:	82 2f       	mov	r24, r18
 1c0:	0e 94 a0 00 	call	0x140	; 0x140 <data>
		delay(2);
 1c4:	82 e0       	ldi	r24, 0x02	; 2
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <delay>
	delay(2);
	PORTD&=~(1<<7);
}
void display(const char *s)
{
	while (*s)
 1cc:	89 81       	ldd	r24, Y+1	; 0x01
 1ce:	9a 81       	ldd	r25, Y+2	; 0x02
 1d0:	fc 01       	movw	r30, r24
 1d2:	80 81       	ld	r24, Z
 1d4:	88 23       	and	r24, r24
 1d6:	51 f7       	brne	.-44     	; 0x1ac <display+0x10>
	{
		data(*s++);
		delay(2);
	}
}
 1d8:	0f 90       	pop	r0
 1da:	0f 90       	pop	r0
 1dc:	cf 91       	pop	r28
 1de:	df 91       	pop	r29
 1e0:	08 95       	ret

000001e2 <delay>:
void delay(int x)
{
 1e2:	df 93       	push	r29
 1e4:	cf 93       	push	r28
 1e6:	00 d0       	rcall	.+0      	; 0x1e8 <delay+0x6>
 1e8:	00 d0       	rcall	.+0      	; 0x1ea <delay+0x8>
 1ea:	00 d0       	rcall	.+0      	; 0x1ec <delay+0xa>
 1ec:	cd b7       	in	r28, 0x3d	; 61
 1ee:	de b7       	in	r29, 0x3e	; 62
 1f0:	9e 83       	std	Y+6, r25	; 0x06
 1f2:	8d 83       	std	Y+5, r24	; 0x05
	int i,j;
	for(i=0;i<=x;i++)
 1f4:	1a 82       	std	Y+2, r1	; 0x02
 1f6:	19 82       	std	Y+1, r1	; 0x01
 1f8:	13 c0       	rjmp	.+38     	; 0x220 <delay+0x3e>
	 for(j=0;j<=1000;j++);
 1fa:	1c 82       	std	Y+4, r1	; 0x04
 1fc:	1b 82       	std	Y+3, r1	; 0x03
 1fe:	05 c0       	rjmp	.+10     	; 0x20a <delay+0x28>
 200:	8b 81       	ldd	r24, Y+3	; 0x03
 202:	9c 81       	ldd	r25, Y+4	; 0x04
 204:	01 96       	adiw	r24, 0x01	; 1
 206:	9c 83       	std	Y+4, r25	; 0x04
 208:	8b 83       	std	Y+3, r24	; 0x03
 20a:	8b 81       	ldd	r24, Y+3	; 0x03
 20c:	9c 81       	ldd	r25, Y+4	; 0x04
 20e:	23 e0       	ldi	r18, 0x03	; 3
 210:	89 3e       	cpi	r24, 0xE9	; 233
 212:	92 07       	cpc	r25, r18
 214:	ac f3       	brlt	.-22     	; 0x200 <delay+0x1e>
	}
}
void delay(int x)
{
	int i,j;
	for(i=0;i<=x;i++)
 216:	89 81       	ldd	r24, Y+1	; 0x01
 218:	9a 81       	ldd	r25, Y+2	; 0x02
 21a:	01 96       	adiw	r24, 0x01	; 1
 21c:	9a 83       	std	Y+2, r25	; 0x02
 21e:	89 83       	std	Y+1, r24	; 0x01
 220:	29 81       	ldd	r18, Y+1	; 0x01
 222:	3a 81       	ldd	r19, Y+2	; 0x02
 224:	8d 81       	ldd	r24, Y+5	; 0x05
 226:	9e 81       	ldd	r25, Y+6	; 0x06
 228:	82 17       	cp	r24, r18
 22a:	93 07       	cpc	r25, r19
 22c:	34 f7       	brge	.-52     	; 0x1fa <delay+0x18>
	 for(j=0;j<=1000;j++);
 22e:	26 96       	adiw	r28, 0x06	; 6
 230:	0f b6       	in	r0, 0x3f	; 63
 232:	f8 94       	cli
 234:	de bf       	out	0x3e, r29	; 62
 236:	0f be       	out	0x3f, r0	; 63
 238:	cd bf       	out	0x3d, r28	; 61
 23a:	cf 91       	pop	r28
 23c:	df 91       	pop	r29
 23e:	08 95       	ret

00000240 <_exit>:
 240:	f8 94       	cli

00000242 <__stop_program>:
 242:	ff cf       	rjmp	.-2      	; 0x242 <__stop_program>
